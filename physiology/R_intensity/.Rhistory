Anova(Acer_bw_model_2,  type = "II", test.statistic = "F") #you need to manually specify Satterthwaite's method, because otherwise it will give you the Wald/Chi-squared approximation and that is only appropriate for binomial or poisson distributions. Satterthwaite's method is for normal/gaussian
x = residuals(Pcli_bw_model)
plot(fitted(Pcli_bw_model), x)
leveneTest(x ~ Treatment*Colony, data=Pcli_calc_bw, center=mean) # formal statistical test for homogeneity of variance #not significant
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
shapiro.test(x) # formal statistical test
# Perform Bonferroni outlier test
bonf_outliers <- outlierTest(Pcli_bw_model, cutoff = Inf, n.max = Inf)
# View all potential outliers identified with Bonferroni correction
bonf_outliers #rows 37, 63, and 54
# Indices of the rows to remove
rows_to_remove <- c(37, 63, 54)
# Remove these rows
Pcli_calc_bw_clean <- Pcli_calc_bw[-rows_to_remove, ]
Pcli_bw_model_2 <- lmer(percent_change ~ Treatment*Colony + (1|Treatment_Tank), data = Pcli_calc_bw_clean)
x = residuals(Pcli_bw_model_2)
plot(fitted(Pcli_bw_model_2), x)
leveneTest(x ~ Treatment*Colony, data=Pcli_calc_bw_clean, center=mean) # formal statistical test for homogenity of variance #not significant
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
shapiro.test(x) # formal statistical test -- good enough (i tried every possible transformation and outlier filter combination and this was the best result)
Anova(Pcli_bw_model_2, type = "II", test.statistic = "F") #you need to manually specify Satterthwaite's method, because otherwise it will give you the Wald/Chi-squared approximation and that is only appropriate for binomial or poisson distributions. Satterthwaite's method is for normal/gaussian
#capture.output(Anova(Pcli_bw_model_2, type = "II", test.statistic = "F"), file = "Pcli_bw_model_ANOVA.csv")
#colony + treatment
bw_Acer_emms <- emmeans(Acer_bw_model_2, ~ Colony*Treatment)
pairs(bw_Acer_emms,  by = c("Colony"))
capture.output(pairs(bw_Acer_emms,  by = c("Colony")), file="Acer_percentchange_treatment_colony_emmeans.csv")
pairs(bw_Acer_emms)
#colony + treatment
bw_Acer_emms <- emmeans(Acer_bw_model_2, ~ Colony*Treatment, weights = "proportional", adjust="none")
pairs(bw_Acer_emms, )
Acer_bw_model_2
pairs(bw_Acer_emms)
# P.value adjustment of the Bonferroni
rbind(bw_Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
#colony + treatment
bw_Acer_emms <- emmeans(Acer_bw_model_2, ~ Colony*Treatment, weights = "proportional", adjust="none")
# P.value adjustment of the Bonferroni
rbind(bw_Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
bw_Acer_emms
#colony + treatment
bw_Acer_emms <- emmeans(Acer_bw_model_2, pairwise ~ Colony*Treatment, weights = "proportional", adjust="none")
pairs(bw_Acer_emms)
# P.value adjustment of the Bonferroni
rbind(bw_Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
#colony + treatment
bw_Acer_emms <- emmeans(Acer_bw_model_2, pairwise ~ Colony*Treatment,  adjust="none")
# P.value adjustment of the Bonferroni
rbind(bw_Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
#colony + treatment
bw_Acer_emms <- emmeans(Acer_bw_model_2, pairwise ~ Colony*Treatment)
# P.value adjustment of the Bonferroni
rbind(bw_Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
pairs(bw_Acer_emms)
#colony + treatment
bw_Acer_emms <- emmeans(Acer_bw_model_2, pairwise ~ Colony*Treatment, adjustment = "Tukey")
# P.value adjustment of the Bonferroni
rbind(bw_Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
bw_Acer_emms
bw_Acer_emms$contrasts
# P.value adjustment of the Bonferroni
rbind(bw_Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
bw_Acer_emms$contrasts
pairs(bw_Acer_emms)
capture.output(pairs(bw_Acer_emms), file="Acer_percentchange_treatment_colony_emmeans.csv")
#colony + treatment
bw_Pcli_emms <- emmeans(Pcli_bw_model_2, pairwise ~ Colony*Treatment)
bw_Pcli_emms
pairs(bw_Pcli_emms)
capture.output(pairs(bw_Pcli_emms), file="Pcli_percentchange_treatment_colony_emmeans.csv")
Acer_bw_model_2
Acer_calc_bw %>%
dplyr::select(Species:Treatment_Tank, CalcMAir_initial, CalcMAir_final) %>%
pivot_longer(CalcMAir_initial:CalcMAir_final, names_to = "Timepoint", values_to="mass") %>%
mutate(Timepoint = case_when(Timepoint == "CalcMAir_initial" ~ "0",
Timepoint == "CalcMAir_final" ~ "28")) %>%
mutate(Timepoint = as.factor(Timepoint)) -> Acer_bw_long
Acer_bw_model <- lmer(mass ~ Treatment*Colony*Timepoint + (1|Treatment_Tank) + (1|ID), data = Acer_bw_long)
summary(Acer_bw_model)
anova(Acer_bw_model)
Pcli_calc_bw %>%
dplyr::select(Species:Treatment_Tank, CalcMAir_initial, CalcMAir_final) %>%
pivot_longer(CalcMAir_initial:CalcMAir_final, names_to = "Timepoint", values_to="mass") %>%
mutate(Timepoint = case_when(Timepoint == "CalcMAir_initial" ~ "0",
Timepoint == "CalcMAir_final" ~ "28")) %>%
mutate(Timepoint = as.factor(Timepoint)) -> Pcli_bw_long
Pcli_bw_model <- lmer(mass ~ Treatment*Colony*Timepoint + (1|Treatment_Tank) + (1|ID), data = Pcli_bw_long)
summary(Pcli_bw_model)
anova(Pcli_bw_model)
x = residuals(Acer_bw_model)
plot(fitted(Acer_bw_model), x)
leveneTest(x ~ Treatment*Colony*Timepoint, data=Acer_bw_long, center=mean) # formal statistical test for homogenity of variance #not significant
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
shapiro.test(x) # formal statistical test
car::outlierTest(Acer_bw_model) #row 27
Acer_bw_long[-70, ] -> Acer_bw_long_noout
Acer_bw_model_2 <- lmer(mass ~ Treatment*Colony*Timepoint + (1|Treatment_Tank) + (1|ID), data = Acer_bw_long_noout)
x = residuals(Acer_bw_model_2)
plot(fitted(Acer_bw_model_2), x)
leveneTest(x ~ Treatment*Colony*Timepoint, data=Acer_bw_long_noout, center=mean) # formal statistical test for homogenity of variance #not significant
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
shapiro.test(x) # formal statistical test
# Acer data meets assumptions, yay
Anova(Acer_bw_model_2,  type = "II", test.statistic = "F") #you need to manually specify Satterthwaite's method, because otherwise it will give you the Wald/Chi-squared approximation and that is only appropriate for binomial or poisson distributions. Satterthwaite's method is for normal/gaussian
#capture.output(Anova(Acer_bw_model_2,  type = "II", test.statistic = "F"), file = "Acer_bw_model_time_ANOVA.csv")
x = residuals(Pcli_bw_model)
plot(fitted(Pcli_bw_model), x)
leveneTest(x ~ Treatment*Colony*Timepoint, data=Pcli_bw_long, center=mean) # formal statistical test for homogeneity of variance #not significant
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
shapiro.test(x) # formal statistical test -- very significant
# Perform Bonferroni outlier test
bonf_outliers <- outlierTest(Pcli_bw_model, cutoff = Inf, n.max = Inf)
# View all potential outliers identified with Bonferroni correction
bonf_outliers #rows 37, 63, and 54
# Indices of the rows to remove
rows_to_remove <- c(73,74,107,108)
# Remove these rows
Pcli_bw_long_clean <- Pcli_bw_long[-rows_to_remove, ]
Pcli_bw_model_2 <- lmer(mass ~ Treatment*Colony*Timepoint + (1|Treatment_Tank) + (1|ID), data = Pcli_bw_long_clean)
x = residuals(Pcli_bw_model_2)
plot(fitted(Pcli_bw_model_2), x)
leveneTest(x ~ Treatment*Colony*Timepoint, data=Pcli_bw_long_clean, center=mean) # formal statistical test for homogenity of variance #not significant
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
shapiro.test(x) # formal statistical test
Anova(Pcli_bw_model_2, type = "II", test.statistic = "F") #you need to manually specify Satterthwaite's method, because otherwise it will give you the Wald/Chi-squared approximation and that is only appropriate for binomial or poisson distributions. Satterthwaite's method is for normal/gaussian
#capture.output(Anova(Pcli_bw_model_2, type = "II", test.statistic = "F"), file = "Pcli_bw_model_time_ANOVA.csv")
Acer_bw_model_2
bw_Acer_emms <- emmeans(Acer_bw_model_2, pairwise ~ Colony*Treatment*Timepoint)
pairs(bw_Acer_emms)
pairs(bw_Acer_emms, by = c("Colony"))
pairs(bw_Acer_emms)
capture.output(pairs(bw_Acer_emms), file = "Acer_bw_Tukey_colonytreatmenttimepoint.csv")
bw_Pcli_emms <- emmeans(Pcli_bw_model_2, pairwise ~ Colony*Treatment*Timepoint)
pairs(bw_Pcli_emms)
capture.output(pairs(bw_Pcli_emms), file = "Pcli_bw_Tukey_colonytreatmenttimepoint.csv")
#look within colonies
pairs(bw_Acer_emms, by = c("Colony"))
#look within colonies
pairs(bw_Pcli_emms, by = c("Colony"))
setwd("~/Library/CloudStorage/OneDrive-UniversityofMiami/GitHub/Ch1_temperaturevariability2023/physiology/R_intensity")
library(tidyverse)
library(readxl)
library(rstatix)
library(plotrix)
library(ggpubr)
library(cowplot)
library(FSA) #for Summarize
library(lme4)
library(car)
library(MASS)
library(emmeans)
Rscoredata <- read_xlsx("data_rscores.xlsx")
Rscoredata %>%
rename(`Photo ID` = `Image #`) %>%
rename(Date = `Date (Folder Name)`) -> Rscoredata
# Only use the R-score data from the treatment period dates
initialphotos <- read_xlsx("photo_metadata.xlsx")
april18 <- read_xlsx("photo_metadata.xlsx", sheet = "april 18")
# june21 <- read_xlsx("photo_metadata.xlsx", sheet = "june 21")
# july8 <- read_xlsx("photo_metadata.xlsx", sheet = "july 8")
coral_metadata <- read_csv("../metadata.csv")
coral_metadata %>%
dplyr::select(Species:CBASS_tank) -> coral_metadata
str(initialphotos)
initialphotos %>%
dplyr::select(`Photo ID`:`Coral Position`) -> initialphotos
str(april18)
april18 %>%
dplyr::select(`Photo ID`:`Coral Position`) -> april18
# str(june21)
# june21%>%
#   dplyr::select(`Photo ID`:`Coral Position`) -> june21
#
# str(july8)
# july8 %>%
#   dplyr::select(`Photo ID`:`Coral Position`) -> july8
full_join(initialphotos, april18) -> allRscores
allRscores
#Tank column depends on time point, as the tank assignments changed throughout timeline. But, should be able to use the Puck ID + Species as the unique identifier
allRscores %>%
mutate(Species = case_when(Species == "Acer" ~ "Acropora cervicornis",
Species == "Pcli" ~ "Pseudodiploria clivosa")) -> allRscores
allRscores %>%
rename(ID = `Puck ID`) -> allRscores #821 rows
full_join(allRscores, coral_metadata, by = c("Species", "ID")) %>%
drop_na(`Photo ID`)  -> allmetadata #821 rows
full_join(allmetadata, Rscoredata, by = c("Date", "Photo ID", "Coral Position")) -> Rintensity_withmetadata
Rintensity_withmetadata %>%
dplyr::select(!Genotype) -> Rintensity_withmetadata
Rintensity_withmetadata$month <- format(Rintensity_withmetadata$Date, "%m")
Rintensity_withmetadata$Date <- as.factor(Rintensity_withmetadata$Date)
Rintensity_withmetadata$month <- as.factor(Rintensity_withmetadata$month)
Rintensity_withmetadata %>%
group_by(ID, Species, Colony, Treatment, month) %>%
mutate(mean_Rintensity_percoral = mean(Mean)) -> Rintensity_withmetadata
# Rintensity_withmetadata %>%
#   filter(is.na(Species)) #photo 4709 is a duplicate from photo 4711 so I already have these values in the spreadsheet
Rintensity_withmetadata %>%
drop_na(ID) -> Rintensity_withmetadata
#write_csv(Rintensity_withmetadata, "Rintensity_withmetadata.csv")
# Calculate days relative to start of treatment
Rintensity_withmetadata %>%
ungroup() %>%
dplyr::select(Date:Species, Colony:Treatment_Tank, mean_Rintensity_percoral) %>%
distinct() %>%
mutate(Date = as.Date(as.character(Date), format = "%Y-%m-%d")) %>%
mutate(Days_Relative = as.numeric(Date - as.Date("2022-03-24"))) -> Rintensity_tidydata
Rintensity_withmetadata %>%
ungroup() %>%
filter(month == "03" | month == "04") %>%
dplyr::select(ID, Species, Colony, Treatment, Treatment_Tank, month, mean_Rintensity_percoral) %>%
distinct() %>%
pivot_wider(names_from = "month", values_from = "mean_Rintensity_percoral") %>%
mutate(percent_change = ((`04`-`03`)/`03`)*100) -> percentchange
percentchange %>%
drop_na() -> percentchange
plot1<- ggplot(percentchange,aes(x = Species, y= percent_change, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
labs(y = "Percent Change in R-Intensity") +
theme(text = element_text(size = 15)) +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
facet_wrap(~Species, scales = "free_x", ncol = 1) +
theme(legend.position="none")
plot2<-ggplot(Rintensity_tidydata, aes(x=Days_Relative, y=mean_Rintensity_percoral, color = Treatment)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Species,ncol = 1, nrow = 2) +
ylab("R Intensity")+
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(text = element_text(size = 15)) +
labs(x="Days in Treatment") +
theme(legend.position="none") +
scale_x_continuous(limits = c(-16, 25), breaks = seq(-15, 25, by = 5))
plot3<-ggplot(Rintensity_tidydata, aes(x=Days_Relative, y=mean_Rintensity_percoral, color = Treatment)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Species+Colony) +
ylab("R Intensity")+
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(text = element_text(size = 15)) +
labs(x="Days in Treatment") +
scale_x_continuous(limits = c(-16, 25), breaks = seq(-15, 25, by = 5)) +
theme(legend.position="none")
plot_grid(plot1, plot2,plot3, nrow=1, rel_widths = c(1, 1, 2))
ggsave("colorscore_boxplot_species_genet_lines.pdf", width = 12, height = 5)
Rintensity_tidydata %>%
filter(Species == "Acropora cervicornis") -> Acer_tidydata
Acer_tidydata %>%
mutate(time_point = case_when(Date < as.Date("2022-03-30") ~ "T0",
Date > as.Date("2022-04-17") ~ "T1")) -> Acer_tidydata
Rintensity_tidydata %>%
filter(Species == "Pseudodiploria clivosa") %>%
mutate(time_point = case_when(Date < as.Date("2022-03-30") ~ "T0",
Date > as.Date("2022-04-17") ~ "T1")) -> Pcli_tidydata
#repeated measures -- include ID in the formula as a random effect
Acer_model <- lmer(mean_Rintensity_percoral ~ Treatment*Colony*time_point + (1|Treatment_Tank) + (1|ID), data = Acer_tidydata)
summary(Acer_model)
Anova(Acer_model, type = "II", test.statistic = "F")
Pcli_model <- lmer(mean_Rintensity_percoral ~ Treatment*Colony*time_point + (1|Treatment_Tank) + (1|ID), data = Pcli_tidydata)
summary(Pcli_model)
Anova(Pcli_model, type = "II", test.statistic = "F")
x = residuals(Acer_model)
plot(fitted(Acer_model), x)
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
# Acer data meets assumptions, yay
Anova(Acer_model, type = "II", test.statistic = "F")
#capture.output(Anova(Acer_model, type = "II", test.statistic = "F"), file = "Acer_colorscore_model_ANOVA.csv")
x = residuals(Pcli_model)
plot(fitted(Pcli_model), x)
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
# Pcli data meets assumptions, yay
Anova(Pcli_model, type = "III", test.statistic = "F")
#capture.output(Anova(Pcli_model, type = "II", test.statistic = "F"), file = "Pcli_colorscore_model_ANOVA.csv")
#colony + treatment + timepoint
Acer_emms <- emmeans(Acer_model, pairwise ~ Treatment*Colony*time_point, weights = "proportional", adjust="conf")
Acer_emms
Acer_emms$contrasts
#colony + treatment + timepoint
Acer_emms <- emmeans(Acer_model, pairwise ~ Treatment*Colony*time_point)
Acer_emms
capture.output(Acer_emms$contrasts, file = "Acer_Tukey_colonytreatmenttimepoint.csv")
#colony + treatment + timepoint
Pcli_emms <- emmeans(Pcli_model, pairwise ~ Treatment*Colony*time_point)
capture.output(Pcli_emms$contrasts, file = "Pcli_colonytreatmenttimepoint.csv")
percentchange
percentchange %>%
filter(Species == "Acropora cervicornis") -> Acer_colorscore
Acer_colorscore_model <- lmer(percent_change ~ Treatment*Colony + (1|Treatment_Tank), data = Acer_colorscore)
summary(Acer_bw_model)
summary(Acer_colorscore_model)
anova(Acer_colorscore_model)
percentchange %>%
filter(Species == "Pseudodiploria clivosa") -> Pcli_colorscore
Pcli_colorscore_model <- lmer(percent_change ~ Treatment*Colony + (1|Treatment_Tank), data = Pcli_colorscore)
summary(Pcli_colorscore_model)
anova(Pcli_colorscore_model)
anova(Pcli_colorscore_model)
x = residuals(Acer_colorscore_model)
plot(fitted(Acer_colorscore_model), x)
leveneTest(x ~ Treatment*Colony, data=Acer_colorscore, center=mean) # formal statistical test for homogenity of variance #not significant
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
shapiro.test(x) # formal statistical test  -- significant aka not normal
car::outlierTest(Acer_colorscore_model) #row 27
Acer_colorscore[-30, ] -> Acer_colorscore_noout
Acer_colorscore_model_2 <- lmer(percent_change ~ Treatment*Colony + (1|Treatment_Tank), data = Acer_colorscore_noout)
x = residuals(Acer_colorscore_model_2)
plot(fitted(Acer_colorscore_model_2), x)
leveneTest(x ~ Treatment*Colony, data=Acer_colorscore_noout, center=mean) # formal statistical test for homogenity of variance #not significant
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
shapiro.test(x) # formal statistical test
library(tidyverse)
library(readxl)
library(rstatix)
library(plotrix)
library(ggpubr)
library(cowplot)
library(FSA) #for Summarize
library(lme4)
library(car)
library(MASS)
library(emmeans)
Rscoredata <- read_xlsx("data_rscores.xlsx")
Rscoredata %>%
rename(`Photo ID` = `Image #`) %>%
rename(Date = `Date (Folder Name)`) -> Rscoredata
# Only use the R-score data from the treatment period dates
initialphotos <- read_xlsx("photo_metadata.xlsx")
april18 <- read_xlsx("photo_metadata.xlsx", sheet = "april 18")
# june21 <- read_xlsx("photo_metadata.xlsx", sheet = "june 21")
# july8 <- read_xlsx("photo_metadata.xlsx", sheet = "july 8")
coral_metadata <- read_csv("../metadata.csv")
coral_metadata %>%
dplyr::select(Species:CBASS_tank) -> coral_metadata
str(initialphotos)
initialphotos %>%
dplyr::select(`Photo ID`:`Coral Position`) -> initialphotos
str(april18)
april18 %>%
dplyr::select(`Photo ID`:`Coral Position`) -> april18
# str(june21)
# june21%>%
#   dplyr::select(`Photo ID`:`Coral Position`) -> june21
#
# str(july8)
# july8 %>%
#   dplyr::select(`Photo ID`:`Coral Position`) -> july8
full_join(initialphotos, april18) -> allRscores
allRscores
#Tank column depends on time point, as the tank assignments changed throughout timeline. But, should be able to use the Puck ID + Species as the unique identifier
allRscores %>%
mutate(Species = case_when(Species == "Acer" ~ "Acropora cervicornis",
Species == "Pcli" ~ "Pseudodiploria clivosa")) -> allRscores
allRscores %>%
rename(ID = `Puck ID`) -> allRscores #821 rows
full_join(allRscores, coral_metadata, by = c("Species", "ID")) %>%
drop_na(`Photo ID`)  -> allmetadata #821 rows
full_join(allmetadata, Rscoredata, by = c("Date", "Photo ID", "Coral Position")) -> Rintensity_withmetadata
Rintensity_withmetadata %>%
dplyr::select(!Genotype) -> Rintensity_withmetadata
Rintensity_withmetadata$month <- format(Rintensity_withmetadata$Date, "%m")
Rintensity_withmetadata$Date <- as.factor(Rintensity_withmetadata$Date)
Rintensity_withmetadata$month <- as.factor(Rintensity_withmetadata$month)
Rintensity_withmetadata %>%
group_by(ID, Species, Colony, Treatment, month) %>%
mutate(mean_Rintensity_percoral = mean(Mean)) -> Rintensity_withmetadata
# Rintensity_withmetadata %>%
#   filter(is.na(Species)) #photo 4709 is a duplicate from photo 4711 so I already have these values in the spreadsheet
Rintensity_withmetadata %>%
drop_na(ID) -> Rintensity_withmetadata
#write_csv(Rintensity_withmetadata, "Rintensity_withmetadata.csv")
# Calculate days relative to start of treatment
Rintensity_withmetadata %>%
ungroup() %>%
dplyr::select(Date:Species, Colony:Treatment_Tank, mean_Rintensity_percoral) %>%
distinct() %>%
mutate(Date = as.Date(as.character(Date), format = "%Y-%m-%d")) %>%
mutate(Days_Relative = as.numeric(Date - as.Date("2022-03-24"))) -> Rintensity_tidydata
Rintensity_withmetadata %>%
ungroup() %>%
filter(month == "03" | month == "04") %>%
dplyr::select(ID, Species, Colony, Treatment, Treatment_Tank, month, mean_Rintensity_percoral) %>%
distinct() %>%
pivot_wider(names_from = "month", values_from = "mean_Rintensity_percoral") %>%
mutate(percent_change = ((`04`-`03`)/`03`)*100) -> percentchange
percentchange %>%
drop_na() -> percentchange
plot1<- ggplot(percentchange,aes(x = Species, y= percent_change, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
labs(y = "Percent Change in R-Intensity") +
theme(text = element_text(size = 15)) +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
facet_wrap(~Species, scales = "free_x", ncol = 1) +
theme(legend.position="none")
percentchange %>%
filter(Species == "Acropora cervicornis") -> Acer_colorscore
Acer_colorscore_model <- lmer(percent_change ~ Treatment*Colony + (1|Treatment_Tank), data = Acer_colorscore)
summary(Acer_colorscore_model)
anova(Acer_colorscore_model)
percentchange %>%
filter(Species == "Pseudodiploria clivosa") -> Pcli_colorscore
Pcli_colorscore_model <- lmer(percent_change ~ Treatment*Colony + (1|Treatment_Tank), data = Pcli_colorscore)
summary(Pcli_colorscore_model)
anova(Pcli_colorscore_model)
Acer_colorscore
percentchange %>%
filter(Species == "Acropora cervicornis") -> Acer_colorscore
Acer_colorscore_model <- lmer(percent_change ~ Treatment*Colony + (1|Treatment_Tank), data = Acer_colorscore)
summary(Acer_colorscore_model)
anova(Acer_colorscore_model)
percentchange %>%
filter(Species == "Pseudodiploria clivosa") -> Pcli_colorscore
Pcli_colorscore_model <- lmer(percent_change ~ Treatment*Colony + (1|Treatment_Tank), data = Pcli_colorscore)
summary(Pcli_colorscore_model)
anova(Pcli_colorscore_model)
x = residuals(Acer_colorscore_model)
plot(fitted(Acer_colorscore_model), x)
leveneTest(x ~ Treatment*Colony, data=Acer_colorscore, center=mean) # formal statistical test for homogenity of variance #not significant
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
shapiro.test(x) # formal statistical test  -- significant aka not normal
car::outlierTest(Acer_colorscore_model) #row 30
Acer_colorscore[-30, ] -> Acer_colorscore_noout
Acer_colorscore_model_2 <- lmer(percent_change ~ Treatment*Colony + (1|Treatment_Tank), data = Acer_colorscore_noout)
x = residuals(Acer_colorscore_model_2)
plot(fitted(Acer_colorscore_model_2), x)
leveneTest(x ~ Treatment*Colony, data=Acer_colorscore_noout, center=mean) # formal statistical test for homogenity of variance #not significant
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
shapiro.test(x) # formal statistical test
# Acer data meets assumptions, yay
Anova(Acer_bw_model_2,  type = "II", test.statistic = "F") #you need to manually specify Satterthwaite's method, because otherwise it will give you the Wald/Chi-squared approximation and that is only appropriate for binomial or poisson distributions. Satterthwaite's method is for normal/gaussian
Anova(Acer_colorscore_model_2,  type = "II", test.statistic = "F") #you need to manually specify Satterthwaite's method, because otherwise it will give you the Wald/Chi-squared approximation and that is only appropriate for binomial or poisson distributions. Satterthwaite's method is for normal/gaussian
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
shapiro.test(x)
car::outlierTest(Acer_colorscore_model_1) #row 30
car::outlierTest(Acer_colorscore_model_2) #row 30
Acer_colorscore_noout[-61, ] -> Acer_colorscore_noout
Acer_colorscore_model_2 <- lmer(percent_change ~ Treatment*Colony + (1|Treatment_Tank), data = Acer_colorscore_noout)
x = residuals(Acer_colorscore_model_2)
plot(fitted(Acer_colorscore_model_2), x)
leveneTest(x ~ Treatment*Colony, data=Acer_colorscore_noout, center=mean) # formal statistical test for homogenity of variance #not significant
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
shapiro.test(x)
shapiro.test(x) # formal statistical test
car::outlierTest(Acer_colorscore_model_2) #row 61
Acer_colorscore_noout[-62, ] -> Acer_colorscore_noout
Acer_colorscore_model_2 <- lmer(percent_change ~ Treatment*Colony + (1|Treatment_Tank), data = Acer_colorscore_noout)
x = residuals(Acer_colorscore_model_2)
plot(fitted(Acer_colorscore_model_2), x)
leveneTest(x ~ Treatment*Colony, data=Acer_colorscore_noout, center=mean) # formal statistical test for homogenity of variance #not significant
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
shapiro.test(x) # formal statistical test
car::outlierTest(Acer_colorscore_model_2) #row 62
Acer_colorscore_noout[-36, ] -> Acer_colorscore_noout
Acer_colorscore_model_2 <- lmer(percent_change ~ Treatment*Colony + (1|Treatment_Tank), data = Acer_colorscore_noout)
x = residuals(Acer_colorscore_model_2)
plot(fitted(Acer_colorscore_model_2), x)
leveneTest(x ~ Treatment*Colony, data=Acer_colorscore_noout, center=mean) # formal statistical test for homogenity of variance #not significant
qqnorm(x); qqline(x)
leveneTest(x ~ Treatment*Colony, data=Acer_colorscore_noout, center=mean) # formal statistical test for homogenity of variance #not significant
shapiro.test(x) # formal statistical test
car::outlierTest(Acer_colorscore_model_2) #row 36
Acer_colorscore_noout[-48, ] -> Acer_colorscore_noout
Acer_colorscore_model_2 <- lmer(percent_change ~ Treatment*Colony + (1|Treatment_Tank), data = Acer_colorscore_noout)
x = residuals(Acer_colorscore_model_2)
plot(fitted(Acer_colorscore_model_2), x)
leveneTest(x ~ Treatment*Colony, data=Acer_colorscore_noout, center=mean) # formal statistical test for homogenity of variance #not significant
qqnorm(x); qqline(x)
hist(x) # histogram of residuals to check for normal distribution of residuals
shapiro.test(x) # formal statistical test
car::outlierTest(Acer_colorscore_model_2) #row 48
Acer_colorscore_noout[-36, ] -> Acer_colorscore_noout
Acer_colorscore_model_2 <- lmer(percent_change ~ Treatment*Colony + (1|Treatment_Tank), data = Acer_colorscore_noout)
x = residuals(Acer_colorscore_model_2)
plot(fitted(Acer_colorscore_model_2), x)
leveneTest(x ~ Treatment*Colony, data=Acer_colorscore_noout, center=mean) # formal statistical test for homogenity of variance #not significant
qqnorm(x); qqline(x)
hist(x) # histogram of residuals to check for normal distribution of residuals
shapiro.test(x) # formal statistical test
car::outlierTest(Acer_colorscore_model_2)
Anova(Acer_colorscore_model_2,  type = "II", test.statistic = "F") #you need to manually specify Satterthwaite's method, because otherwise it will give you the Wald/Chi-squared approximation and that is only appropriate for binomial or poisson distributions. Satterthwaite's method is for normal/gaussian
capture.output(Anova(Acer_bw_model_2,  type = "II", test.statistic = "F"), file = "Acer_colorscore_percentchange_ANOVA.csv")
capture.output(Anova(Acer_colorscore_model_2,  type = "II", test.statistic = "F"), file = "Acer_colorscore_percentchange_ANOVA.csv")
#colony + treatment
colorscore_Acer_emms <- emmeans(Acer_colorscore_model_2, pairwise ~ Colony*Treatment)
pairs(colorscore_Acer_emms)
capture.output(pairs(colorscore_Acer_emms), file="Acer_percentchange_treatment_colony_emmeans.csv")
x = residuals(Pcli_colorscore_model)
plot(fitted(Pcli_colorscore_model), x)
leveneTest(x ~ Treatment*Colony, data=Pcli_colorscore, center=mean) # formal statistical test for homogenity of variance #not significant
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
shapiro.test(x) # formal statistical test  -- significant aka not normal
Anova(Pcli_colorscore_model,  type = "II", test.statistic = "F")
capture.output(Anova(Pcli_colorscore_model,  type = "II", test.statistic = "F"), file = "Pcli_colorscore_percentchange_ANOVA.csv")
#colony + treatment
colorscore_Pcli_emms <- emmeans(Pcli_colorscore_model, pairwise ~ Colony*Treatment)
pairs(colorscore_Pcli_emms)
capture.output(pairs(colorscore_Pcli_emms), file="Pcli_percentchange_treatment_colony_emmeans.csv")
