initialphotos <- read_xlsx("photo_metadata.xlsx")
april18 <- read_xlsx("photo_metadata.xlsx", sheet = "april 18")
june21 <- read_xlsx("photo_metadata.xlsx", sheet = "june 21")
july8 <- read_xlsx("photo_metadata.xlsx", sheet = "july 8")
coral_metadata <- readxl::read_xlsx("../metadata.xlsx")
coral_metadata %>%
select(Species:CBASS_tank) -> coral_metadata
View(coral_metadata)
str(initialphotos)
initialphotos %>%
select(`Photo ID`:`Coral Position`) -> initialphotos
str(april18)
april18 %>%
select(`Photo ID`:`Coral Position`) -> april18
str(june21)
june21%>%
select(`Photo ID`:`Coral Position`) -> june21
str(july8)
july8 %>%
select(`Photo ID`:`Coral Position`) -> july8
full_join(initialphotos, april18) %>%
full_join(., june21) %>%
full_join(., july8) -> allRscores
allRscores
#Tank column depends on time point, as the tank assignments changed throughout timeline. But, should be able to use the Puck ID + Species as the unique identifier
allRscores %>%
mutate(Species = case_when(Species == "Acer" ~ "Acropora cervicornis",
Species == "Pcli" ~ "Pseudodiploria clivosa")) -> allRscores
allRscores %>%
rename(ID = `Puck ID`) -> allRscores #835 rows
full_join(allRscores, coral_metadata, by = c("Species", "ID")) %>%
drop_na(`Photo ID`)  -> allmetadata #835 rows
full_join(allmetadata, Rscoredata, by = c("Date", "Photo ID", "Coral Position")) -> Rintensity_withmetadata
Rintensity_withmetadata %>%
select(!Genotype) -> Rintensity_withmetadata
Rintensity_withmetadata$month <- format(Rintensity_withmetadata$Date, "%m")
Rintensity_withmetadata$Date <- as.factor(Rintensity_withmetadata$Date)
Rintensity_withmetadata$month <- as.factor(Rintensity_withmetadata$month)
Rintensity_withmetadata %>%
group_by(ID, Species, Colony, Treatment, month) %>%
mutate(mean_Rintensity_percoral = mean(Mean)) -> Rintensity_withmetadata
Rintensity_withmetadata %>%
filter(is.na(Species)) #photo 4709 is a duplicate from photo 4711 so I already have these values in the spreadsheet
Rintensity_withmetadata %>%
drop_na(ID) -> Rintensity_withmetadata
Rintensity_withmetadata
allRscores
allmetadata
ggplot(Rintensity_withmetadata,aes(x = month, y= mean_Rintensity_percoral, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
facet_wrap(~Species, scales = "free") +
ylim(0, 255) +
labs(y = "R Intensity") +
theme(text = element_text(size = 13)) +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))
Rintensity_withmetadata %>%
ungroup() %>%
filter(month == "03" | month == "04") %>%
select(ID, Species, Colony, Treatment, Treatment_Tank, month, mean_Rintensity_percoral) %>%
distinct() %>%
pivot_wider(names_from = "month", values_from = "mean_Rintensity_percoral") %>%
mutate(percent_change = ((`03`-`04`)/`03`)*100) -> percentchange
percentchange
percentchange %>%
drop_na()
percentchange %>%
drop_na() -> percentchange #7 corals were not measured in the second time point
ggplot(percentchange,aes(x = Colony, y= percent_change, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
facet_wrap(~Species, scales = "free") +
labs(y = "Percent Change in R-Intensity") +
theme(text = element_text(size = 15)) +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))
percentchange %>%
dplyr::group_by(Species, Treatment) %>%
dplyr::mutate(mean_percent_change = mean(percent_change), se_percent_change = sd(percent_change)) %>%
ggplot(., aes(x = Species, y = mean_percent_change))+
theme_classic()+
geom_jitter(aes(y=percent_change, color = Treatment, fill = Treatment),
position=position_dodge(width=0.8),
alpha=0.2, pch = 21,
color = "black") +
geom_errorbar(aes(x = Species, ymax = mean_percent_change+se_percent_change, ymin = mean_percent_change-se_percent_change, color = Treatment), width = .2, position = position_dodge(width=0.8)) +
#scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
geom_point(mapping = aes(x = Species, fill = Treatment), size = 2, pch = 21, color = "black", position = position_dodge(width=0.8))+
#scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
xlab("Day")+
ylab("% Phagocytic Activity")+
#facet_wrap(~Species, scales = "free_x", dir = "v") +
theme(text = element_text(size = 15))
Rintensity_withmetadata %>%
ungroup() %>%
filter(month == "03" | month == "04") %>%
select(ID, Species, Colony, Treatment, Treatment_Tank, month, mean_Rintensity_percoral) %>%
distinct() %>%
pivot_wider(names_from = "month", values_from = "mean_Rintensity_percoral") %>%
mutate(percent_change = ((`04`-`03`)/`03`)*100) -> percentchange
percentchange %>%
drop_na() -> percentchange #7 corals were not measured in the second time point
ggplot(percentchange,aes(x = Colony, y= percent_change, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
facet_wrap(~Species, scales = "free") +
labs(y = "Percent Change in R-Intensity") +
theme(text = element_text(size = 15)) +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))
ggplot(percentchange,aes(x = Treatment, y= percent_change, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
facet_wrap(~Species, scales = "free") +
labs(y = "Percent Change in R-Intensity") +
theme(text = element_text(size = 15)) +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))
ggplot(percentchange,aes(x = Colony, y= percent_change, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
facet_wrap(~Species, scales = "free") +
labs(y = "Percent Change in R-Intensity") +
theme(text = element_text(size = 15)) +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))
p1<-ggplot(percentchange,aes(x = Treatment, y= percent_change, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
facet_wrap(~Species, scales = "free") +
labs(y = "Percent Change in R-Intensity") +
theme(text = element_text(size = 15)) +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(legend.position="none")
library(cowplot)
p2<- ggplot(percentchange,aes(x = Colony, y= percent_change, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
facet_wrap(~Species, scales = "free") +
labs(y = "Percent Change in R-Intensity") +
theme(text = element_text(size = 15)) +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))
plot_grid(p1, p2, ncol = 2, rel_widths = c(1,2))
ggsave("percentchangeRintensity_species_genets_treatmentperiod.pdf", width = 10, height = 5)
library(tidyverse)
library(plotrix)
library(ggpubr)
library(rstatix)
library(cowplot)
library(dunn.test)
library(Rmisc)
library(plyr)
library(dplyr)
percent_cells_df <- read_csv("Grace_percentcells_alldata.csv")
percent_cells_df%>%
mutate(Treatment = case_when(Treatment == "Control" ~ "Untreated",
Treatment == "Variable" ~ "Treated")) -> percent_cells_df
#there's one outlier to remove right off the bat: T1	Pcli	B	P9	r2	Percent=111.50	T1	Untreated
percent_cells_df %>%
filter(!(TimePoint=="T1" & Species == "Pcli" & Genotype == "B" & Treatment == "Untreated" & ID == "P9" & Replicate == "r2")) -> percent_cells_df
#replicates are technical replicates of the same coral fragment
#time points:
#T0 = initial pre-treatment (March 22)
#T1 = one week into treatment (March 30)
#T2 = end of treatment (April 20)
#follow-up = post CBASS and treatment follow-up (June 1)
percent_cells_df %>%
mutate(num_days = case_when(TimePoint == "T0" ~ "0",
TimePoint == "T1" ~ "7",
TimePoint == "T2" ~ "28",
TimePoint == "FollowUp" ~ "71")) %>%
mutate(num_days = as.factor(num_days)) %>%
mutate(num_days = fct_relevel(num_days, "0", "7", "28", "71")) -> percent_cells_df
plot1 <- percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
dplyr::filter(TimePoint == "T0" | TimePoint == "T2") %>%
dplyr::group_by(num_days, Species, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
dplyr::group_by(num_days, Species, Treatment) %>%
dplyr::mutate(avg_percent_per_genet = mean(mean_replicate_percent_perID), se_percent_per_genet = std.error(mean_replicate_percent_perID)) %>%
ungroup() %>%
ggplot(., aes(x = num_days, y = avg_percent_per_genet))+
theme_classic()+
geom_jitter(aes(y=mean_replicate_percent_perID, color = Treatment, fill = Treatment),
position=position_dodge(width=0.8),
alpha=0.2, pch = 21,
color = "black") +
geom_errorbar(aes(x = num_days, ymax = avg_percent_per_genet+se_percent_per_genet, ymin = avg_percent_per_genet-se_percent_per_genet, color = Treatment), width = .3, position = position_dodge(width=0.8)) +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
geom_point(mapping = aes(x = num_days, fill = Treatment), size = 2, pch = 21, color = "black", position = position_dodge(width=0.8))+
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
xlab("Day")+
ylab("% Phagocytic Activity")+
facet_wrap(~Species, scales = "free_x", dir = "v") +
theme(text = element_text(size = 15)) +
ylim(0, 20) +
theme(legend.position="none")
plot2 <- percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
dplyr::filter(TimePoint == "T0" | TimePoint == "T2") %>%
group_by(num_days, Species, Genotype, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
group_by(num_days, Species, Genotype, Treatment) %>%
dplyr::mutate(avg_percent_per_genet = mean(mean_replicate_percent_perID), se_percent_per_genet = std.error(mean_replicate_percent_perID)) %>%
ungroup() %>%
ggplot(., aes(x = num_days, y = avg_percent_per_genet))+
theme_classic()+
geom_jitter(aes(y=mean_replicate_percent_perID, color = Treatment, fill = Treatment),
position=position_dodge(width=0.8),
alpha=0.2, pch = 21,
color = "black") +
geom_errorbar(aes(x = num_days, ymax = avg_percent_per_genet+se_percent_per_genet, ymin = avg_percent_per_genet-se_percent_per_genet, color = Treatment), width = .3, position = position_dodge(width=0.8)) +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
geom_point(mapping = aes(x = num_days, ymax = avg_percent_per_genet+se_percent_per_genet, ymin = avg_percent_per_genet-se_percent_per_genet, fill = Treatment), size = 2, pch = 21, color = "black", position = position_dodge(width=0.8))+
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
xlab("Number of Days")+
ylab("% Phagocytic Activity")+
facet_wrap(~Species+Genotype, scales = "free_x") +
theme(text = element_text(size = 15)) +
ylim(0, 20)
plot_grid(plot1, plot2, ncol = 2, rel_widths = c(1,2))
ggsave("percentphagocyticactivity_species_genets.pdf", width = 10, height = 5)
Acer_model <- lm(mean_replicate_percent_perID ~ Treatment*Genotype*num_days + Tank, data = Acer_percent_cells)
#average all technical replicates together before running stats
percent_cells_df %>%
filter(Species == "Acer") %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, Genotype, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
filter(num_days == "0" | num_days == "28") -> Acer_percent_cells
str(Acer_percent_cells)
Acer_percent_cells %>%
dplyr::mutate_at(vars(Species, Genotype, Treatment, num_days), factor) -> Acer_percent_cells
Acer_model <- lm(mean_replicate_percent_perID ~ Treatment*Genotype*num_days + Tank, data = Acer_percent_cells)
Acer_model_metrics <- augment(Acer_model)
plot(Acer_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Acer_model_metrics$.resid) # significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Genotype*num_days, data = Acer_model_metrics) #not significant
# identifying outliers
Acer_model_metrics %>%
filter(abs(.std.resid) > 3)
# 0 outliers
#make interaction term
Acer_percent_cells$Treatment_Genotype_numdays <- interaction(Acer_model_metrics$Treatment, Acer_percent_cells$Genotype, Acer_percent_cells$num_days)
# kruskal wallis test
kruskal_test(mean_replicate_percent_perID ~ Treatment_Genotype_numdays, data = Acer_percent_cells)#significant
#posthoc test
as.data.frame(dunn.test(Acer_percent_cells$mean_replicate_percent_perID, Acer_percent_cells$Treatment_Genotype_numdays, method = "bonferroni"))
#theres too many corrections going on here because Dunn test is overly conservative. I think some of the day 0 vs day 28 within each genotype could be significant but this test doesn't show that. I can either try to transform the data or subset it and just do within genotype tests, which could hopefully be ANOVAs.
#what about GLMs?
#posthoc test
capture.output(as.data.frame(dunn.test(Acer_percent_cells$mean_replicate_percent_perID, Acer_percent_cells$Treatment_Genotype_numdays, method = "bonferroni")), file = "Acer_percent_cells_genet_posthoc.csv")
#posthoc test
as.data.frame(dunn.test(Acer_percent_cells$mean_replicate_percent_perID, Acer_percent_cells$Treatment_Genotype_numdays, method = "bonferroni")) %>%
write_csv("Acer_percent_cells_genet_posthoc.csv")
# kruskal wallis test
kruskal_test(mean_replicate_percent_perID ~ Treatment_Genotype_numdays, data = Acer_percent_cells)#significant
Pcli_model <- lm(mean_replicate_percent_perID ~ Treatment*Genotype*num_days + Tank, data = Pcli_percent_cells)
#average all technical replicates together before running stats
percent_cells_df %>%
filter(Species == "Pcli") %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, Genotype, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
filter(num_days == "0" | num_days == "28") -> Pcli_percent_cells
#average all technical replicates together before running stats
percent_cells_df %>%
filter(Species == "Pcli") %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, Genotype, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
filter(num_days == "0" | num_days == "28") -> Pcli_percent_cells
str(Pcli_percent_cells)
Pcli_percent_cells %>%
dplyr::mutate_at(vars(Species, Genotype, Treatment, num_days), factor) -> Pcli_percent_cells
Pcli_model <- lm(mean_replicate_percent_perID ~ Treatment*Genotype*num_days + Tank, data = Pcli_percent_cells)
Pcli_model_metrics <- augment(Pcli_model)
plot(Pcli_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Pcli_model_metrics$.resid) # significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Genotype*num_days, data = Pcli_model_metrics) #not significant
# identifying outliers
Pcli_model_metrics %>%
filter(abs(.std.resid) > 3)
#run two-way anova
aov(Percent ~ Treatment*Genotype*num_days, data = Pcli_percent_cells)
Pcli_percent_cells
#run two-way anova
aov(mean_replicate_percent_perID ~ Treatment*Genotype*num_days, data = Pcli_percent_cells)
#run two-way anova
summary(aov(mean_replicate_percent_perID ~ Treatment*Genotype*num_days, data = Pcli_percent_cells))
plot_grid(p1, p2, ncol = 2, rel_widths = c(1,2))
ggsave("percentchangeRintensity_species_genets_treatmentperiod.pdf", width = 12, height = 5)
plot_grid(p1, p2, ncol = 2, rel_widths = c(1.5,2))
ggsave("percentchangeRintensity_species_genets_treatmentperiod.pdf", width = 10, height = 5)
plot_grid(p1, p2, ncol = 2, rel_widths = c(1.5,2))
ggsave("percentchangeRintensity_species_genets_treatmentperiod.pdf", width = 12, height = 5)
percentchange
str(percentchange)
percentchange %>%
mutate_at(vars(Colony, Treatment, Species), factor) -> percentchange
percentchange
treat_model <- lm(percent_change ~ Treatment*Species + Colony + Treatment_Tank, data = percentchange)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #not significant
treat_model_metrics %>%
filter(abs(.std.resid) > 3)
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3) -> treat_outliers
#remove outliers
percentchange <- percentchange[!rownames(percentchange) %in% treat_outliers$.rownames,]
percentchange
treat_model_metrics %>%
filter(abs(.std.resid) > 3)
percentchange %>%
arrange(desc(percent_change))
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3)
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3)
percentchange %>%
arrange(desc(percent_change))
#remove outliers
percentchange  %>%
filter(percent_change < 180)
#remove outliers
percentchange  %>%
filter(percent_change < 180) -> percentchange
#rerun
treat_model <- lm(percent_change ~ Treatment*Species + Colony + Treatment_Tank, data = percentchange)
treat_model_metrics <- augment(treat_model)
shapiro_test(treat_model_metrics$.resid)
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics)
plot(treat_model)
#make interaction term
percentchange$Treatment_Species <- interaction(percentchange$Treatment, percentchange$Species)
kruskal_test(percent_change ~ Treatment_Species, data = percentchange)#significant
#posthoc test
as.data.frame(dunn.test(percentchange$percent_change, percentchange$Treatment_Species, method = "bonferroni"))
#posthoc test
as.data.frame(dunn.test(percentchange$percent_change, percentchange$Treatment_Species, method = "bonferroni")) %>%
write_csv("changeinRintensity_posthoc_species.csv")
as.data.frame(dunn.test(percentchange$percent_change, percentchange$Treatment_Species, method = "bonferroni"))
percentchange %>%
filter(Species == "Acropora cervicornis") -> Acer_R_percentchange
Acer_Rtreat_model <- lm(percent_change ~ Treatment*Colony + Treatment_Tank, data = Acer_R_percentchange)
Acer_Rtreat_model_metrics <- augment(Acer_Rtreat_model)
plot(Acer_Rtreat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Acer_Rtreat_model_metrics$.resid) #significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Colony, data = Acer_Rtreat_model_metrics) #significant
# identifying outliers
Acer_Rtreat_model_metrics %>%
filter(abs(.std.resid) > 3)
#make interaction term
Acer_R_percentchange$Treatment_Colony <- interaction(Acer_R_percentchange$Treatment, Acer_R_percentchange$Colony)
kruskal_test(percent_change ~ Treatment_Colony, data = Acer_R_percentchange)#significant
#posthoc test
as.data.frame(dunn.test(Acer_R_percentchange$percent_change, Acer_R_percentchange$Treatment_Colony, method = "bonferroni"))
percentchange %>%
filter(Species == "Pseudodiploria clivosa") -> Pcli_R_percentchange
Pcli_Rtreat_model <- lm(percent_change ~ Treatment*Colony + Treatment_Tank, data = Pcli_R_percentchange)
Pcli_Rtreat_model_metrics <- augment(Pcli_Rtreat_model)
plot(Pcli_Rtreat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Pcli_Rtreat_model_metrics$.resid) #significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Colony, data = Pcli_Rtreat_model_metrics) #significant
# identifying outliers
Pcli_Rtreat_model_metrics %>%
filter(abs(.std.resid) > 3) #0 outliers
# two-way anova
summary(aov(percent_change ~ Treatment*Colony, data = Pcli_Rtreat_model_metrics))
TukeyHSD(aov(percent_change ~ Treatment*Colony, data = Pcli_Rtreat_model_metrics))
Rintensity_withmetadata %>%
ungroup()
Rintensity_withmetadata
allmetadata
Rintensity_withmetadata %>%
ungroup() %>%
filter(month == "06" | month == "07")
Rintensity_withmetadata %>%
ungroup() %>%
filter(month == "06" | month == "07") %>%
select(ID, Species, Colony, Treatment, Treatment_Tank, month, mean_Rintensity_percoral) %>%
distinct() %>%
pivot_wider(names_from = "month", values_from = "mean_Rintensity_percoral") %>%
mutate(percent_change = ((`07`-`06`)/`06`)*100) -> slowburn_Rintensity
slowburn_Rintensity %>%
drop_na()
slowburn_Rintensity
percentchange
slowburn_Rintensity
slowburn_Rintensity
slowburn_Rintensity %>%
drop_na() -> slowburn_Rintensity #~60 corals were not measured in the second time point
ggplot(slowburn_Rintensity,aes(x = Treatment, y= percent_change, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
facet_wrap(~Species, scales = "free") +
labs(y = "Percent Change in R-Intensity") +
theme(text = element_text(size = 15)) +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(legend.position="none")
ggplot(slowburn_Rintensity,aes(x = Colony, y= percent_change, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
facet_wrap(~Species, scales = "free") +
labs(y = "Percent Change in R-Intensity") +
theme(text = element_text(size = 15)) +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(legend.position="none")
percentchange %>%
dplyr::group_by(Species, Treatment) %>%
dplyr::mutate(mean_percent_change = mean(percent_change), se_percent_change = sd(percent_change)) %>%
ggplot(., aes(x = Species, y = mean_percent_change))+
theme_classic()+
geom_jitter(aes(y=percent_change, color = Treatment, fill = Treatment),
position=position_dodge(width=0.8),
alpha=0.2, pch = 21,
color = "black") +
geom_errorbar(aes(x = Species, ymax = mean_percent_change+se_percent_change, ymin = mean_percent_change-se_percent_change, color = Treatment), width = .2, position = position_dodge(width=0.8)) +
#scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
geom_point(mapping = aes(x = Species, fill = Treatment), size = 2, pch = 21, color = "black", position = position_dodge(width=0.8))+
#scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
xlab("Day")+
#facet_wrap(~Species, scales = "free_x", dir = "v") +
theme(text = element_text(size = 15))
ggplot(slowburn_Rintensity,aes(x = Colony, y= percent_change, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
facet_wrap(~Species, scales = "free") +
labs(y = "Percent Change in R-Intensity") +
theme(text = element_text(size = 15)) +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))
str(slowburn_Rintensity) #275 rows
slowburn_Rintensity %>%
mutate_at(vars(Colony, Treatment, Species), factor) -> slowburn_Rintensity
slowburn_Rintensity
treat_model <- lm(percent_change ~ Treatment*Species + Colony + Treatment_Tank, data = slowburn_Rintensity)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) #significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #significant
summary(aov(percent_change ~ Treatment*Species, data = slowburn_Rintensity)) #significant
p1<- ggplot(slowburn_Rintensity,aes(x = Treatment, y= percent_change, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
facet_wrap(~Species, scales = "free") +
labs(y = "Percent Change in R-Intensity") +
theme(text = element_text(size = 15)) +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(legend.position="none")
p2<-ggplot(slowburn_Rintensity,aes(x = Colony, y= percent_change, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
facet_wrap(~Species, scales = "free") +
labs(y = "Percent Change in R-Intensity") +
theme(text = element_text(size = 15)) +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))
plot_grid(p1, p2, ncol = 2, rel_widths = c(1.5,2))
ggsave("percentchangeRintensity_species_genets_slowburn.pdf", width = 12, height = 5)
TukeyHSD(aov(percent_change ~ Treatment*Species, data = slowburn_Rintensity))
slowburn_Rintensity %>%
filter(Species == "Acropora cervicornis") -> Acer_slowburn_Rintensity
Acer_R_model <- lm(percent_change ~ Treatment*Colony + Treatment_Tank, data = Acer_slowburn_Rintensity)
Acer_R_model_model_metrics <- augment(Acer_R_model)
plot(Acer_R_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Acer_R_model_model_metrics$.resid) #significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Colony, data = Acer_R_model_model_metrics) #significant
# identifying outliers
Acer_R_model_model_metrics %>%
filter(abs(.std.resid) > 3) #0 outliers
summary(aov(percent_change ~ Treatment*Colony, data = Acer_slowburn_Rintensity)) #significant for species
TukeyHSD(aov(percent_change ~ Treatment*Colony, data = Acer_slowburn_Rintensity))
slowburn_Rintensity %>%
filter(Species == "Pseudodiploria clivosa") -> Pcli_slowburn_Rintensity
# two-way anova
summary(aov(percent_change ~ Treatment*Colony, data = Pcli_R_percentchange)) #significant
TukeyHSD(aov(percent_change ~ Treatment*Colony, data = Pcli_R_percentchange))
Pcli_R_model <- lm(percent_change ~ Treatment*Colony + Treatment_Tank, data = Pcli_slowburn_Rintensity)
Pcli_R_model_metrics <- augment(Pcli_R_model)
plot(Pcli_R_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Pcli_R_model_metrics$.resid) #not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Colony, data = Pcli_R_model_metrics) #not significant
# two-way anova
summary(aov(percent_change ~ Treatment*Colony, data = Pcli_slowburn_Rintensity)) #significant
TukeyHSD(aov(percent_change ~ Treatment*Colony, data = Pcli_slowburn_Rintensity))
