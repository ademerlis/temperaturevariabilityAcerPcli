geom_mark_hull(aes(fill=Treatment), expand = 0.1, alpha = 0.2) +
scale_fill_manual(values = c("grey", "#00CCCC", "#FF3333")) +
scale_color_manual(values = c("grey", "#00CCCC", "#FF3333")) +
theme_classic() +
xlab(paste0("PC1: ",percentVar_PC1_rounded[1],"% variance")) +
ylab(paste0("PC2: ",percentVar_PC2_rounded[1],"% variance")) +
ggtitle("Acervicornis")
# Create the PCA plot
ggplot(pca_data, aes(x = PC1, y = PC2, color = Treatment)) +
geom_point() +
geom_ellipse()
# Create the PCA plot
ggplot(pca_data, aes(x = PC1, y = PC2, color = Treatment)) +
geom_point() +
geom_ellipse() +
scale_fill_manual(values = c("grey", "#00CCCC", "#FF3333")) +
scale_color_manual(values = c("grey", "#00CCCC", "#FF3333")) +
theme_classic() +
xlab(paste0("PC1: ",percentVar_PC1_rounded[1],"% variance")) +
ylab(paste0("PC2: ",percentVar_PC2_rounded[1],"% variance")) +
ggtitle("Acervicornis")
# Create the PCA plot
ggplot(pca_data, aes(x = PC1, y = PC2, color = Treatment)) +
geom_point() +
stat_ellipse(aes(PC1, PC2, group=Treatment, lty = Treatment), type = "norm") +
scale_fill_manual(values = c("grey", "#00CCCC", "#FF3333")) +
scale_color_manual(values = c("grey", "#00CCCC", "#FF3333")) +
theme_classic() +
xlab(paste0("PC1: ",percentVar_PC1_rounded[1],"% variance")) +
ylab(paste0("PC2: ",percentVar_PC2_rounded[1],"% variance")) +
ggtitle("Acervicornis")
# Create the PCA plot
ggplot(pca_data, aes(x = PC1, y = PC2, color = Treatment)) +
geom_point() +
scale_fill_manual(values = c("grey", "#00CCCC", "#FF3333")) +
scale_color_manual(values = c("grey", "#00CCCC", "#FF3333")) +
theme_classic() +
xlab(paste0("PC1: ",percentVar_PC1_rounded[1],"% variance")) +
ylab(paste0("PC2: ",percentVar_PC2_rounded[1],"% variance")) +
ggtitle("Acervicornis")
# Create the PCA plot
ggplot(pca_data, aes(x = PC1, y = PC2, color = Treatment)) +
geom_point() +
geom_polygon(data = centroids, alpha = 0.2) +
scale_fill_manual(values = c("grey", "#00CCCC", "#FF3333")) +
scale_color_manual(values = c("grey", "#00CCCC", "#FF3333")) +
theme_classic() +
xlab(paste0("PC1: ",percentVar_PC1_rounded[1],"% variance")) +
ylab(paste0("PC2: ",percentVar_PC2_rounded[1],"% variance")) +
ggtitle("Acervicornis")
centroids
# Calculate group centroids for polygons
centroids <- pca_data %>%
group_by(Treatment) %>%
summarise(PC1 = mean(PC1), PC1 = mean(PC2))
# Create the PCA plot
ggplot(pca_data, aes(x = PC1, y = PC2, color = Treatment)) +
geom_point() +
geom_polygon(data = centroids, alpha = 0.2) +
scale_fill_manual(values = c("grey", "#00CCCC", "#FF3333")) +
scale_color_manual(values = c("grey", "#00CCCC", "#FF3333")) +
theme_classic() +
xlab(paste0("PC1: ",percentVar_PC1_rounded[1],"% variance")) +
ylab(paste0("PC2: ",percentVar_PC2_rounded[1],"% variance")) +
ggtitle("Acervicornis")
# Calculate group centroids for polygons
centroids <- pca_data %>%
group_by(Treatment) %>%
summarise(PC1_centroid = mean(PC1), PC2_centroid = mean(PC2))
centroids
# Calculate group centroids for polygons
centroids <- pca_data %>%
group_by(Treatment) %>%
dplyr::summarise(PC1_centroid = mean(PC1), PC2_centroid = mean(PC2))
centroids
# Create the PCA plot
ggplot(pca_data, aes(x = PC1, y = PC2, color = Treatment)) +
geom_point() +
geom_polygon(data = centroids, alpha = 0.2, aes(color=Treatment, fill=Treatment)) +
scale_fill_manual(values = c("grey", "#00CCCC", "#FF3333")) +
scale_color_manual(values = c("grey", "#00CCCC", "#FF3333")) +
theme_classic() +
xlab(paste0("PC1: ",percentVar_PC1_rounded[1],"% variance")) +
ylab(paste0("PC2: ",percentVar_PC2_rounded[1],"% variance")) +
ggtitle("Acervicornis")
pca_data
centroids
# Calculate group centroids for polygons
centroids <- pca_data %>%
group_by(Treatment) %>%
dplyr::summarise(PC1 = mean(PC1), PC2 = mean(PC2))
# Create the PCA plot
ggplot(pca_data, aes(x = PC1, y = PC2, color = Treatment)) +
geom_point() +
geom_polygon(data = centroids, alpha = 0.2, aes(color=Treatment, fill=Treatment)) +
scale_fill_manual(values = c("grey", "#00CCCC", "#FF3333")) +
scale_color_manual(values = c("grey", "#00CCCC", "#FF3333")) +
theme_classic() +
xlab(paste0("PC1: ",percentVar_PC1_rounded[1],"% variance")) +
ylab(paste0("PC2: ",percentVar_PC2_rounded[1],"% variance")) +
ggtitle("Acervicornis")
# Create the PCA plot
ggplot(pca_data, aes(x = PC1, y = PC2, color = Treatment)) +
geom_point() +
geom_polygon(data = centroids, alpha = 0.2, aes(color=Treatment, fill=Treatment)) +
scale_fill_manual(values = c("grey", "#00CCCC", "#FF3333")) +
scale_color_manual(values = c("grey", "#00CCCC", "#FF3333")) +
xlab(paste0("PC1: ",percentVar_PC1_rounded[1],"% variance")) +
ylab(paste0("PC2: ",percentVar_PC2_rounded[1],"% variance")) +
ggtitle("Acervicornis")
# Create the PCA plot
ggplot(pca_data, aes(x = PC1, y = PC2, color = Treatment)) +
geom_point() +
geom_polygon(data = centroids) +
scale_fill_manual(values = c("grey", "#00CCCC", "#FF3333")) +
scale_color_manual(values = c("grey", "#00CCCC", "#FF3333")) +
xlab(paste0("PC1: ",percentVar_PC1_rounded[1],"% variance")) +
ylab(paste0("PC2: ",percentVar_PC2_rounded[1],"% variance")) +
ggtitle("Acervicornis")
# Calculate group centroids for polygons
centroids <- pca_data %>%
group_by(Treatment) %>%
dplyr::summarise(PC1.mean = mean(PC1), PC2.mean = mean(PC2))
# Create the PCA plot
ggplot(pca_data, aes(x = PC1, y = PC2, color = Treatment)) +
geom_point() +
geom_polygon(data = centroids, alpha = 0.2, aes(color=Treatment, fill=Treatment)) +
geom_point(aes(x=PC1.mean, y=PC2.mean,color=Treatment), data=centroids, size=4, show.legend=FALSE) +
scale_fill_manual(values = c("grey", "#00CCCC", "#FF3333")) +
scale_color_manual(values = c("grey", "#00CCCC", "#FF3333")) +
xlab(paste0("PC1: ",percentVar_PC1_rounded[1],"% variance")) +
ylab(paste0("PC2: ",percentVar_PC2_rounded[1],"% variance")) +
ggtitle("Acervicornis")
#setting up data to add polygons
find_hull <- function(pca_data) pca_data[chull(pca_data$PC1, pca_data$PC2), ]
hulls <- ddply(pca_data, "Treatment", find_hull)
hulls
# Create the PCA plot
ggplot(pca_data, aes(x = PC1, y = PC2, color = Treatment)) +
geom_point() +
geom_polygon(data = hulls, alpha = 0.2, aes(color=Treatment, fill=Treatment)) +
geom_point(aes(x=PC1.mean, y=PC2.mean,color=Treatment), data=centroids, size=4, show.legend=FALSE) +
scale_fill_manual(values = c("grey", "#00CCCC", "#FF3333")) +
scale_color_manual(values = c("grey", "#00CCCC", "#FF3333")) +
xlab(paste0("PC1: ",percentVar_PC1_rounded[1],"% variance")) +
ylab(paste0("PC2: ",percentVar_PC2_rounded[1],"% variance")) +
ggtitle("Acervicornis")
# Create the PCA plot
ggplot(pca_data, aes(x = PC1, y = PC2, color = Treatment)) +
geom_point() +
geom_polygon(data = hulls, alpha = 0.2, aes(color=Treatment, fill=Treatment)) +
geom_point(aes(x=PC1.mean, y=PC2.mean,color=Treatment), data=centroids, show.legend=FALSE) +
scale_fill_manual(values = c("grey", "#00CCCC", "#FF3333")) +
scale_color_manual(values = c("grey", "#00CCCC", "#FF3333")) +
xlab(paste0("PC1: ",percentVar_PC1_rounded[1],"% variance")) +
ylab(paste0("PC2: ",percentVar_PC2_rounded[1],"% variance")) +
ggtitle("Acervicornis")
# Create the PCA plot
ggplot(pca_data, aes(x = PC1, y = PC2, color = Treatment)) +
geom_point() +
geom_polygon(data = hulls, alpha = 0.2, aes(color=Treatment, fill=Treatment)) +
geom_point(aes(x=PC1.mean, y=PC2.mean,color=Treatment), data=centroids, show.legend=FALSE) +
scale_fill_manual(values = c("grey", "#00CCCC", "#FF3333")) +
scale_color_manual(values = c("grey", "#00CCCC", "#FF3333")) +
xlab(paste0("PC1: ",percentVar_PC1_rounded[1],"% variance")) +
ylab(paste0("PC2: ",percentVar_PC2_rounded[1],"% variance")) +
ggtitle("Acervicornis") +
theme_classic()
ggplot(pca_data, aes(x = PC1, y = PC2, color = Treatment)) +
geom_point() +
stat_ellipse(aes(PC1, PC2, group=Treatment, lty = Treatment), type = "norm") +
scale_fill_manual(values = c("grey", "#00CCCC", "#FF3333")) +
scale_color_manual(values = c("grey", "#00CCCC", "#FF3333")) +
xlab(paste0("PC1: ",percentVar_PC1_rounded[1],"% variance")) +
ylab(paste0("PC2: ",percentVar_PC2_rounded[1],"% variance")) +
ggtitle("Acervicornis") +
theme_classic()
ggplot(pca_data, aes(x = PC1, y = PC2, color = Treatment)) +
geom_point() +
stat_ellipse(aes(PC1, PC2, group=Treatment, lty = Treatment), type = "norm") +
scale_fill_manual(values = c("grey", "#00CCCC", "#FF3333")) +
scale_color_manual(values = c("grey", "#00CCCC", "#FF3333")) +
xlab(paste0("PC1: ",percentVar_PC1_rounded[1],"% variance")) +
ylab(paste0("PC2: ",percentVar_PC2_rounded[1],"% variance")) +
ggtitle("Acervicornis") +
theme_classic()
ggsave("PCA_Acer_removebatcheffect_withellipses.pdf", width = 10, height = 7)
ggplot(pca_data, aes(x = PC1, y = PC2, label=NA, color = Treatment)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar_PC1_rounded[1],"% variance")) +
ylab(paste0("PC2: ",percentVar_PC2_rounded[1],"% variance")) +
ggtitle("Acervicornis") +
theme_classic() +
scale_color_manual(values = c("grey", "#00CCCC", "#FF3333"))
ggsave("PCA_Acer_removebatcheffect.pdf",  width = 10, height = 7)
plotPCA(Vsd, intgroup = c("Treatment"))
plotPCA(Vsd, intgroup = c("Genotype"))
plotPCA(Vsd, intgroup = c("Treatment", "Genotype"))
vst_PCAdata <- plotPCA(Vsd, intgroup = c("Treatment", "Genotype"), returnData = TRUE)
percentVar <- round(100*attr(vst_PCAdata, "percentVar"))
g1 <- ggplot(vst_PCAdata, aes(PC1, PC2, color=Treatment, shape=Genotype)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("A.cervicornis") +
theme_classic() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) +
scale_color_manual(values = c("grey", "#FF3333", "#00CCCC"))
#ggsave("PCA_allgenets.pdf")
g1
# Basic PCA plot
g2<- ggplot(pca_data, aes(x = PC1, y = PC2, label=NA, color = Treatment)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar_PC1_rounded[1],"% variance")) +
ylab(paste0("PC2: ",percentVar_PC2_rounded[1],"% variance")) +
ggtitle("Acervicornis") +
theme_classic() +
scale_color_manual(values = c("grey", "#00CCCC", "#FF3333"))
combined_plot <- plot_grid(g1, g2 nrow = 2, ncol = 2)
combined_plot <- plot_grid(g1, g2)
print(combined_plot)
ggsave("combined_PCA_plot_batcheffect.pdf", combined_plot, width = 10, height = 7)
library(DESeq2)
library(tidyverse)
library(factoextra)
library(cowplot)
library(limma)
library(ggforce)
load("RData_files/initial_fullddsdesigncountsVsdcountsWGCNA.RData")
View(countData)
plotPCA(Vsd, intgroup = c("Treatment"))
plotPCA(Vsd, intgroup = c("Genotype"))
plotPCA(Vsd, intgroup = c("Treatment", "Genotype"))
vst_PCAdata <- plotPCA(Vsd, intgroup = c("Treatment", "Genotype"), returnData = TRUE)
percentVar <- round(100*attr(vst_PCAdata, "percentVar"))
g1 <- ggplot(vst_PCAdata, aes(PC1, PC2, color=Treatment, shape=Genotype)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("P. clivosa") +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) +
scale_color_manual(values = c("grey", "#00CCCC", "#FF3333"))
#ggsave("PCA_allgenets.pdf")
g1
g1 <- ggplot(vst_PCAdata, aes(PC1, PC2, color=Treatment, shape=Genotype)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("P. clivosa") +
theme_classic() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) +
scale_color_manual(values = c("grey", "#00CCCC", "#FF3333"))
g1
vsd2 <- removeBatchEffect(assay(Vsd), batch = Vsd$Genotype)
pca_result <- prcomp(t(vsd2))  # Transpose matrix because prcomp expects observations in rows
pca_summary<-summary(pca_result)
percentVar_PC1 <- pca_summary$importance[2, "PC1"] * 100  # Proportion of variance for PC1
percentVar_PC2 <- pca_summary$importance[2, "PC2"] * 100  # Proportion of variance for PC2
# Round the percentages for better readability
percentVar_PC1_rounded <- round(percentVar_PC1)
percentVar_PC2_rounded <- round(percentVar_PC2)
# Create a data frame for ggplot
pca_data <- data.frame(PC1 = pca_result$x[,1], PC2 = pca_result$x[,2], Sample = rownames(pca_result$x))
design %>%
rownames_to_column("Sample") %>%
full_join(pca_data, design, by = "Sample") -> pca_data
pca_data
View(design)
ggplot(pca_data, aes(x = PC1, y = PC2, label=NA, color = Treatment)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar_PC1_rounded[1],"% variance")) +
ylab(paste0("PC2: ",percentVar_PC2_rounded[1],"% variance")) +
ggtitle("Acervicornis") +
theme_classic() +
scale_color_manual(values = c("grey", "#00CCCC", "#FF3333"))
# Basic PCA plot
ggplot(pca_data, aes(x = PC1, y = PC2, label=NA, color = Treatment)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar_PC1_rounded[1],"% variance")) +
ylab(paste0("PC2: ",percentVar_PC2_rounded[1],"% variance")) +
ggtitle("Pclivosa") +
theme_classic() +
scale_color_manual(values = c("grey", "#00CCCC", "#FF3333"))
ggsave("PCA_Pclivosa_removebatcheffect.pdf",  width = 10, height = 7)
# Basic PCA plot
g2<-ggplot(pca_data, aes(x = PC1, y = PC2, label=NA, color = Treatment)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar_PC1_rounded[1],"% variance")) +
ylab(paste0("PC2: ",percentVar_PC2_rounded[1],"% variance")) +
ggtitle("Pclivosa") +
theme_classic() +
scale_color_manual(values = c("grey", "#00CCCC", "#FF3333"))
#setting up data to add polygons
find_hull <- function(pca_data) pca_data[chull(pca_data$PC1, pca_data$PC2), ]
hulls <- ddply(pca_data, "Treatment", find_hull)
# Calculate group centroids for polygons
centroids <- pca_data %>%
group_by(Treatment) %>%
dplyr::summarise(PC1.mean = mean(PC1), PC2.mean = mean(PC2))
# Create the PCA plot
ggplot(pca_data, aes(x = PC1, y = PC2, color = Treatment)) +
geom_point() +
geom_polygon(data = hulls, alpha = 0.2, aes(color=Treatment, fill=Treatment)) +
geom_point(aes(x=PC1.mean, y=PC2.mean,color=Treatment), data=centroids, show.legend=FALSE) +
scale_fill_manual(values = c("grey", "#00CCCC", "#FF3333")) +
scale_color_manual(values = c("grey", "#00CCCC", "#FF3333")) +
xlab(paste0("PC1: ",percentVar_PC1_rounded[1],"% variance")) +
ylab(paste0("PC2: ",percentVar_PC2_rounded[1],"% variance")) +
ggtitle("Pclivosa") +
theme_classic()
ggplot(pca_data, aes(x = PC1, y = PC2, color = Treatment)) +
geom_point() +
stat_ellipse(aes(PC1, PC2, group=Treatment, lty = Treatment), type = "norm") +
scale_fill_manual(values = c("grey", "#00CCCC", "#FF3333")) +
scale_color_manual(values = c("grey", "#00CCCC", "#FF3333")) +
xlab(paste0("PC1: ",percentVar_PC1_rounded[1],"% variance")) +
ylab(paste0("PC2: ",percentVar_PC2_rounded[1],"% variance")) +
ggtitle("Pclivosa") +
theme_classic()
ggsave("PCA_Pclivosa_removebatcheffect_withellipses.pdf", width = 10, height = 7)
combined_plot <- plot_grid(g1, g2)
print(combined_plot)
ggsave("combined_PCA_plot_batcheffect.pdf", combined_plot, width = 10, height = 7)
library(tidyverse)
library(readxl)
library(rstatix)
library(plotrix)
library(ggpubr)
library(cowplot)
library(dunn.test)
coral_metadata <- readxl::read_xlsx("../metadata.xlsx")
fvfm <- read.csv("../3_photosynthetic_efficiency/ipam_tidy_data.csv")
Rscoredata <- read_xlsx("../4_R_intensity//data_rscores.xlsx")
april18 <- read_xlsx("../4_R_intensity/photo_metadata.xlsx", sheet = "april 18")
june21 <- read_xlsx("../4_R_intensity/photo_metadata.xlsx", sheet = "june 21")
percent_cells_df <- read_csv("../5_immune_cell_assay/Grace_percentcells_alldata.csv")
treatment_metadata<-fvfm %>%
select(Puck, Treatment) %>%
distinct() %>%
drop_na() #282 corals
fvfm %>%
drop_na(Colony) %>% #this is because there are some corals that never matched up to IPAM values so they're just NA
select(fvfm, Puck, Colony, Date, Species) %>%
filter(Date == "4/20/22" | Date == "4/22/22" | Date == "5/25/22") %>%
full_join(., treatment_metadata, by = "Puck") %>%
pivot_wider(names_from = Date, values_from = fvfm) %>%
select(!"NA") %>%
drop_na() %>%
mutate(change=(`5/25/22`-`4/22/22`)/`4/22/22`*100) -> fvfm_recovery_change
fvfm_recovery_change %>%
arrange(change) #there is one outlier
fvfm_recovery_change %>%
filter(change > -39) -> fvfm_recovery_change
fvfm_recovery_change %>%
select(Puck:Treatment, change) %>%
mutate_at(vars(Colony, Puck, Treatment, Species), factor) -> fvfm_recovery_stats
fvfm_recovery_stats
recovery_model_1 <- lm(change ~ Treatment*Species + Colony, data = fvfm_recovery_stats)
recovery_model_metrics_1 <- augment(recovery_model_1)
plot(recovery_model_1)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(recovery_model_metrics_1$.resid) # significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = recovery_model_metrics_1) #not significant
# identifying outliers
recovery_model_metrics_1 %>%
filter(abs(.std.resid) > 3)
# 1 outlier
fvfm_recovery_stats %>%
filter(change < 39) -> fvfm_recovery_stats
recovery_model_1 <- lm(change ~ Treatment*Species + Colony, data = fvfm_recovery_stats)
recovery_model_metrics_1 <- augment(recovery_model_1)
plot(recovery_model_1)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(recovery_model_metrics_1$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = recovery_model_metrics_1) #not significant
aov(change ~ Treatment*Species, data = fvfm_recovery_stats)
summary(aov(change ~ Treatment*Species, data = fvfm_recovery_stats))
summary(aov(change ~ Treatment*Species, data = fvfm_recovery_stats))
TukeyHSD(aov(change ~ Treatment*Species, data = fvfm_recovery_stats))
TukeyHSD(aov(change ~ Treatment*Species, data = fvfm_recovery_stats)) %>%
write_csv("fvfm_recovery_tukey.csv")
TukeyHSD(aov(change ~ Treatment*Species, data = fvfm_recovery_stats)) %>%
as.data.frame( )
TukeyHSD(aov(change ~ Treatment*Species, data = fvfm_recovery_stats)) %>%
as.data.frame()
TukeyHSD(aov(change ~ Treatment*Species, data = fvfm_recovery_stats))
fvfm_recovery_stats
percent_cells_df%>%
mutate(Treatment = case_when(Treatment == "Control" ~ "Untreated",
Treatment == "Variable" ~ "Treated")) -> percent_cells_df
#there's one outlier to remove right off the bat: T1	Pcli	B	P9	r2	Percent=111.50	T1	Untreated
percent_cells_df %>%
filter(!(TimePoint=="T1" & Species == "Pcli" & Genotype == "B" & Treatment == "Untreated" & ID == "P9" & Replicate == "r2")) -> percent_cells_df
#replicates are technical replicates of the same coral fragment
#time points:
#T0 = initial pre-treatment (March 22)
#T1 = one week into treatment (March 30)
#T2 = end of treatment (April 20)
#follow-up = post CBASS and treatment follow-up (June 1)
percent_cells_df %>%
filter(TimePoint == "T2" | TimePoint == "FollowUp") %>%
mutate(num_days = case_when(TimePoint == "T2" ~ "0",
TimePoint == "FollowUp" ~ "43")) %>%
mutate(num_days = as.factor(num_days)) %>%
mutate(num_days = fct_relevel(num_days, "0", "43")) -> percent_cells_df
percent_cells_df
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
dplyr::filter(TimePoint == "T2" | TimePoint == "FollowUp") %>%
mutate(num_days = as.factor(num_days)) %>%
group_by(num_days, Species, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
dplyr::select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() -> percent_cells_speciestreatments
percent_cells_speciestreatments %>%
dplyr::mutate_at(vars(Species, Treatment, num_days), factor) -> percent_cells_speciestreatments
treat_model <- lm(mean_replicate_percent_perID ~ Treatment*Species*num_days + Genotype + Tank, data = percent_cells_speciestreatments)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species*num_days, data = treat_model_metrics) #significant
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3)
# 1 outlier
percent_cells_speciestreatments %>%
filter(mean_replicate_percent_perID < 26) -> percent_cells_speciestreatments
treat_model <- lm(mean_replicate_percent_perID ~ Treatment*Species*num_days + Genotype + Tank, data = percent_cells_speciestreatments)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species*num_days, data = treat_model_metrics) #significant
#make interaction term
percent_cells_speciestreatments$Treatment_Species_numdays <- interaction(percent_cells_speciestreatments$Treatment, percent_cells_speciestreatments$Species, percent_cells_speciestreatments$num_days)
# kruskal wallis test
kruskal_test(mean_replicate_percent_perID ~ Treatment_Species_numdays, data = percent_cells_speciestreatments)#significant
#posthoc test
dunn.test(percent_cells_speciestreatments$mean_replicate_percent_perID, percent_cells_speciestreatments$Treatment_Species_numdays, method = "bonferroni")
as.data.frame(dunn.test(percent_cells_speciestreatments$mean_replicate_percent_perID, percent_cells_speciestreatments$Treatment_Species_numdays, method = "bonferroni")) %>% write_csv("species_recovery_immunecells_posthoc.csv")
percent_cells_speciestreatments
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
dplyr::select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
filter(num_days == "0" | num_days == "43") -> percent_cells_speciestreatments
str(percent_cells_speciestreatments)
percent_cells_speciestreatments %>%
dplyr::mutate_at(vars(Species, Treatment, num_days), factor) -> percent_cells_speciestreatments
percent_cells_speciestreatments %>%
filter(num_days == "0" & Treatment == "Untreated") %>%
group_by(Species, Genotype) %>%
dplyr::summarise(mean_untreated_day0_genet = mean(mean_replicate_percent_perID)) -> untreated_day0_immunecells
percent_cells_speciestreatments %>%
filter(num_days == "43") %>%
right_join(., untreated_day0_immunecells, by = c("Species", "Genotype")) %>%
mutate(relative_activity = ((mean_replicate_percent_perID-mean_untreated_day0_genet)/mean_untreated_day0_genet)*100) -> relative_activity_df
#save data frame for WGCNA
#write_csv(relative_activity_df, "relative_immune_activity.csv")
relative_activity_df
treat_model <- lm(relative_activity ~ Treatment*Species + Genotype + Tank, data = relative_activity_df)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #not significant
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3)
# 0 outliers
summary(aov(relative_activity ~ Treatment*Species, data = relative_activity_df)) #not significant
TukeyHSD(aov(relative_activity ~ Treatment*Species, data = relative_activity_df)) #no significant pairwise
survivorship %>%
filter(Species == "Pseudodiploria clivosa") -> survivorship_Pcli
library(tidyverse)
library(janitor)
library(rstatix)
library(cowplot)
library(plotrix)
library(survival)
library(ggpubr)
library(survminer)
library(coxme)
library(ggsurvfit)
library(gtsummary)
metadata <- readxl::read_xlsx("../metadata.xlsx", sheet = "tidy_data")
str(metadata) #295 corals
survivorship <- readxl::read_xlsx("../metadata.xlsx", sheet ="kaplanmeiercurve")
```{r}
survivorship %>%
filter(Species == "Pseudodiploria clivosa") -> survivorship_Pcli
surv_Pcli <- Surv(time = survivorship_Pcli$daysToDeath, event = survivorship_Pcli$status)
coxph(surv_Pcli ~ Treatment, data = survivorship_Pcli)
summary(coxph(surv_Pcli ~ Treatment, data = survivorship_Pcli))
