#repeated measures -- include ID in the formula as a random effect
Acer_model <- lmer(fvfm ~ Treatment*Colony*fvfm_timepoint + (1|Tank) + (1|Puck), data = Acer_tidydata)
summary(Acer_model)
Anova(Acer_model, type = "II", test.statistic = "F")
Pcli_model <- lmer(fvfm ~ Treatment*Colony*fvfm_timepoint + (1|Tank) + (1|Puck), data = Pcli_tidydata)
summary(Pcli_model)
Anova(Pcli_model, type = "II", test.statistic = "F")
x = residuals(Acer_model)
plot(fitted(Acer_model), x)
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
car::outlierTest(Acer_model) #row 317
Acer_tidydata[-317, ] -> Acer_noout
Acer_tidydata
Acer_model_2 <- lmer(fvfm ~ Treatment*Colony*fvfm_timepoint + (1|Tank) + (1|Puck), data = Acer_noout)
Anova(Acer_model_2, type = "II", test.statistic = "F")
x = residuals(Pcli_model)
plot(fitted(Pcli_model), x)
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
car::outlierTest(Pcli_model) #rows 375, 200, 108
rows_to_remove <- c(375, 200, 108)
Pcli_tidydata[-rows_to_remove, ] -> Pcli_noout
Pcli_model_2 <- lmer(fvfm ~ Treatment*Colony*fvfm_timepoint + (1|Tank) + (1|Puck), data = Pcli_noout)
x = residuals(Pcli_model_2)
plot(fitted(Pcli_model_2), x)
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
Anova(Pcli_model_2, type = "II", test.statistic = "F")
#colony + treatment + timepoint
Acer_emms <- emmeans(Acer_model_2, pairwise ~ Colony*Treatment*fvfm_timepoint)
pairs(Acer_emms)
capture.output(pairs(Acer_emms), file = "Acer_Tukey_colonytreatmenttimepoint.csv")
#colony + treatment + timepoint
Pcli_emms <- emmeans(Pcli_model_2, pairwise ~ Colony*Treatment*fvfm_timepoint)
pairs(Pcli_emms)
capture.output(pairs(Pcli_emms), file = "Pcli_Tukey_colonytreatmenttimepoint.csv")
ipam_norm_overtime %>%
ggplot(., aes(x=numDays, y=fvfm, fill = Treatment, color=Treatment)) +
geom_point(alpha=0.3) +
geom_smooth() +
facet_wrap(~Species, ncol =1) +
theme_classic() +
labs(y = "Normalized Fv/Fm", x = "Days in Treatment") +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))  +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))  +
theme(text = element_text(size = 14)) +
ylim(0.4,1.2) +
theme(legend.position="none")
setwd("~/Library/CloudStorage/OneDrive-UniversityofMiami/GitHub/Ch1_temperaturevariability2023/physiology/Immune_cell_assay")
library(tidyverse)
library(plotrix)
library(ggpubr)
library(rstatix)
library(cowplot)
library(dunn.test)
library(Rmisc)
library(plyr)
library(dplyr)
library(lme4)
library(emmeans)
library(modelsummary)
library(car)
library(multcomp)
percent_cells_df <- read_csv("immunecellsdata.csv")
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, Genotype, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent)) %>%
ungroup() %>%
select(Species:ID, Tank:num_days, mean_replicate_percent_perID) -> comb_tech_reps
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, Genotype, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent)) %>%
ungroup() %>%
dplyr::select(Species:ID, Tank:num_days, mean_replicate_percent_perID) -> comb_tech_reps
comb_tech_reps
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, Genotype, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent))
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, Genotype, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent)) %>%
ungroup() %>%
dplyr::select(Species:ID, Tank:num_days, mean_replicate_percent_perID) %>%
distinct() -> comb_tech_reps
comb_tech_reps
comb_tech_reps %>%
filter(num_days == "0" | num_days == "28") %>%
pivot_wider(names_from = "num_days", values_from = "mean_replicate_percent_perGenet") %>%
mutate(relative_activity = ((`28`-`0`)/`0`)*100) %>% #T1-T0/T0*100
ggplot(., aes(x=Species, y=relative_activity, fill= Treatment)) +
geom_boxplot() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Decline Immune Cell Activity")+
theme_classic() +
theme(text = element_text(size = 15))
comb_tech_reps %>%
filter(num_days == "0" | num_days == "28")
comb_tech_reps %>%
filter(num_days == "0" | num_days == "28") %>%
pivot_wider(names_from = "num_days", values_from = "mean_replicate_percent_perID")
comb_tech_reps %>%
group_by(num_days, Tank, Species, Genotype, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perGenet = mean(Percent)) %>%
select(Species, Genotype, Tank, Treatment, num_days, mean_replicate_percent_perGenet) %>%
distinct() %>%
filter(num_days == "0" | num_days == "28") %>%
pivot_wider(names_from = "num_days", values_from = "mean_replicate_percent_perGenet") %>%
mutate(relative_activity = ((`28`-`0`)/`0`)*100) %>% #T1-T0/T0*100
ggplot(., aes(x=Species, y=relative_activity, fill= Treatment)) +
geom_boxplot() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Decline Immune Cell Activity")+
theme_classic() +
theme(text = element_text(size = 15))
comb_tech_reps
comb_tech_reps %>%
group_by(num_days, Tank, Species, Genotype, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perGenet = mean(mean_replicate_percent_perID)) %>%
dplyr::select(Species, Genotype, Tank, Treatment, num_days, mean_replicate_percent_perGenet) %>%
distinct() %>%
filter(num_days == "0" | num_days == "28") %>%
pivot_wider(names_from = "num_days", values_from = "mean_replicate_percent_perGenet") %>%
mutate(relative_activity = ((`28`-`0`)/`0`)*100) %>% #T1-T0/T0*100
ggplot(., aes(x=Species, y=relative_activity, fill= Treatment)) +
geom_boxplot() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Decline Immune Cell Activity")+
theme_classic() +
theme(text = element_text(size = 15))
comb_tech_reps %>%
group_by(num_days, Tank, Species, Genotype, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perGenet = mean(mean_replicate_percent_perID)) %>%
dplyr::select(Species, Genotype, Tank, Treatment, num_days, mean_replicate_percent_perGenet) %>%
distinct() %>%
filter(num_days == "0" | num_days == "28") %>%
pivot_wider(names_from = "num_days", values_from = "mean_replicate_percent_perGenet") %>%
mutate(relative_activity = ((`28`-`0`)/`0`)*100)
#taking the mean percent change per colony per tank, so the sample size for each colony in each treatment is only 2. because of this, stats cannot be performed at the colony level.
comb_tech_reps %>%
group_by(num_days, Tank, Species, Genotype, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perGenet = mean(mean_replicate_percent_perID)) %>%
dplyr::select(Species, Genotype, Tank, Treatment, num_days, mean_replicate_percent_perGenet) %>%
distinct() %>%
filter(num_days == "0" | num_days == "28") %>%
pivot_wider(names_from = "num_days", values_from = "mean_replicate_percent_perGenet") %>%
mutate(relative_activity = ((`28`-`0`)/`0`)*100) %>% #T1-T0/T0*100
ggplot(., aes(x=Species, y=relative_activity, fill= Treatment)) +
geom_boxplot() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Decline Immune Cell Activity")+
theme_classic() +
theme(text = element_text(size = 15))
#taking the mean percent change per colony per tank, so the sample size for each colony in each treatment is only 2. because of this, stats cannot be performed at the colony level.
comb_tech_reps %>%
group_by(num_days, Tank, Species, Genotype, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perGenet = mean(mean_replicate_percent_perID)) %>%
dplyr::select(Species, Genotype, Tank, Treatment, num_days, mean_replicate_percent_perGenet) %>%
distinct() %>%
filter(num_days == "0" | num_days == "28") %>%
pivot_wider(names_from = "num_days", values_from = "mean_replicate_percent_perGenet") %>%
mutate(relative_activity = ((`28`-`0`)/`0`)*100) %>% #T1-T0/T0*100
ggplot(., aes(x=Species, y=relative_activity, fill= Treatment)) +
geom_boxplot() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Decline Immune Cell Activity")+
theme_classic() +
theme(text = element_text(size = 15)) +
theme(legend.position="none")
#taking the mean percent change per colony per tank, so the sample size for each colony in each treatment is only 2. because of this, stats cannot be performed at the colony level.
comb_tech_reps %>%
group_by(num_days, Tank, Species, Genotype, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perGenet = mean(mean_replicate_percent_perID)) %>%
dplyr::select(Species, Genotype, Tank, Treatment, num_days, mean_replicate_percent_perGenet) %>%
distinct() %>%
filter(num_days == "0" | num_days == "28") %>%
pivot_wider(names_from = "num_days", values_from = "mean_replicate_percent_perGenet") %>%
mutate(relative_activity = ((`28`-`0`)/`0`)*100) %>% #T1-T0/T0*100
ggplot(., aes(x=Species, y=relative_activity, fill= Treatment)) +
geom_boxplot() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Change Immune Cell Activity")+
theme_classic() +
theme(text = element_text(size = 15)) +
theme(legend.position="none")
# try including colony as a random effect since there isn't enough data for it to be a fixed effect
comb_tech_reps %>%
group_by(num_days, Tank, Species, Genotype, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perGenet = mean(mean_replicate_percent_perID)) %>%
dplyr::select(Species, Genotype, Tank, Treatment, num_days, mean_replicate_percent_perGenet) %>%
distinct() %>%
filter(num_days == "0" | num_days == "28") %>%
pivot_wider(names_from = "num_days", values_from = "mean_replicate_percent_perGenet") %>%
mutate(relative_activity = ((`28`-`0`)/`0`)*100) -> percent_change
percent_change
percent_change %>%
filter(Species == "Acer") -> Acer_percent_change
Acer_percent_change
Acer_model <- lmer(fvfm_loss_norm ~ Treatment + (1|Colony) + (1|Tank), data = Acer_percent_change)
Acer_percent_change
Acer_model <- lmer(relative_activity ~ Treatment + (1|Colony) + (1|Tank), data = Acer_percent_change)
Acer_model <- lmer(relative_activity ~ Treatment + (1|Genotype) + (1|Tank), data = Acer_percent_change)
summary(Acer_model)
anova(Acer_model)
Acer_model <- lmer(relative_activity ~ Treatment + (1|Tank), data = Acer_percent_change)
summary(Acer_model)
anova(Acer_model)
Acer_percent_change
Acer_model <- lmer(relative_activity ~ Treatment, data = Acer_percent_change)
Acer_model <- lmer(relative_activity ~ Treatment + (1|Genotype), data = Acer_percent_change)
summary(Acer_model)
anova(Acer_model)
Acer_model <- lmer(relative_activity ~ Treatment + (1|Genotype) + (1|Tank), data = Acer_percent_change)
summary(Acer_model)
anova(Acer_model)
Acer_percent_change
Acer_model <- lm(relative_activity ~ Treatment, data = Acer_percent_change)
summary(Acer_model)
anova(Acer_model)
Anova(Acer_model)
anova(Acer_model)
Anova(Acer_model)
Acer_model <- lmer(relative_activity ~ Treatment + (1|Genotype) + (1|Tank), data = Acer_percent_change)
summary(Acer_model)
anova(Acer_model)
percent_change %>%
filter(Species == "Pcli") -> Pcli_percent_change
Pcli_model <- lmer(relative_activity ~ Treatment + (1|Genotype) + (1|Tank), data = Pcli_percent_change)
summary(Pcli_model)
anova(Pcli_model)
x = residuals(Acer_model)
plot(fitted(Acer_model), x)
leveneTest(x ~ Treatment, data=Acer_percent_change, center=mean) # formal statistical test for homogenity of variance #marginally significant
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
shapiro.test(x) # formal statistical test
Anova(Acer_model,  type = "II", test.statistic = "F") #you need to manually specify Satterthwaite's method, because otherwise it will give you the Wald/Chi-squared approximation and that is only appropriate for binomial or poisson distributions. Satterthwaite's method is for normal/gaussian
capture.output(Anova(Acer_model,  type = "II", test.statistic = "F"), file = "Acer_model_ANOVA.csv")
x = residuals(Pcli_model)
plot(fitted(Pcli_model), x)
leveneTest(x ~ Treatment, data=Pcli_percent_change, center=mean) # formal statistical test for homogeneity of variance #not significant
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
shapiro.test(x) # formal statistical test
Anova(Pcli_model, type = "II", test.statistic = "F") #you need to manually specify Satterthwaite's method, because otherwise it will give you the Wald/Chi-squared approximation and that is only appropriate for binomial or poisson distributions. Satterthwaite's method is for normal/gaussian
capture.output(Anova(Pcli_model, type = "II", test.statistic = "F"), file = "Pcli_model_ANOVA.csv")
#colony + treatment
Acer_emms <- emmeans(Acer_model, pairwise ~ Treatment)
pairs(Acer_emms)
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, Genotype, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent)) %>%
ungroup() %>%
select(Species:ID, Tank:num_days, mean_replicate_percent_perID) %>%
ggplot(., aes(x=num_days, y=mean_replicate_percent_perID, color = Treatment)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Species,ncol = 1, nrow = 2) +
ylab("% Immune Cell Activity")+
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(text = element_text(size = 15)) +
labs(x="Days in Treatment") +
theme(legend.position="none")
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, Genotype, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent)) %>%
ungroup() %>%
dplyr::select(Species:ID, Tank:num_days, mean_replicate_percent_perID) %>%
ggplot(., aes(x=num_days, y=mean_replicate_percent_perID, color = Treatment)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Species,ncol = 1, nrow = 2) +
ylab("% Immune Cell Activity")+
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(text = element_text(size = 15)) +
labs(x="Days in Treatment") +
theme(legend.position="none")
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, Genotype, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent)) %>%
ungroup() %>%
dplyr::select(Species:ID, Tank:num_days, mean_replicate_percent_perID) %>%
ggplot(., aes(x=num_days, y=mean_replicate_percent_perID, color = Treatment)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Species + Genotype) +
ylab("% Immune Cell Activity")+
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(text = element_text(size = 15)) +
labs(x="Days in Treatment")
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, Genotype, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent)) %>%
ungroup() %>%
dplyr::select(Species:ID, Tank:num_days, mean_replicate_percent_perID) %>%
ggplot(., aes(x=num_days, y=mean_replicate_percent_perID, color = Treatment)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Species + Genotype) +
ylab("% Immune Cell Activity")+
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(text = element_text(size = 15)) +
labs(x="Days in Treatment")+
theme(legend.position="none")
#taking the mean percent change per colony per tank, so the sample size for each colony in each treatment is only 2. because of this, stats cannot be performed at the colony level.
plot1<-comb_tech_reps %>%
group_by(num_days, Tank, Species, Genotype, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perGenet = mean(mean_replicate_percent_perID)) %>%
dplyr::select(Species, Genotype, Tank, Treatment, num_days, mean_replicate_percent_perGenet) %>%
distinct() %>%
filter(num_days == "0" | num_days == "28") %>%
pivot_wider(names_from = "num_days", values_from = "mean_replicate_percent_perGenet") %>%
mutate(relative_activity = ((`28`-`0`)/`0`)*100) %>% #T1-T0/T0*100
ggplot(., aes(x=Species, y=relative_activity, fill= Treatment)) +
geom_boxplot() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Change Immune Cell Activity")+
theme_classic() +
theme(text = element_text(size = 15)) +
theme(legend.position="none")
plot2<-percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, Genotype, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent)) %>%
ungroup() %>%
dplyr::select(Species:ID, Tank:num_days, mean_replicate_percent_perID) %>%
ggplot(., aes(x=num_days, y=mean_replicate_percent_perID, color = Treatment)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Species,ncol = 1, nrow = 2) +
ylab("% Immune Cell Activity")+
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(text = element_text(size = 15)) +
labs(x="Days in Treatment") +
theme(legend.position="none")
plot3<-percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, Genotype, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent)) %>%
ungroup() %>%
dplyr::select(Species:ID, Tank:num_days, mean_replicate_percent_perID) %>%
ggplot(., aes(x=num_days, y=mean_replicate_percent_perID, color = Treatment)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Species + Genotype) +
ylab("% Immune Cell Activity")+
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(text = element_text(size = 15)) +
labs(x="Days in Treatment")+
theme(legend.position="none")
plot_grid(plot1, plot2, plot3, ncol = 1, rel_widths = c(1, 1, 2))
plot_grid(plot1, plot2, plot3, nrow = 1, rel_widths = c(1, 1, 2))
comb_tech_reps %>%
group_by(num_days, Tank, Species, Genotype, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perGenet = mean(mean_replicate_percent_perID)) %>%
dplyr::select(Species, Genotype, Tank, Treatment, num_days, mean_replicate_percent_perGenet) %>%
distinct() %>%
filter(num_days == "0" | num_days == "28") %>%
pivot_wider(names_from = "num_days", values_from = "mean_replicate_percent_perGenet") %>%
mutate(relative_activity = ((`28`-`0`)/`0`)*100) %>% #T1-T0/T0*100
ggplot(., aes(x=Species, y=relative_activity, fill= Treatment)) +
geom_boxplot() +
facet_wrap(~Species,ncol = 1, nrow = 2) +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Change Immune Cell Activity")+
theme_classic() +
theme(text = element_text(size = 15)) +
theme(legend.position="none")
comb_tech_reps %>%
group_by(num_days, Tank, Species, Genotype, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perGenet = mean(mean_replicate_percent_perID)) %>%
dplyr::select(Species, Genotype, Tank, Treatment, num_days, mean_replicate_percent_perGenet) %>%
distinct() %>%
filter(num_days == "0" | num_days == "28") %>%
pivot_wider(names_from = "num_days", values_from = "mean_replicate_percent_perGenet") %>%
mutate(relative_activity = ((`28`-`0`)/`0`)*100) %>% #T1-T0/T0*100
ggplot(., aes(x=Species, y=relative_activity, fill= Treatment)) +
geom_boxplot() +
facet_wrap(~Species,ncol = 1, nrow = 2, scales="free_x") +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Change Immune Cell Activity")+
theme_classic() +
theme(text = element_text(size = 15)) +
theme(legend.position="none")
#taking the mean percent change per colony per tank, so the sample size for each colony in each treatment is only 2. because of this, stats cannot be performed at the colony level.
plot1<-comb_tech_reps %>%
group_by(num_days, Tank, Species, Genotype, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perGenet = mean(mean_replicate_percent_perID)) %>%
dplyr::select(Species, Genotype, Tank, Treatment, num_days, mean_replicate_percent_perGenet) %>%
distinct() %>%
filter(num_days == "0" | num_days == "28") %>%
pivot_wider(names_from = "num_days", values_from = "mean_replicate_percent_perGenet") %>%
mutate(relative_activity = ((`28`-`0`)/`0`)*100) %>% #T1-T0/T0*100
ggplot(., aes(x=Species, y=relative_activity, fill= Treatment)) +
geom_boxplot() +
facet_wrap(~Species,ncol = 1, nrow = 2, scales="free_x") +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Change Immune Cell Activity")+
theme_classic() +
theme(text = element_text(size = 15)) +
theme(legend.position="none")
plot_grid(plot1, plot2, plot3, nrow = 1, rel_widths = c(1, 1, 2))
ggsave("percentimmunecellactivity_boxplot_linear.pdf", width = 12, height = 5)
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, Genotype, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent)) %>%
ungroup() %>%
dplyr::select(Species:ID, Tank:num_days, mean_replicate_percent_perID) -> immmunecells_meanreps
immmunecells_meanreps %>%
dplyr::mutate(across(c(Species, Genotype, ID, Tank, Treatment, num_days), as.factor)) -> immmunecells_meanreps
immmunecells_meanreps %>%
filter(Species == "Acer") %>%
distinct() -> immmunecells_meanreps_Acer
immmunecells_meanreps %>%
filter(Species == "Pcli") %>%
distinct() -> immmunecells_meanreps_Pcli
#although this was measured over time, it is not repeated measures because different corals were measured at each time point. so coral ID is not included in this formula
Acer_model <- lmer(mean_replicate_percent_perID~Treatment*Genotype*num_days + (1|Tank), data = immmunecells_meanreps_Acer)
summary(Acer_model)
Anova(Acer_model, type = "II", test.statistic = "F")
Pcli_model <- lmer(mean_replicate_percent_perID~Treatment*Genotype*num_days + (1|Tank), data = immmunecells_meanreps_Pcli)
summary(Pcli_model)
Anova(Pcli_model, type = "II", test.statistic = "F")
x = residuals(Acer_model)
plot(fitted(Acer_model), x)
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
Anova(Acer_model, type = "II", test.statistic = "F")
leveneTest(x ~ Treatment*Genotype*num_days, data=immmunecells_meanreps_Acer, center=mean) # formal statistical test for homogeneity of variance #not significant
shapiro.test(x)
car::outlierTest(Acer_model) #row 36
immmunecells_meanreps_Acer[-48, ] -> Acer_immunecells_noout
Acer_model_2 <- lmer(mean_replicate_percent_perID~Treatment*Genotype*num_days + (1|Tank), data = Acer_immunecells_noout)
summary(Acer_model_2)
x = residuals(Acer_model_2)
plot(fitted(Acer_model_2), x)
leveneTest(x ~ Treatment*Genotype*num_days, data=Acer_immunecells_noout, center=mean) # formal statistical test for homogenity of variance #not significant
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
shapiro.test(x) # formal statistical test
car::outlierTest(Acer_model_2) #row 48
Acer_immunecells_noout[-26, ] -> Acer_immunecells_noout
Acer_model_2 <- lmer(mean_replicate_percent_perID~Treatment*Genotype*num_days + (1|Tank), data = Acer_immunecells_noout)
x = residuals(Acer_model_2)
leveneTest(x ~ Treatment*Genotype*num_days, data=Acer_immunecells_noout, center=mean)
shapiro.test(x) # formal statistical test
shapiro.test(x) # formal statistical test
hist(x) # histogram of residuals to check for normal distribution of residuals
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
x = residuals(Acer_model)
plot(fitted(Acer_model), x)
leveneTest(x ~ Treatment*Genotype*num_days, data=immmunecells_meanreps_Acer, center=mean) # formal statistical test for homogeneity of variance #very significant
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
shapiro.test(x) # not significant
car::outlierTest(Acer_model) #row 48
leveneTest(x ~ Treatment*Genotype*num_days, data=immmunecells_meanreps_Acer, center=mean) # formal statistical test for homogeneity of variance #very significant
plot(fitted(Acer_model), x)
leveneTest(x ~ Treatment*Genotype*num_days, data=Acer_immunecells_noout, center=mean)
leveneTest(x ~ Treatment*Genotype*num_days, data=immmunecells_meanreps_Acer, center=mean) # formal statistical test for homogeneity of variance #very significant
immmunecells_meanreps_Acer
Acer_model_2 <- lmer((mean_replicate_percent_perID)^2~Treatment*Genotype*num_days + (1|Tank), data = Acer_immunecells_noout)
x = residuals(Acer_model_2)
plot(fitted(Acer_model_2), x)
leveneTest(x ~ Treatment*Genotype*num_days, data=Acer_immunecells_noout, center=mean)
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
Acer_model_2 <- lmer((mean_replicate_percent_perID)^3~Treatment*Genotype*num_days + (1|Tank), data = Acer_immunecells_noout)
x = residuals(Acer_model_2)
plot(fitted(Acer_model_2), x)
Acer_model_2 <- lmer(log(mean_replicate_percent_perID)~Treatment*Genotype*num_days + (1|Tank), data = Acer_immunecells_noout)
x = residuals(Acer_model_2)
plot(fitted(Acer_model_2), x)
leveneTest(x ~ Treatment*Genotype*num_days, data=Acer_immunecells_noout, center=mean)
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
shapiro.test(x) # formal statistical test
car::outlierTest(Acer_model_2) #row 26
Anova(Acer_model_2, type = "II", test.statistic = "F")
capture.output(Anova(Acer_model_2, type = "II", test.statistic = "F"), file = "Acer_immunecells_model_ANOVA.csv")
x = residuals(Pcli_model)
plot(fitted(Pcli_model), x)
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
leveneTest(x ~ Treatment*Genotype*num_days, data=immmunecells_meanreps_Pcli, center=mean)
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
shapiro.test(x) # formal statistical test
Anova(Pcli_model, type = "II", test.statistic = "F")
capture.output(Anova(Pcli_model, type = "II", test.statistic = "F"), file = "Pcli_immunecells_model_ANOVA.csv")
#colony + treatment + timepoint
Acer_emms <- emmeans(Acer_model_2, pairwise ~ Treatment*Genotype*num_days)
pairs(Acer_emms)
capture.output(pairs(Acer_emms), file = "Acer_Tukey_colonytreatmenttimepoint.csv")
#colony + treatment + timepoint
Pcli_emms <- emmeans(Pcli_model, pairwise ~ Treatment*Genotype*num_days)
pairs(Pcli_emms)
capture.output(pairs(Pcli_emms), file = "Pcli_Tukey_colonytreatmenttimepoint.csv")
