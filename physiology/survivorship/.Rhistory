scale_color_manual(labels=c("Ambient", "Heat stress"), values = c( "#60DBDB", "#F54A34"))+
scale_fill_manual(labels=c("Ambient", "Heat stress"), values = c( "#60DBDB", "#F54A34"))
heatstressassay %>%
dplyr::select(Time, T3, T4, T8) %>%
dplyr::select(Time:T8) %>%
pivot_longer(T3:T8, names_to="Tank", values_to ="Temp") %>%
drop_na(Temp) %>%
filter(Time <= as.Date("2022-07-15")) %>%
dplyr::group_by(Time) %>%
dplyr::summarise(avg_temp = mean(Temp), se = std.error(Temp)) %>%
ggplot(., aes(x=Time, y=avg_temp)) +
geom_point() +
theme_classic() +
labs(title = "Tank Temperatures",
y = "Temperature (째C)",
x = "Date") +
#scale_y_continuous(limits = c(27, 29)) +
theme(text = element_text(size = 16)) #all font sizes
heatstressassay$Time <- lubridate::round_date(heatstressassay$Time, unit = "15 min")
# need to figure out troublesome time points for each tank
heatstressassay %>%
dplyr::select(Time, T3, T4, T7, T8) %>%
pivot_longer(T3:T8, names_to="Tank", values_to ="Temp") %>%
filter(!(Time > "2022-06-25 00:00:00" & Temp < 28 & Tank != "T7")) %>%
mutate(Treatment = case_when(Tank == "T3" ~ "heatstress",
Tank == "T4" ~ "heatstress",
Tank == "T7" ~ "ambient",
Tank == "T8" ~ "heatstress")) %>%
group_by(Time, Treatment) %>%
summarise(mean_temp = mean(Temp), se = std.error(Temp)) %>%
ggplot(data = .,
aes(x = Time, y = mean_temp, color = Treatment)) +
geom_point() +
theme_classic() +
labs(title = "Tank Temperatures",
y = "Temperature (째C)",
x = "Date") +
theme(text = element_text(size = 15)) +
geom_ribbon(aes(fill=Treatment, group = Treatment, ymin = mean_temp - se, ymax = mean_temp + se), alpha = 0.2) +
scale_color_manual(labels=c("Ambient", "Heat stress"), values = c( "#60DBDB", "#F54A34"))+
scale_fill_manual(labels=c("Ambient", "Heat stress"), values = c( "#60DBDB", "#F54A34"))
# need to figure out troublesome time points for each tank
heatstressassay %>%
dplyr::select(Time, T3, T4, T7, T8) %>%
pivot_longer(T3:T8, names_to="Tank", values_to ="Temp") %>%
filter(!(Time > "2022-06-25 00:00:00" & Temp < 28 & Tank != "T7")) %>%
filter(Time <= as.Date("2022-07-15")) %>%
mutate(Treatment = case_when(Tank == "T3" ~ "heatstress",
Tank == "T4" ~ "heatstress",
Tank == "T7" ~ "ambient",
Tank == "T8" ~ "heatstress")) %>%
group_by(Time, Treatment) %>%
summarise(mean_temp = mean(Temp), se = std.error(Temp)) %>%
ggplot(data = .,
aes(x = Time, y = mean_temp, color = Treatment)) +
geom_point() +
theme_classic() +
labs(title = "Tank Temperatures",
y = "Temperature (째C)",
x = "Date") +
theme(text = element_text(size = 15)) +
geom_ribbon(aes(fill=Treatment, group = Treatment, ymin = mean_temp - se, ymax = mean_temp + se), alpha = 0.2) +
scale_color_manual(labels=c("Ambient", "Heat stress"), values = c( "#60DBDB", "#F54A34"))+
scale_fill_manual(labels=c("Ambient", "Heat stress"), values = c( "#60DBDB", "#F54A34"))
heatstressassay$Time <- lubridate::round_date(heatstressassay$Time, unit = "15 min")
# need to figure out troublesome time points for each tank
heatstressassay %>%
dplyr::select(Time, T3, T4, T7, T8) %>%
pivot_longer(T3:T8, names_to="Tank", values_to ="Temp") %>%
filter(!(Time > "2022-06-25 00:00:00" & Temp < 28 & Tank != "T7")) %>%
filter(Time <= as.Date("2022-07-15")) %>%
mutate(Treatment = case_when(Tank == "T3" ~ "heatstress",
Tank == "T4" ~ "heatstress",
Tank == "T7" ~ "ambient",
Tank == "T8" ~ "heatstress")) %>%
group_by(Time, Treatment) %>%
summarise(mean_temp = mean(Temp), se = std.error(Temp)) %>%
ggplot(data = .,
aes(x = Time, y = mean_temp, color = Treatment)) +
geom_point() +
theme_classic() +
labs(title = "Tank Temperatures",
y = "Temperature (째C)",
x = "Date") +
theme(text = element_text(size = 15)) +
geom_ribbon(aes(fill=Treatment, group = Treatment, ymin = mean_temp - se, ymax = mean_temp + se), alpha = 0.2) +
scale_color_manual(labels=c("Ambient", "Heat stress"), values = c( "#60DBDB", "#F54A34"))+
scale_fill_manual(labels=c("Ambient", "Heat stress"), values = c( "#60DBDB", "#F54A34"))
ggsave("slowburnheatstress.pdf", width = 10, height = 6)
slowburn_metadata %>%
filter(Removed_Date >= "2022-06-21" | is.na(Removed_Date)) %>%
mutate(Removed_Date = ymd(Removed_Date)) %>%
mutate(mortality_date = ymd(mortality_date)) %>%
mutate(end_date = coalesce(Removed_Date, mortality_date)) %>% #if removed_date is NA, then look and use the date from mortality date
mutate(end_date =  replace(end_date, is.na(end_date), as.Date("2022-07-15")))
slowburn_metadata %>%
filter(Removed_Date >= "2022-06-21" | is.na(Removed_Date)) %>%
mutate(Removed_Date = ymd(Removed_Date)) %>%
mutate(mortality_date = ymd(mortality_date)) %>%
mutate(end_date = coalesce(Removed_Date, mortality_date)) %>% #if removed_date is NA, then look and use the date from mortality date
mutate(end_date =  replace(end_date, is.na(end_date), as.Date("2022-07-15"))) %>%
mutate(start_date="2022-06-25") %>%
mutate(start_date = ymd(start_date)) %>%
mutate(Removed_Date = ymd(Removed_Date)) %>%
mutate(days_to_removed = Removed_Date - start_date) %>%
group_by(Species, Treatment, CBASS_temp) %>%
summarise(averagedays = mean(days_to_removed), sd = sd(days_to_removed)) %>%
ggplot(., aes(x = CBASS_temp, y = averagedays, fill = Treatment)) +
geom_bar(stat="identity", position = position_dodge()) +
geom_errorbar(aes(ymin = averagedays - sd, ymax = averagedays + sd), width =
.2, position=position_dodge(.9)) +
theme_classic() +
facet_wrap(~Species)
slowburn_metadata %>%
filter(Removed_Date >= "2022-06-21" | is.na(Removed_Date)) %>%
mutate(Removed_Date = ymd(Removed_Date)) %>%
mutate(mortality_date = ymd(mortality_date)) %>%
mutate(end_date = coalesce(Removed_Date, mortality_date)) %>% #if removed_date is NA, then look and use the date from mortality date
mutate(end_date =  replace(end_date, is.na(end_date), as.Date("2022-07-15"))) %>%
mutate(start_date="2022-06-25") %>%
mutate(start_date = ymd(start_date))
slowburn_metadata %>%
filter(Removed_Date >= "2022-06-21" | is.na(Removed_Date)) %>%
mutate(Removed_Date = ymd(Removed_Date)) %>%
mutate(mortality_date = ymd(mortality_date)) %>%
mutate(end_date = coalesce(Removed_Date, mortality_date)) %>% #if removed_date is NA, then look and use the date from mortality date
mutate(end_date =  replace(end_date, is.na(end_date), as.Date("2022-07-15"))) %>%
mutate(start_date="2022-06-25") %>%
mutate(start_date = ymd(start_date)) %>%
mutate(days_to_removed = end_date - start_date)
slowburn_metadata %>%
filter(Removed_Date >= "2022-06-21" | is.na(Removed_Date)) %>%
mutate(Removed_Date = ymd(Removed_Date)) %>%
mutate(mortality_date = ymd(mortality_date)) %>%
mutate(end_date = coalesce(Removed_Date, mortality_date)) %>% #if removed_date is NA, then look and use the date from mortality date
mutate(end_date =  replace(end_date, is.na(end_date), as.Date("2022-07-15"))) %>%
mutate(start_date="2022-06-25") %>%
mutate(start_date = ymd(start_date)) %>%
mutate(days_to_removed = end_date - start_date) %>%
group_by(Species, Treatment, CBASS_temp) %>%
summarise(averagedays = mean(days_to_removed), sd = sd(days_to_removed)) %>%
ggplot(., aes(x = CBASS_temp, y = averagedays, fill = Treatment)) +
geom_bar(stat="identity", position = position_dodge()) +
geom_errorbar(aes(ymin = averagedays - sd, ymax = averagedays + sd), width =
.2, position=position_dodge(.9)) +
theme_classic() +
facet_wrap(~Species)
slowburn_metadata %>%
filter(Removed_Date >= "2022-06-21" | is.na(Removed_Date)) %>%
mutate(Removed_Date = ymd(Removed_Date)) %>%
mutate(mortality_date = ymd(mortality_date)) %>%
mutate(end_date = coalesce(Removed_Date, mortality_date)) %>% #if removed_date is NA, then look and use the date from mortality date
mutate(end_date =  replace(end_date, is.na(end_date), as.Date("2022-07-15"))) %>%
mutate(start_date="2022-06-25") %>%
mutate(start_date = ymd(start_date)) %>%
mutate(days_to_removed = end_date - start_date) %>%
group_by(Species, Treatment, CBASS_temp) %>%
summarise(averagedays = mean(days_to_removed), se = std.error(days_to_removed)) %>%
ggplot(., aes(x = CBASS_temp, y = averagedays, fill = Treatment)) +
geom_bar(stat="identity", position = position_dodge()) +
geom_errorbar(aes(ymin = averagedays - se, ymax = averagedays + se), width =
.2, position=position_dodge(.9)) +
theme_classic() +
facet_wrap(~Species)
slowburn_metadata %>%
filter(Removed_Date >= "2022-06-21" | is.na(Removed_Date)) %>%
mutate(Removed_Date = ymd(Removed_Date)) %>%
mutate(mortality_date = ymd(mortality_date)) %>%
mutate(end_date = coalesce(Removed_Date, mortality_date)) %>% #if removed_date is NA, then look and use the date from mortality date
mutate(end_date =  replace(end_date, is.na(end_date), as.Date("2022-07-15"))) %>%
mutate(start_date="2022-06-25") %>%
mutate(start_date = ymd(start_date)) %>%
mutate(days_to_removed = end_date - start_date) %>%
group_by(Species, Treatment, CBASS_temp) %>%
summarise(averagedays = mean(days_to_removed), se = std.error(days_to_removed)) %>%
ggplot(., aes(x = CBASS_temp, y = averagedays, fill = Treatment)) +
geom_bar(stat="identity", position = position_dodge()) +
geom_errorbar(aes(ymin = averagedays - se, ymax = averagedays + se), width =
.2, position=position_dodge(.9)) +
theme_classic() +
facet_wrap(~Species, scales = "free_x") +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))
slowburn_metadata %>%
filter(Removed_Date >= "2022-06-21" | is.na(Removed_Date)) %>%
mutate(Removed_Date = ymd(Removed_Date)) %>%
mutate(mortality_date = ymd(mortality_date)) %>%
mutate(end_date = coalesce(Removed_Date, mortality_date)) %>% #if removed_date is NA, then look and use the date from mortality date
mutate(end_date =  replace(end_date, is.na(end_date), as.Date("2022-07-15"))) %>%
mutate(start_date="2022-06-25") %>%
mutate(start_date = ymd(start_date)) %>%
mutate(days_to_removed = end_date - start_date) %>%
group_by(Species, Treatment) %>%
summarise(averagedays = mean(days_to_removed), se = std.error(days_to_removed)) %>%
ggplot(., aes(x = Treatment, y = averagedays, fill = Treatment)) +
geom_bar(stat="identity", position = position_dodge()) +
geom_errorbar(aes(ymin = averagedays - se, ymax = averagedays + se), width =
.2, position=position_dodge(.9)) +
theme_classic() +
facet_wrap(~Species, scales = "free_x") +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))
slowburn_metadata %>%
filter(Removed_Date >= "2022-06-21" | is.na(Removed_Date)) %>%
mutate(Removed_Date = ymd(Removed_Date)) %>%
mutate(mortality_date = ymd(mortality_date)) %>%
mutate(end_date = coalesce(Removed_Date, mortality_date)) %>% #if removed_date is NA, then look and use the date from mortality date
mutate(end_date =  replace(end_date, is.na(end_date), as.Date("2022-07-15"))) %>%
mutate(start_date="2022-06-25") %>%
mutate(start_date = ymd(start_date)) %>%
mutate(days_to_removed = end_date - start_date) %>%
group_by(Species, Treatment)
slowburn_metadata %>%
filter(Removed_Date >= "2022-06-21" | is.na(Removed_Date)) %>%
mutate(Removed_Date = ymd(Removed_Date)) %>%
mutate(mortality_date = ymd(mortality_date)) %>%
mutate(end_date = coalesce(Removed_Date, mortality_date)) %>% #if removed_date is NA, then look and use the date from mortality date
mutate(end_date =  replace(end_date, is.na(end_date), as.Date("2022-07-15"))) %>%
mutate(start_date="2022-06-25") %>%
mutate(start_date = ymd(start_date)) %>%
mutate(days_to_removed = end_date - start_date) %>%
group_by(Species, Treatment) %>%
summarise(averagedays = mean(days_to_removed), se = std.error(days_to_removed))
slowburn_metadata %>%
filter(Removed_Date >= "2022-06-21" | is.na(Removed_Date)) %>%
mutate(Removed_Date = ymd(Removed_Date)) %>%
mutate(mortality_date = ymd(mortality_date)) %>%
mutate(end_date = coalesce(Removed_Date, mortality_date)) %>% #if removed_date is NA, then look and use the date from mortality date
mutate(end_date =  replace(end_date, is.na(end_date), as.Date("2022-07-15"))) %>%
mutate(start_date="2022-06-25") %>%
mutate(start_date = ymd(start_date)) %>%
mutate(days_to_removed = end_date - start_date) %>%
group_by(Species, Treatment) %>%
summarise(averagedays = mean(days_to_removed), sd = sd(days_to_removed))
slowburn_metadata %>%
filter(Removed_Date >= "2022-06-21" | is.na(Removed_Date)) %>%
mutate(Removed_Date = ymd(Removed_Date)) %>%
mutate(mortality_date = ymd(mortality_date)) %>%
mutate(end_date = coalesce(Removed_Date, mortality_date)) %>% #if removed_date is NA, then look and use the date from mortality date
mutate(end_date =  replace(end_date, is.na(end_date), as.Date("2022-07-15"))) %>%
mutate(start_date="2022-06-25") %>%
mutate(start_date = ymd(start_date)) %>%
mutate(days_to_removed = end_date - start_date)
slowburn_metadata %>%
filter(Removed_Date >= "2022-06-21" | is.na(Removed_Date)) %>%
mutate(Removed_Date = ymd(Removed_Date)) %>%
mutate(mortality_date = ymd(mortality_date)) %>%
mutate(end_date = coalesce(Removed_Date, mortality_date)) %>% #if removed_date is NA, then look and use the date from mortality date
mutate(end_date =  replace(end_date, is.na(end_date), as.Date("2022-07-15"))) %>%
mutate(start_date="2022-06-25") %>%
mutate(start_date = ymd(start_date)) %>%
mutate(days_to_removed = end_date - start_date) %>%
select(Species, ID, Colony, Treatment, CBASS_temp, slowburn, days_to_removed)
slowburn_metadata %>%
filter(Removed_Date >= "2022-06-21" | is.na(Removed_Date)) %>%
mutate(Removed_Date = ymd(Removed_Date)) %>%
mutate(mortality_date = ymd(mortality_date)) %>%
mutate(end_date = coalesce(Removed_Date, mortality_date)) %>% #if removed_date is NA, then look and use the date from mortality date
mutate(end_date =  replace(end_date, is.na(end_date), as.Date("2022-07-15"))) %>%
mutate(start_date="2022-06-25") %>%
mutate(start_date = ymd(start_date)) %>%
mutate(days_to_removed = end_date - start_date) %>%
select(Species, ID, Colony, Treatment, CBASS_temp, slowburn, days_to_removed) -> slowburn_summary_data
str(slowburn_summary_data)
slowburn_summary_data %>%
mutate_at(vars(Species, ID, Colony, Treatment, CBASS_temp), factor) -> slowburn_summary_data
treat_model <- lm(days_to_removed ~ Treatment*Species*CBASS_temp + Colony, data = slowburn_summary_data)
treat_model_metrics <- augment(treat_model)
treat_model <- lm(days_to_removed ~ Treatment*Species*CBASS_temp + Colony, data = slowburn_summary_data)
treat_model_metrics <- augment(treat_model)
treat_model
plot(treat_model)
slowburn_metadata %>%
filter(Removed_Date >= "2022-06-21" | is.na(Removed_Date)) %>%
mutate(Removed_Date = ymd(Removed_Date)) %>%
mutate(mortality_date = ymd(mortality_date)) %>%
mutate(end_date = coalesce(Removed_Date, mortality_date)) %>% #if removed_date is NA, then look and use the date from mortality date
mutate(end_date =  replace(end_date, is.na(end_date), as.Date("2022-07-15"))) %>%
mutate(start_date="2022-06-25") %>%
mutate(start_date = ymd(start_date)) %>%
mutate(days_to_removed = end_date - start_date) %>%
select(Species, ID, Colony, Treatment, CBASS_temp, slowburn, days_to_removed) -> slowburn_summary_data
str(slowburn_summary_data)
#make factors: Colony, Puck, Tank, Treatment, Species
slowburn_summary_data %>%
mutate_at(vars(Species, ID, Colony, Treatment, CBASS_temp), factor) %>%
mutate(days_to_removed = as.numeric(days_to_removed)) -> slowburn_summary_data
str(slowburn_summary_data)
treat_model <- lm(days_to_removed ~ Treatment*Species*CBASS_temp + Colony, data = slowburn_summary_data)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #not significant
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3) -> treat_outliers
treat_outliers
#remove outliers
slowburn_summary_data <- slowburn_summary_data[!rownames(slowburn_summary_data) %in% treat_outliers$.rownames,]
treat_model <- lm(days_to_removed ~ Treatment*Species*CBASS_temp + Colony, data = slowburn_summary_data)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #significant :(
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3) -> treat_outliers
# 2 outliers
#remove outliers
slowburn_summary_data <- slowburn_summary_data[!rownames(slowburn_summary_data) %in% treat_outliers$.rownames,]
slowburn_metadata
View(slowburn_summary_data)
slowburn_metadata %>%
filter(Removed_Date >= "2022-06-21" | is.na(Removed_Date)) %>%
mutate(Removed_Date = ymd(Removed_Date)) %>%
mutate(mortality_date = ymd(mortality_date)) %>%
mutate(end_date = coalesce(Removed_Date, mortality_date)) %>% #if removed_date is NA, then look and use the date from mortality date
mutate(end_date =  replace(end_date, is.na(end_date), as.Date("2022-07-15"))) %>%
mutate(start_date="2022-06-25") %>%
mutate(start_date = ymd(start_date)) %>%
mutate(days_to_removed = end_date - start_date) %>%
filter(days_to_removed > 0) #remove corals that were not in the 32쨘C heat stress because they didn't make it
slowburn_summary_data %>%
mutate_at(vars(Species, ID, Colony, Treatment, CBASS_temp), factor) %>%
mutate(days_to_removed = as.numeric(days_to_removed)) -> slowburn_summary_data
treat_model <- lm(days_to_removed ~ Treatment*Species*CBASS_temp + Colony, data = slowburn_summary_data)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #significant :(
treat_model <- lm(log(days_to_removed) ~ Treatment*Species*CBASS_temp + Colony, data = slowburn_summary_data)
treat_model <- lm(log10(days_to_removed) ~ Treatment*Species*CBASS_temp + Colony, data = slowburn_summary_data)
treat_model <- lm(sqrt(days_to_removed) ~ Treatment*Species*CBASS_temp + Colony, data = slowburn_summary_data)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #significant :(
treat_model <- lm(1/(days_to_removed) ~ Treatment*Species*CBASS_temp + Colony, data = slowburn_summary_data)
treat_model <- lm(days_to_removed ~ Treatment*Species*CBASS_temp + Colony, data = slowburn_summary_data)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
aov(days_to_removed ~ Treatment*Species*CBASS_temp, data = slowburn_summary_data)
summary(aov(days_to_removed ~ Treatment*Species*CBASS_temp, data = slowburn_summary_data))
TukeyHSD(summary(aov(days_to_removed ~ Treatment*Species*CBASS_temp, data = slowburn_summary_data)))
TukeyHSD(aov(days_to_removed ~ Treatment*Species*CBASS_temp, data = slowburn_summary_data))
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species*CBASS_temp, data = treat_model_metrics) #significant :(
aov(days_to_removed ~ Treatment*Species*CBASS_temp, data = slowburn_summary_data)
summary(aov(days_to_removed ~ Treatment*Species*CBASS_temp, data = slowburn_summary_data))
capture.output(summary(aov(days_to_removed ~ Treatment*Species*CBASS_temp, data = slowburn_summary_data)), file = "daysuntilremoved_slowburn_anova_table.csv")
TukeyHSD(aov(days_to_removed ~ Treatment*Species*CBASS_temp, data = slowburn_summary_data))
capture.output(TukeyHSD(aov(days_to_removed ~ Treatment*Species*CBASS_temp, data = slowburn_summary_data)), file = "daysuntilremoved_slowburn_anova_tukey.csv")
library(tidyverse)
library(janitor)
library(rstatix)
library(cowplot)
metadata <- readxl::read_xlsx("../metadata.xlsx")
metadata %>%
mutate(Treatment = case_when(Treatment_Tank == "1" ~ "Untreated",
Treatment_Tank == "2" ~ "Treated",
Treatment_Tank == "3" ~ "Treated",
Treatment_Tank == "4" ~ "Untreated",
Treatment_Tank == "5" ~ "Treated",
Treatment_Tank == "6" ~ "Untreated",
Treatment_Tank == "7" ~ "Untreated",
Treatment_Tank == "8" ~ "Treated")) %>%
mutate(CBASS_temp = case_when(CBASS_tank == "1" ~ "36",
CBASS_tank == "2" ~ "37",
CBASS_tank == "3" ~ "32",
CBASS_tank == "4" ~ "33",
CBASS_tank == "5" ~ "35",
CBASS_tank == "6" ~ "30",
CBASS_tank == "7" ~ "34",
CBASS_tank == "8" ~ "28")) -> tidy_metadata
#proportion of corals that died during/post-CBASS versus the total number of corals that went into the CBASS
tidy_metadata %>%
dplyr::filter(Removed_Date >= "2022-04-21" & Removed_Date <= "2022-04-25") %>%
mutate(Reason_removed = case_when(Reason_removed == "dead" ~ "RTL",
Reason_removed == "post-CBASS RTL" ~ "RTL",
Reason_removed == "RTL" ~ "RTL")) %>%
drop_na(Species, Treatment) %>%
group_by(Species, Treatment) %>%
summarize(count_RTL = n()) -> RTL_species_treatment_count
tidy_metadata %>%
dplyr::filter(Removed_Date >= "2022-04-21" & Removed_Date <= "2022-04-25") %>%
mutate(Reason_removed = case_when(Reason_removed == "dead" ~ "RTL",
Reason_removed == "post-CBASS RTL" ~ "RTL",
Reason_removed == "RTL" ~ "RTL")) %>%
drop_na(Species, Treatment) %>%
group_by(Species, Treatment, CBASS_temp) %>%
summarize(count_RTL = n()) -> RTL_species_treatment_CBASStemps
tidy_metadata %>%
dplyr::filter(!Removed_Date <= "2022-04-20" | is.na(Removed_Date)) %>% #remove everything that was removed before CBASS so you only account for RTL due to CBASS
group_by(Species, Treatment) %>%
summarize(count_total = n()) %>%
full_join(., RTL_species_treatment_count) %>%
mutate(count_survived = count_total-count_RTL) %>%
select(!count_total) %>%
pivot_longer(count_RTL:count_survived, names_to="label", values_to="count") %>%
ggplot(., aes(x=Treatment, y=count, fill = label)) +
geom_col() +
theme_classic() +
scale_fill_manual(labels=c("RTL", "Survived"), values = c("black", "grey"))  +
theme(text = element_text(size = 12)) +
facet_wrap(~Species, scales = "free_x") +
labs(y="Count", fill = "Category")
tidy_metadata %>%
dplyr::filter(!Removed_Date <= "2022-04-20" | is.na(Removed_Date)) %>% #remove everything that was removed before CBASS so you only account for RTL due to CBASS
group_by(Species, Treatment, CBASS_temp) %>%
summarize(count_total = n()) %>%
full_join(., RTL_species_treatment_CBASStemps) %>%
drop_na(CBASS_temp) %>%
mutate(count_RTL = if_else(is.na(count_RTL),0,count_RTL)) %>%
mutate(count_survived = count_total-count_RTL) %>%
mutate(count_survived = if_else(is.na(count_survived),0,count_survived)) %>%
select(!count_total) %>%
pivot_longer(count_RTL:count_survived, names_to="label", values_to="count") %>%
ggplot(., aes(x=CBASS_temp, y=count, fill = label)) +
geom_col() +
theme_classic() +
scale_fill_manual(labels=c("RTL", "Survived"), values = c("black", "grey"))  +
theme(text = element_text(size = 12)) +
facet_wrap(~Species*Treatment, scales = "free_x") +
labs(y="Count", fill = "Category")
library(tidyverse)
library(janitor)
library(rstatix)
library(cowplot)
metadata <- readxl::read_xlsx("../metadata.xlsx")
metadata %>%
mutate(Treatment = case_when(Treatment_Tank == "1" ~ "Untreated",
Treatment_Tank == "2" ~ "Treated",
Treatment_Tank == "3" ~ "Treated",
Treatment_Tank == "4" ~ "Untreated",
Treatment_Tank == "5" ~ "Treated",
Treatment_Tank == "6" ~ "Untreated",
Treatment_Tank == "7" ~ "Untreated",
Treatment_Tank == "8" ~ "Treated")) %>%
mutate(CBASS_temp = case_when(CBASS_tank == "1" ~ "36",
CBASS_tank == "2" ~ "37",
CBASS_tank == "3" ~ "32",
CBASS_tank == "4" ~ "33",
CBASS_tank == "5" ~ "35",
CBASS_tank == "6" ~ "30",
CBASS_tank == "7" ~ "34",
CBASS_tank == "8" ~ "28")) -> tidy_metadata
metadata %>%
filter(is.na(Removed_Date)) #71 corals don't have a removed date
metadata %>%
filter(is.na(mortality_date)) #118 corals dont' have a mortality date
metadata %>%
filter(is.na(Removed_Date) & is.na(mortality_date)) #48 corals don't have either. But if they weren't assigned a heat-stress tank, that should indicate that they were removed/died before 06/15/2022
#chi squared test for comparing mortality numbers
tidy_metadata %>%
dplyr::filter(!Removed_Date <= "2022-04-20" | is.na(Removed_Date)) %>% #remove everything that was removed before CBASS so you only account for RTL due to CBASS
group_by(Species, Treatment) %>%
summarize(count_total = n()) %>%
full_join(., RTL_species_treatment_count) %>%
mutate(count_survived = count_total-count_RTL) %>%
select(!count_total) %>%
unite("Species.Treatment", Species,Treatment, sep = ".") %>%
column_to_rownames(var="Species.Treatment") %>%
as.data.frame() %>%
chisq_test() #not significant
#proportion of corals that died during/post-CBASS versus the total number of corals that went into the CBASS
tidy_metadata %>%
dplyr::filter(Removed_Date >= "2022-04-21" & Removed_Date <= "2022-04-25") %>%
mutate(Reason_removed = case_when(Reason_removed == "dead" ~ "RTL",
Reason_removed == "post-CBASS RTL" ~ "RTL",
Reason_removed == "RTL" ~ "RTL")) %>%
drop_na(Species, Treatment) %>%
group_by(Species, Treatment) %>%
summarize(count_RTL = n()) -> RTL_species_treatment_count
tidy_metadata %>%
dplyr::filter(Removed_Date >= "2022-04-21" & Removed_Date <= "2022-04-25") %>%
mutate(Reason_removed = case_when(Reason_removed == "dead" ~ "RTL",
Reason_removed == "post-CBASS RTL" ~ "RTL",
Reason_removed == "RTL" ~ "RTL")) %>%
drop_na(Species, Treatment) %>%
group_by(Species, Treatment, CBASS_temp) %>%
summarize(count_RTL = n()) -> RTL_species_treatment_CBASStemps
#chi squared test for comparing mortality numbers
tidy_metadata %>%
dplyr::filter(!Removed_Date <= "2022-04-20" | is.na(Removed_Date)) %>% #remove everything that was removed before CBASS so you only account for RTL due to CBASS
group_by(Species, Treatment) %>%
summarize(count_total = n()) %>%
full_join(., RTL_species_treatment_count) %>%
mutate(count_survived = count_total-count_RTL) %>%
select(!count_total) %>%
unite("Species.Treatment", Species,Treatment, sep = ".") %>%
column_to_rownames(var="Species.Treatment") %>%
as.data.frame() %>%
chisq_test() #not significant
tidy_metadata %>%
dplyr::filter(!Removed_Date <= "2022-04-20" | is.na(Removed_Date)) %>% #remove everything that was removed before CBASS so you only account for RTL due to CBASS
group_by(Species, Treatment,CBASS_temp) %>%
summarize(count_total = n()) %>%
drop_na(CBASS_temp) %>%
full_join(., RTL_species_treatment_CBASStemps) %>%
mutate(count_RTL = if_else(is.na(count_RTL),0,count_RTL)) %>%
mutate(count_survived = count_total-count_RTL) %>%
select(!count_total) %>%
unite("Species.Treatment.CBASS_temp", Species,Treatment,CBASS_temp, sep = ".") %>%
column_to_rownames(var="Species.Treatment.CBASS_temp") %>%
as.data.frame() %>%
pairwise_prop_test() #%>%
