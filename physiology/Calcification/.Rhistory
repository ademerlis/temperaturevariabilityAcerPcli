mutate(Days_from_start = as.numeric(Date - as.Date("2022-03-10"))) -> Pcli_tidydata
Pcli_tidydata
Pcli_model <- lmer(mean_Rintensity_percoral ~ Treatment*Colony*Days_from_start + (1|Treatment_Tank/ID), data = Pcli_tidydata)
summary(Pcli_model)
anova(Pcli_model)
Anova(Pcli_model, type = "II", test.statistic = "F")
x = residuals(Pcli_model)
plot(fitted(Pcli_model), x)
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
Anova(Pcli_model, , type = "II", test.statistic = "F")
Anova(Pcli_model, type = "II", test.statistic = "F")
capture.output(Anova(Pcli_model, type = "II", test.statistic = "F"), file = "Pcli_colorscore_model_ANOVA.csv")
#colony + treatment
Acer_emms <- emmeans(Acer_model, pairwise ~ Treatment*Colony*Days_from_start, weights = "proportional", adjust="none")
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
#colony + treatment
Acer_emms <- emmeans(Acer_model, pairwise ~ Treatment*Colony, weights = "proportional", adjust="none")
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
summary(glht(Acer_model, linfct=mcp(Treatment="Tukey")), test = adjusted(type = "bonferroni"))
Anova(Pcli_model, type = "II", test.statistic = "F")
Anova(Acer_model, type = "II", test.statistic = "F")
#colony + treatment
Acer_emms <- emmeans(Acer_model, pairwise ~ Treatment, weights = "proportional", adjust="none")
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
#colony + treatment
Acer_emms <- emmeans(Acer_model, pairwise ~ Treatment*Colony*Days_from_start, adjust="none")
#colony + treatment
Acer_emms <- emmeans(Acer_model, pairwise ~ Treatment*Colony*Days_from_start)
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
#colony + treatment
Acer_emms <- emmeans(Acer_model, pairwise ~ Treatment*Colony)
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
summary(glht::glht(Acer_model, linfct=mcp(Treatment="Tukey")), test = adjusted(type = "bonferroni"))
summary(multcomp::glht(Acer_model, linfct=mcp(Treatment="Tukey")), test = adjusted(type = "bonferroni"))
summary(multcomp::glht(Acer_model, linfct=multcomp::mcp(Treatment="Tukey")), test = adjusted(type = "bonferroni"))
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
summary(Acer_model)
Rintensity_tidydata %>%
filter(Species == "Acropora cervicornis") -> Acer_tidydata
Acer_tidydata
Acer_tidydata %>%
mutate(time_point = case_when(Date < as.Date("2022-03-30") ~ "T0",
Date > as.Date("2022-04-17") ~ "T1")) -> Acer_tidydata
Acer_tidydata
Rintensity_tidydata %>%
filter(Species == "Pseudodiploria clivosa") %>%
mutate(time_point = case_when(Date < as.Date("2022-03-30") ~ "T0",
Date > as.Date("2022-04-17") ~ "T1")) -> Pcli_tidydata
#repeated measures -- include ID in the formula as a random effect
Acer_model <- lmer(mean_Rintensity_percoral ~ Treatment*Colony*time_point + (1|Treatment_Tank) + (1|ID), data = Acer_tidydata)
summary(Acer_model)
Anova(Acer_model, type = "II", test.statistic = "F")
Pcli_model <- lmer(mean_Rintensity_percoral ~ Treatment*Colony*time_point + (1|Treatment_Tank/ID), data = Pcli_tidydata)
summary(Pcli_model)
Anova(Pcli_model, type = "II", test.statistic = "F")
x = residuals(Acer_model)
plot(fitted(Acer_model), x)
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
Anova(Acer_model, type = "II", test.statistic = "F")
capture.output(Anova(Acer_model, type = "II", test.statistic = "F"), file = "Acer_colorscore_model_ANOVA.csv")
capture.output(Anova(Pcli_model, type = "II", test.statistic = "F"), file = "Pcli_colorscore_model_ANOVA.csv")
#colony + treatment
Acer_emms <- emmeans(Acer_model, pairwise ~ Treatment*Colony*time_point, weights = "proportional", adjust="none")
#colony + treatment
Acer_emms <- emmeans(Acer_model,  ~ Treatment*Colony*time_point, weights = "proportional", adjust="none")
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
Acer_emms
#colony + treatment
Acer_emms <- emmeans(Acer_model, pairwise ~ Treatment*Colony*time_point, weights = "proportional", adjust="none")
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
capture.output(rbind(Acer_emms$contrasts), file = "Acer_bw_Tukey_colonytreatmenttimepoint.csv")
#colony + treatment + timepoint
Pcli_emms <- emmeans(Pcli_model, pairwise ~ Treatment*Colony*time_point, weights = "proportional", adjust="none")
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
# P.value adjustment of the Bonferroni
rbind(Pcli_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
capture.output(rbind(Pcli_emms$contrasts), file = "Acer_bw_Tukey_colonytreatmenttimepoint.csv")
capture.output(rbind(Acer_emms$contrasts), file = "Acer_Tukey_colonytreatmenttimepoint.csv")
capture.output(rbind(Pcli_emms$contrasts), file = "Pcli_colonytreatmenttimepoint.csv")
library(tidyverse)
library(gsw) #for density calculation
library(rstatix)
library(ggsignif)
library(dunn.test)
library(cowplot)
library(plotrix)
library(FSA) #for Summarize
library(lme4)
library(car)
library(MASS)
library(emmeans)
metadata <- read_csv("../metadata.csv")
buoyantweights<- metadata %>%
dplyr::select(Species, ID, Colony, Treatment, Treatment_Tank, Bw_initial_raw_mass:bw_final_temp) %>%
drop_na(Treatment)
#sample size
buoyantweights %>%
drop_na(bw_final_raw_mass) %>%
group_by(Species, Colony, Treatment) %>%
summarise(count = n())
#the final time point sample sizes are much lower because I didn't buoyant weigh any corals that got tissue sampled or FACS run (N=69 corals)
#determining seawater density using temperature and salinity (from Patrick Kiel's code)
#general equation:gsw_rho_t_exact(SA = salinity, t = temp,p = 10.1325)/1000
#initial and final corrected buoyant weight calculations
buoyantweights %>%
group_by(Species, ID, Treatment, bw_initial_date) %>%
mutate(SWrho_initial = gsw_rho_t_exact(SA = `bw_initial_salinity (ppt)`,
t = bw_initial_temp,
p = 10.1325)/1000) %>%
mutate(CalcMAir_initial = Bw_initial_raw_mass/(1-SWrho_initial/2.93)) %>%  #2.93 is the density of solid aragonite
ungroup() %>%
group_by(Species, ID, Treatment, bw_final_date) %>%
mutate(SWrho_final = gsw_rho_t_exact(SA = bw_final_salinity,
t = bw_final_temp,
p = 10.1325)/1000) %>%
mutate(CalcMAir_final = bw_final_raw_mass/(1-SWrho_final/2.93)) %>%
filter(!(Species == "Acropora cervicornis" & ID == "94")) %>% #drop this one sample because it was tissue sampled
ungroup() %>%
mutate(percent_change = ((CalcMAir_final - CalcMAir_initial)/ CalcMAir_initial)*100) %>%
drop_na() -> calc_bw_bothspecies_bothtimepoints
#write_csv(calc_bw_bothspecies_bothtimepoints, file = "calc_bw_bothspecies_bothtimepoints.csv")
str(calc_bw_bothspecies_bothtimepoints)
#make factors: Colony, Puck, Tank, Treatment, Species
calc_bw_bothspecies_bothtimepoints %>%
mutate_at(vars(Colony, ID, Treatment_Tank, Treatment, Species), factor) -> calc_bw_bothspecies_bothtimepoints
calc_bw_bothspecies_bothtimepoints %>%
filter(Species == "Acropora cervicornis") -> Acer_calc_bw
calc_bw_bothspecies_bothtimepoints %>%
filter(Species == "Pseudodiploria clivosa") -> Pcli_calc_bw
calc_bw_bothspecies_bothtimepoints %>%
dplyr::select(Species:Treatment_Tank, CalcMAir_initial, CalcMAir_final) %>%
pivot_longer(CalcMAir_initial:CalcMAir_final, names_to = "timepoint", values_to = "mass") %>%
mutate(timepoint = case_when(timepoint == "CalcMAir_initial" ~ "0",
timepoint == "CalcMAir_final" ~ "28")) %>%
ggplot(., aes(x=timepoint, y = mass, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
facet_wrap(~Species)
calc_bw_bothspecies_bothtimepoints %>%
dplyr::select(Species:Treatment_Tank, CalcMAir_initial, CalcMAir_final) %>%
pivot_longer(CalcMAir_initial:CalcMAir_final, names_to = "timepoint", values_to = "mass") %>%
mutate(timepoint = case_when(timepoint == "CalcMAir_initial" ~ "0",
timepoint == "CalcMAir_final" ~ "28")) %>%
ggplot(., aes(x=timepoint, y = mass, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
facet_wrap(~Species, ncol = 1)
calc_bw_bothspecies_bothtimepoints %>%
dplyr::select(Species:Treatment_Tank, CalcMAir_initial, CalcMAir_final) %>%
pivot_longer(CalcMAir_initial:CalcMAir_final, names_to = "timepoint", values_to = "mass") %>%
mutate(timepoint = case_when(timepoint == "CalcMAir_initial" ~ 0,
timepoint == "CalcMAir_final" ~ 28)) %>%
ggplot(., aes(x=timepoint, y = mass, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
facet_wrap(~Species, ncol = 1)
calc_bw_bothspecies_bothtimepoints %>%
dplyr::select(Species:Treatment_Tank, CalcMAir_initial, CalcMAir_final) %>%
pivot_longer(CalcMAir_initial:CalcMAir_final, names_to = "timepoint", values_to = "mass") %>%
mutate(timepoint = case_when(timepoint == "CalcMAir_initial" ~ 0,
timepoint == "CalcMAir_final" ~ 28)) %>%
ggplot(., aes(x=timepoint, y = mass, fill = Treatment)) +
geom_point() +
theme_classic() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
facet_wrap(~Species, ncol = 1)
calc_bw_bothspecies_bothtimepoints %>%
dplyr::select(Species:Treatment_Tank, CalcMAir_initial, CalcMAir_final) %>%
pivot_longer(CalcMAir_initial:CalcMAir_final, names_to = "timepoint", values_to = "mass") %>%
mutate(timepoint = case_when(timepoint == "CalcMAir_initial" ~ 0,
timepoint == "CalcMAir_final" ~ 28)) %>%
ggplot(., aes(x=timepoint, y = mass, color = Treatment)) +
geom_point() +
theme_classic() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
facet_wrap(~Species, ncol = 1)
calc_bw_bothspecies_bothtimepoints %>%
dplyr::select(Species:Treatment_Tank, CalcMAir_initial, CalcMAir_final) %>%
pivot_longer(CalcMAir_initial:CalcMAir_final, names_to = "timepoint", values_to = "mass") %>%
mutate(timepoint = case_when(timepoint == "CalcMAir_initial" ~ 0,
timepoint == "CalcMAir_final" ~ 28)) %>%
ggplot(., aes(x=timepoint, y = mass, color = Treatment)) +
geom_point() +
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
facet_wrap(~Species, ncol = 1)
calc_bw_bothspecies_bothtimepoints %>%
dplyr::select(Species:Treatment_Tank, CalcMAir_initial, CalcMAir_final) %>%
pivot_longer(CalcMAir_initial:CalcMAir_final, names_to = "timepoint", values_to = "mass") %>%
mutate(timepoint = case_when(timepoint == "CalcMAir_initial" ~ 0,
timepoint == "CalcMAir_final" ~ 28)) %>%
ggplot(., aes(x=timepoint, y = mass, color = Treatment)) +
geom_point() +
geom_line() +
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
facet_wrap(~Species, ncol = 1)
calc_bw_bothspecies_bothtimepoints %>%
dplyr::select(Species:Treatment_Tank, CalcMAir_initial, CalcMAir_final) %>%
pivot_longer(CalcMAir_initial:CalcMAir_final, names_to = "timepoint", values_to = "mass") %>%
mutate(timepoint = case_when(timepoint == "CalcMAir_initial" ~ 0,
timepoint == "CalcMAir_final" ~ 28)) %>%
ggplot(., aes(x=timepoint, y = mass, color = Treatment)) +
geom_point() +
geom_smooth() +
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
facet_wrap(~Species, ncol = 1)
calc_bw_bothspecies_bothtimepoints %>%
dplyr::select(Species:Treatment_Tank, CalcMAir_initial, CalcMAir_final) %>%
pivot_longer(CalcMAir_initial:CalcMAir_final, names_to = "timepoint", values_to = "mass") %>%
mutate(timepoint = case_when(timepoint == "CalcMAir_initial" ~ 0,
timepoint == "CalcMAir_final" ~ 28)) %>%
ggplot(., aes(x=timepoint, y = mass, color = Treatment)) +
geom_point() +
geom_smooth(method="lm") +
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
facet_wrap(~Species, ncol = 1)
plot1 <- Pcli_calc_bw_clean %>%
dplyr::select(!percent_change_transformed) %>%
rbind(., Acer_calc_bw_noout) %>%
ggplot(., aes(x=Species, y = percent_change, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))  +
theme(text = element_text(size = 15)) +
labs(y= "% Growth") +
theme(legend.position="none")
#summary
Summarize(percent_change~Treatment*Colony, data=Acer_calc_bw, digits=3)
Summarize(percent_change~Treatment*Colony, data=Pcli_calc_bw, digits=3)
Acer_bw_model <- lmer(percent_change ~ Treatment*Colony + (1|Treatment_Tank), data = Acer_calc_bw)
summary(Acer_bw_model)
anova(Acer_bw_model)
Pcli_bw_model <- lmer(percent_change ~ Treatment*Colony + (1|Treatment_Tank), data = Pcli_calc_bw)
summary(Pcli_bw_model)
anova(Pcli_bw_model)
x = residuals(Acer_bw_model)
plot(fitted(Acer_bw_model), x)
leveneTest(x ~ Treatment*Colony, data=Acer_calc_bw, center=mean) # formal statistical test for homogenity of variance #not significant
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
shapiro.test(x) # formal statistical test  -- significant aka not normal
car::outlierTest(Acer_bw_model) #row 27
Acer_calc_bw[-27, ] -> Acer_calc_bw_noout
Acer_bw_model_2 <- lmer(percent_change ~ Treatment*Colony + (1|Treatment_Tank), data = Acer_calc_bw_noout)
x = residuals(Acer_bw_model_2)
plot(fitted(Acer_bw_model_2), x)
leveneTest(x ~ Treatment*Colony, data=Acer_calc_bw_noout, center=mean) # formal statistical test for homogenity of variance #not significant
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
shapiro.test(x) # formal statistical test
# Acer data meets assumptions, yay
Anova(Acer_bw_model_2,  type = "II", test.statistic = "F") #you need to manually specify Satterthwaite's method, because otherwise it will give you the Wald/Chi-squared approximation and that is only appropriate for binomial or poisson distributions. Satterthwaite's method is for normal/gaussian
capture.output(Anova(Acer_bw_model_2,  type = "II", test.statistic = "F"), file = "Acer_bw_model_ANOVA.csv")
x = residuals(Pcli_bw_model)
plot(fitted(Pcli_bw_model), x)
leveneTest(x ~ Treatment*Colony, data=Pcli_calc_bw, center=mean) # formal statistical test for homogeneity of variance #not significant
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
shapiro.test(x) # formal statistical test
# Perform Bonferroni outlier test
bonf_outliers <- outlierTest(Pcli_bw_model, cutoff = Inf, n.max = Inf)
# View all potential outliers identified with Bonferroni correction
bonf_outliers #rows 37, 63, and 54
# Indices of the rows to remove
rows_to_remove <- c(37, 63, 54)
# Remove these rows
Pcli_calc_bw_clean <- Pcli_calc_bw[-rows_to_remove, ]
Pcli_bw_model_2 <- lmer(percent_change ~ Treatment*Colony + (1|Treatment_Tank), data = Pcli_calc_bw_clean)
x = residuals(Pcli_bw_model_2)
plot(fitted(Pcli_bw_model_2), x)
leveneTest(x ~ Treatment*Colony, data=Pcli_calc_bw_clean, center=mean) # formal statistical test for homogenity of variance #not significant
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
shapiro.test(x) # formal statistical test -- good enough (i tried every possible transformation and outlier filter combination and this was the best result)
Anova(Pcli_bw_model_2, type = "II", test.statistic = "F") #you need to manually specify Satterthwaite's method, because otherwise it will give you the Wald/Chi-squared approximation and that is only appropriate for binomial or poisson distributions. Satterthwaite's method is for normal/gaussian
capture.output(Anova(Pcli_bw_model_2, type = "II", test.statistic = "F"), file = "Pcli_bw_model_ANOVA.csv")
plot1 <- Pcli_calc_bw_clean %>%
dplyr::select(!percent_change_transformed) %>%
rbind(., Acer_calc_bw_noout) %>%
ggplot(., aes(x=Species, y = percent_change, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))  +
theme(text = element_text(size = 15)) +
labs(y= "% Growth") +
theme(legend.position="none")
Pcli_calc_bw_clean
Pcli_calc_bw_clean %>%
rbind(., Acer_calc_bw_noout) %>%
ggplot(., aes(x=Species, y = percent_change, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))  +
theme(text = element_text(size = 15)) +
labs(y= "% Growth") +
theme(legend.position="none")
Pcli_calc_bw_clean %>%
rbind(., Acer_calc_bw_noout) %>%
ggplot(., aes(x=Species, y = percent_change, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))  +
theme(text = element_text(size = 15)) +
labs(y= "% Growth") +
theme(legend.position="none") +
facet_wrap(~Species, ncol = 1)
Pcli_calc_bw_clean %>%
rbind(., Acer_calc_bw_noout) %>%
ggplot(., aes(x=Species, y = percent_change, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))  +
theme(text = element_text(size = 15)) +
labs(y= "% Growth") +
theme(legend.position="none") +
facet_wrap(~Species, ncol = 1, scales = "free_x")
plot1 <- Pcli_calc_bw_clean %>%
rbind(., Acer_calc_bw_noout) %>%
ggplot(., aes(x=Species, y = percent_change, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))  +
theme(text = element_text(size = 15)) +
labs(y= "% Growth") +
theme(legend.position="none") +
facet_wrap(~Species, ncol = 1, scales = "free_x")
Pcli_calc_bw_clean %>%
dplyr::select(!percent_change_transformed) %>%
rbind(., Acer_calc_bw_noout) %>%
ggplot(., aes(x=Colony, y = percent_change, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
facet_wrap(~Species, scales="free_x") +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))  +
theme(text = element_text(size = 15)) +
labs(y= "% Growth")
Pcli_calc_bw_clean %>%
rbind(., Acer_calc_bw_noout) %>%
ggplot(., aes(x=Colony, y = percent_change, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
facet_wrap(~Species, scales="free_x") +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))  +
theme(text = element_text(size = 15)) +
labs(y= "% Growth")
Pcli_calc_bw_clean %>%
rbind(., Acer_calc_bw_noout) %>%
ggplot(., aes(x=Colony, y = percent_change, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
facet_wrap(~Species, scales="free_x", ncol = 1) +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))  +
theme(text = element_text(size = 15)) +
labs(y= "% Growth")
plot2 <- Pcli_calc_bw_clean %>%
rbind(., Acer_calc_bw_noout) %>%
ggplot(., aes(x=Colony, y = percent_change, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
facet_wrap(~Species, scales="free_x", ncol = 1) +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))  +
theme(text = element_text(size = 15)) +
labs(y= "% Growth")
plot_grid(plot1, plot2, ncol = 2, rel_widths = c(1, 2))
ggsave("growthrates_species_genet_boxplot.pdf", width = 12, height = 5)
#Acropora_023112 = histone H2A l2fc 1.48
t(vsd) %>%
as.data.frame() %>%
dplyr::select(Acropora_023112) %>%
rownames_to_column() %>%
separate(rowname, into = c("Sample_ID", "Genotype", "Expression", "Treatment"), sep ="_") %>%
unite("Genotype", Genotype,Expression, sep = "_") %>%
mutate(Day = case_when(Treatment == "Initial" ~ 0,
Treatment == "Treated" ~ 28,
Treatment == "Untreated" ~ 28)) %>%
dplyr::select(!Treatment) %>%
full_join(., metadata) %>%
drop_na() %>%
group_by(Day, Treatment) %>%
mutate(mean_expression = mean(Acropora_023112), se = standard_error(Acropora_023112)) %>%
ggplot(., aes(x=Day, y=mean_expression, color = Treatment, fill = Treatment, shape = Genotype)) +
geom_point() +
geom_line() +
theme_classic()
library(tidyverse)
library(gsw) #for density calculation
library(rstatix)
library(ggsignif)
library(dunn.test)
library(cowplot)
library(plotrix)
library(FSA) #for Summarize
library(lme4)
library(car)
library(MASS)
library(emmeans)
metadata <- read_csv("../metadata.csv")
buoyantweights<- metadata %>%
dplyr::select(Species, ID, Colony, Treatment, Treatment_Tank, Bw_initial_raw_mass:bw_final_temp) %>%
drop_na(Treatment)
#sample size
buoyantweights %>%
drop_na(bw_final_raw_mass) %>%
group_by(Species, Colony, Treatment) %>%
summarise(count = n())
#the final time point sample sizes are much lower because I didn't buoyant weigh any corals that got tissue sampled or FACS run (N=69 corals)
metadata <- read_csv("../metadata.csv")
library(tidyverse)
library(gsw) #for density calculation
library(rstatix)
library(cowplot)
library(plotrix)
metadata <- read_csv("../metadata.csv")
buoyantweights<- metadata %>%
dplyr::select(Species, ID, Colony, Treatment, Treatment_Tank, Bw_initial_raw_mass:bw_final_temp) %>%
drop_na(Treatment)
#sample size
buoyantweights %>%
drop_na(bw_final_raw_mass) %>%
group_by(Species, Colony, Treatment) %>%
summarise(count = n())
#determining seawater density using temperature and salinity (from Patrick Kiel's code)
#general equation:gsw_rho_t_exact(SA = salinity, t = temp,p = 10.1325)/1000
#initial and final corrected buoyant weight calculations
buoyantweights %>%
group_by(Species, ID, Treatment, bw_initial_date) %>%
mutate(SWrho_initial = gsw_rho_t_exact(SA = `bw_initial_salinity (ppt)`,
t = bw_initial_temp,
p = 10.1325)/1000) %>%
mutate(CalcMAir_initial = Bw_initial_raw_mass/(1-SWrho_initial/2.93)) %>%  #2.93 is the density of solid aragonite
ungroup() %>%
group_by(Species, ID, Treatment, bw_final_date) %>%
mutate(SWrho_final = gsw_rho_t_exact(SA = bw_final_salinity,
t = bw_final_temp,
p = 10.1325)/1000) %>%
mutate(CalcMAir_final = bw_final_raw_mass/(1-SWrho_final/2.93)) %>%
filter(!(Species == "Acropora cervicornis" & ID == "94")) %>% #drop this one sample because it was tissue sampled
ungroup() %>%
mutate(percent_change = ((CalcMAir_final - CalcMAir_initial)/ CalcMAir_initial)*100) %>%
drop_na() -> calc_bw_bothspecies_bothtimepoints
#write_csv(calc_bw_bothspecies_bothtimepoints, file = "calc_bw_bothspecies_bothtimepoints.csv")
str(calc_bw_bothspecies_bothtimepoints)
#make factors: Colony, Puck, Tank, Treatment, Species
calc_bw_bothspecies_bothtimepoints %>%
mutate_at(vars(Colony, ID, Treatment_Tank, Treatment, Species), factor) -> calc_bw_bothspecies_bothtimepoints
calc_bw_bothspecies_bothtimepoints %>%
filter(Species == "Acropora cervicornis") -> Acer_calc_bw
calc_bw_bothspecies_bothtimepoints %>%
filter(Species == "Pseudodiploria clivosa") -> Pcli_calc_bw
calc_bw_bothspecies_bothtimepoints %>%
group_by(Treatment) %>%
ggplot(., aes(x=Species, y = percent_change, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))  +
theme(text = element_text(size = 15)) +
labs(y= "% Growth") +
theme(legend.position="none")
calc_bw_bothspecies_bothtimepoints %>%
group_by(Species, Treatment) %>%
summarise(mean = mean(percent_change), se = std.error(percent_change)) %>%
ggplot(., aes(x=Species, y = mean, fill = Treatment)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width =
.2, position=position_dodge(.9)) +
theme_classic() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))  +
theme(text = element_text(size = 15)) +
labs(y= "% Growth") +
theme(legend.position="none")
calc_bw_bothspecies_bothtimepoints %>%
group_by(Species, Colony, Treatment) %>%
summarise(mean = mean(percent_change), se = std.error(percent_change)) %>%
ggplot(., aes(x=Colony, y = mean, fill = Treatment)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width =
.2, position=position_dodge(.9)) +
theme_classic() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))  +
theme(text = element_text(size = 15)) +
labs(y= "% Growth") +
facet_wrap(~Species, scales = "free_x")
calc_bw_bothspecies_bothtimepoints
summary(aov(percent_change ~ Treatment, data = calc_bw_bothspecies_bothtimepoints[calc_bw_bothspecies_bothtimepoints$Species == "Acropora cervicornis", ])) #not significant
Acer_lm <- aov(percent_change ~ Treatment, data = calc_bw_bothspecies_bothtimepoints[calc_bw_bothspecies_bothtimepoints$Species == "Acropora cervicornis", ])
shapiro_test(Acer_lm$residuals) #not significant
leveneTest(percent_change ~ Treatment, data =calc_bw_bothspecies_bothtimepoints[calc_bw_bothspecies_bothtimepoints$Species == "Acropora cervicornis", ]) #not significant
library(car)
leveneTest(percent_change ~ Treatment, data = calc_bw_bothspecies_bothtimepoints[calc_bw_bothspecies_bothtimepoints$Species == "Acropora cervicornis", ]) #not significant
kruskal_test(calc_bw_bothspecies_bothtimepoints[calc_bw_bothspecies_bothtimepoints$Species == "Acropora cervicornis", ], percent_change ~ Treatment) #not significant
summary(aov(percent_change ~ Treatment, data = calc_bw_bothspecies_bothtimepoints[calc_bw_bothspecies_bothtimepoints$Species == "Pseudodiploria clivosa", ])) #not significant
Pcli_lm <- aov(percent_change ~ Treatment, data = calc_bw_bothspecies_bothtimepoints[calc_bw_bothspecies_bothtimepoints$Species == "Pseudodiploria clivosa", ])
shapiro_test(Pcli_lm$residuals) #significant
leveneTest(percent_change ~ Treatment, data = calc_bw_bothspecies_bothtimepoints[calc_bw_bothspecies_bothtimepoints$Species == "Pseudodiploria clivosa", ]) #not significant
kruskal_test(calc_bw_bothspecies_bothtimepoints[calc_bw_bothspecies_bothtimepoints$Species == "Pseudodiploria clivosa", ], percent_change ~ Treatment) #not significant
