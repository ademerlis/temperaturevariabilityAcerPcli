distinct() %>%
mutate(Date = as.Date(as.character(Date), format = "%Y-%m-%d")) %>%
mutate(Days_Relative = as.numeric(Date - as.Date("2022-03-24"))) -> Rintensity_tidydata
ggplot(Rintensity_tidydata, aes(x=Days_Relative, y=mean_Rintensity_percoral, color = Treatment)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Species,ncol = 1, nrow = 2) +
ylab("R Intensity")+
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(text = element_text(size = 15)) +
labs(x="Days in Treatment") +
theme(legend.position="none")
ggplot(Rintensity_tidydata, aes(x=Days_Relative, y=mean_Rintensity_percoral, color = Treatment)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Species,ncol = 1, nrow = 2) +
ylab("R Intensity")+
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(text = element_text(size = 15)) +
labs(x="Days in Treatment") +
theme(legend.position="none") +
scale_x_continuous(limits = c(-17, 25))
ggplot(Rintensity_tidydata, aes(x=Days_Relative, y=mean_Rintensity_percoral, color = Treatment)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Species,ncol = 1, nrow = 2) +
ylab("R Intensity")+
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(text = element_text(size = 15)) +
labs(x="Days in Treatment") +
theme(legend.position="none") +
scale_x_continuous(limits = c(-20, 30))
ggplot(Rintensity_tidydata, aes(x=Days_Relative, y=mean_Rintensity_percoral, color = Treatment)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Species,ncol = 1, nrow = 2) +
ylab("R Intensity")+
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(text = element_text(size = 15)) +
labs(x="Days in Treatment") +
theme(legend.position="none") +
scale_x_continuous(limits = c(-10, 20), breaks = seq(-10, 20, by = 5))
ggplot(Rintensity_tidydata, aes(x=Days_Relative, y=mean_Rintensity_percoral, color = Treatment)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Species,ncol = 1, nrow = 2) +
ylab("R Intensity")+
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(text = element_text(size = 15)) +
labs(x="Days in Treatment") +
theme(legend.position="none") +
scale_x_continuous(limits = c(-16, 30), breaks = seq(-10, 20, by = 5))
ggplot(Rintensity_tidydata, aes(x=Days_Relative, y=mean_Rintensity_percoral, color = Treatment)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Species,ncol = 1, nrow = 2) +
ylab("R Intensity")+
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(text = element_text(size = 15)) +
labs(x="Days in Treatment") +
theme(legend.position="none") +
scale_x_continuous(limits = c(-16, 30), breaks = seq(-15, 25, by = 5))
ggplot(Rintensity_tidydata, aes(x=Days_Relative, y=mean_Rintensity_percoral, color = Treatment)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Species,ncol = 1, nrow = 2) +
ylab("R Intensity")+
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(text = element_text(size = 15)) +
labs(x="Days in Treatment") +
theme(legend.position="none") +
scale_x_continuous(limits = c(-18, 30), breaks = seq(-15, 25, by = 5))
ggplot(Rintensity_tidydata, aes(x=Days_Relative, y=mean_Rintensity_percoral, color = Treatment)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Species,ncol = 1, nrow = 2) +
ylab("R Intensity")+
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(text = element_text(size = 15)) +
labs(x="Days in Treatment") +
theme(legend.position="none") +
scale_x_continuous(limits = c(-16, 30), breaks = seq(-15, 25, by = 5))
ggplot(Rintensity_tidydata, aes(x=Days_Relative, y=mean_Rintensity_percoral, color = Treatment)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Species,ncol = 1, nrow = 2) +
ylab("R Intensity")+
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(text = element_text(size = 15)) +
labs(x="Days in Treatment") +
theme(legend.position="none") +
scale_x_continuous(limits = c(-16, 25), breaks = seq(-15, 25, by = 5))
ggplot(Rintensity_tidydata, aes(x=Days_Relative, y=mean_Rintensity_percoral, color = Treatment)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Species+Colony,ncol = 1, nrow = 2) +
ylab("R Intensity")+
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(text = element_text(size = 15)) +
labs(x="Days in Treatment") +
theme(legend.position="none") +
scale_x_continuous(limits = c(-16, 25), breaks = seq(-15, 25, by = 5))
ggplot(Rintensity_tidydata, aes(x=Days_Relative, y=mean_Rintensity_percoral, color = Treatment)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Species+Colony) +
ylab("R Intensity")+
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(text = element_text(size = 15)) +
labs(x="Days in Treatment") +
theme(legend.position="none") +
scale_x_continuous(limits = c(-16, 25), breaks = seq(-15, 25, by = 5))
ggplot(Rintensity_tidydata, aes(x=Days_Relative, y=mean_Rintensity_percoral, color = Treatment)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Species+Colony) +
ylab("R Intensity")+
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(text = element_text(size = 15)) +
labs(x="Days in Treatment") +
scale_x_continuous(limits = c(-16, 25), breaks = seq(-15, 25, by = 5))
plot1<-ggplot(Rintensity_tidydata, aes(x=Days_Relative, y=mean_Rintensity_percoral, color = Treatment)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Species,ncol = 1, nrow = 2) +
ylab("R Intensity")+
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(text = element_text(size = 15)) +
labs(x="Days in Treatment") +
theme(legend.position="none") +
scale_x_continuous(limits = c(-16, 25), breaks = seq(-15, 25, by = 5))
plot2<-ggplot(Rintensity_tidydata, aes(x=Days_Relative, y=mean_Rintensity_percoral, color = Treatment)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Species+Colony) +
ylab("R Intensity")+
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(text = element_text(size = 15)) +
labs(x="Days in Treatment") +
scale_x_continuous(limits = c(-16, 25), breaks = seq(-15, 25, by = 5))
plot_grid(plot1, plot2, ncol = 2, rel_widths = c(1.5, 2))
ggsave("colorscore_species_genet.pdf", width = 10, height = 5)
plot_grid(plot1, plot2, ncol = 2, rel_widths = c(1, 2))
ggsave("colorscore_species_genet.pdf", width = 12, height = 5)
plot_grid(plot1, plot2, ncol = 2, rel_widths = c(1, 2))
ggsave("colorscore_species_genet.pdf", width = 14, height = 5)
plot_grid(plot1, plot2, ncol = 2, rel_widths = c(1, 2.3))
ggsave("colorscore_species_genet.pdf", width = 12, height = 5)
plot_grid(plot1, plot2, ncol = 2, rel_widths = c(1, 2.3))
ggsave("colorscore_species_genet.pdf", width = 13, height = 5)
Rintensity_tidydata %>%
filter(Species == "Acropora cervicornis")
Rintensity_tidydata %>%
filter(Species == "Acropora cervicornis") -> Acer_tidydata
Rintensity_tidydata %>%
filter(Species == "Pseudodiploria clivosa") -> Pcli_tidydata
library(FSA) #for Summarize
library(lme4)
library(car)
library(MASS)
library(emmeans)
Acer_tidydata
#summary
Summarize(mean_Rintensity_percoral~Treatment*Colony, data=Acer_tidydata, digits=3)
Summarize(mean_Rintensity_percoral~Treatment*Colony, data=Pcli_tidydata, digits=3)
Acer_model <- lmer(mean_Rintensity_percoral ~ Treatment*Colony + (1|Treatment_Tank), data = Acer_tidydata)
summary(Acer_model)
Acer_tidydata
Acer_model <- lmer(mean_Rintensity_percoral ~ Treatment*Colony*Days_Relative + (1|Treatment_Tank), data = Acer_tidydata)
summary(Acer_model)
anova(Acer_model)
Acer_model <- lmer(mean_Rintensity_percoral ~ Treatment*Colony*Days_Relative + (1|Treatment_Tank) + (1|ID), data = Acer_tidydata)
summary(Acer_model)
anova(Acer_model)
Acer_model <- lmer(mean_Rintensity_percoral ~ Treatment*Colony*Days_Relative + (1|Treatment_Tank/ID), data = Acer_tidydata)
summary(Acer_model)
anova(Acer_model)
anova(Acer_model)
Pcli_model <- lmer(mean_Rintensity_percoral ~ Treatment*Colony*Days_Relative + (1|Treatment_Tank/ID), data = Pcli_tidydata)
summary(Pcli_model)
anova(Pcli_model)
x = residuals(Acer_model)
plot(fitted(Acer_model), x)
leveneTest(x ~ Treatment*Colony*Relative_Date, data=Acer_tidydata, center=mean) # formal statistical test for homogenity of variance #not significant
leveneTest(x ~ Treatment*Colony*Days_Relative, data=Acer_tidydata, center=mean) # formal statistical test for homogenity of variance #not significant
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
Anova(Acer_model)
capture.output(Anova(Acer_model), file = "Acer_colorscore_model_ANOVA.csv")
x = residuals(Pcli_model)
plot(fitted(Pcli_model), x)
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
Anova(Pcli_model)
capture.output(Anova(Pcli_model), file = "Pcli_colorscore_model_ANOVA.csv")
#colony + treatment
bw_Acer_emms <- emmeans(Acer_model, pairwise ~ Colony*Treatment*Days_Relative, weights = "proportional", adjust="none")
#colony + treatment
Acer_emms <- emmeans(Acer_model, pairwise ~ Colony*Treatment*Days_Relative, weights = "proportional", adjust="none")
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
#colony + treatment
Acer_emms <- emmeans(Acer_model, pairwise ~ Colony*Treatment, weights = "proportional", adjust="none")
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
#colony + treatment
Acer_emms <- emmeans(Acer_model, pairwise ~ Colony*Treatment, weights = "proportional", adjust="Tukey")
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
Acer_tidydata <- Acer_tidydata %>%
mutate(Days_Relative_Scaled = scale(Days_Relative))
#repeated measures -- include ID in the formula as a random effect
Acer_model <- lmer(mean_Rintensity_percoral ~ Treatment*Colony*Days_Relative_Scaled + (1|Treatment_Tank) + (1|ID), data = Acer_tidydata)
summary(Acer_model)
anova(Acer_model)
x = residuals(Acer_model)
plot(fitted(Acer_model), x)
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
Anova(Acer_model)
#colony + treatment
Acer_emms <- emmeans(Acer_model, pairwise ~ Colony*Treatment, weights = "proportional", adjust="none")
#colony + treatment
Acer_emms <- emmeans(Acer_model, pairwise ~ Colony*Treatment*Days_Relative_Scaled, weights = "proportional", adjust="none")
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
#colony + treatment
Acer_emms <- emmeans(Acer_model, pairwise ~ Colony*Treatment|Days_Relative_Scaled, weights = "proportional", adjust="none")
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
Acer_model
#colony + treatment
Acer_emms <- emmeans(Acer_model, pairwise ~ Treatment|Days_Relative_Scaled, weights = "proportional", adjust="none")
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
plot_grid(plot1, plot2, ncol = 2, rel_widths = c(1, 2.3))
plot1<-ggplot(Rintensity_tidydata, aes(x=Days_Relative, y=mean_Rintensity_percoral, color = Treatment)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Species,ncol = 1, nrow = 2) +
ylab("R Intensity")+
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(text = element_text(size = 15)) +
labs(x="Days in Treatment") +
theme(legend.position="none") +
scale_x_continuous(limits = c(-16, 25), breaks = seq(-15, 25, by = 10))
plot2<-ggplot(Rintensity_tidydata, aes(x=Days_Relative, y=mean_Rintensity_percoral, color = Treatment)) +
geom_point(alpha = 0.1) +
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~Species+Colony) +
ylab("R Intensity")+
theme_classic() +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(text = element_text(size = 15)) +
labs(x="Days in Treatment") +
scale_x_continuous(limits = c(-16, 25), breaks = seq(-15, 25, by = 10))
plot_grid(plot1, plot2, ncol = 2, rel_widths = c(1, 2.3))
ggsave("colorscore_species_genet.pdf", width = 12, height = 5)
plot_grid(plot1, plot2, ncol = 2, rel_widths = c(1, 2.3))
Rintensity_tidydata %>%
filter(Species == "Acropora cervicornis") -> Acer_tidydata
Acer_tidydata
Acer_tidydata %>%
mutate(Days_from_start = as.numeric(Date - as.Date("2022-03-08")))
Acer_tidydata %>%
mutate(Days_from_start = as.numeric(Date - as.Date("2022-03-08"))) -> Acer_tidydata
#summary
Summarize(mean_Rintensity_percoral~Treatment*Colony*Days_from_start, data=Acer_tidydata, digits=3)
#summary
Summarize(mean_Rintensity_percoral~Treatment*Colony, data=Acer_tidydata, digits=3)
#repeated measures -- include ID in the formula as a random effect
Acer_model <- lmer(mean_Rintensity_percoral ~ Treatment*Colony*Days_from_start + (1|Treatment_Tank) + (1|ID), data = Acer_tidydata)
summary(Acer_model)
anova(Acer_model)
anova(Acer_model, type = "II")
Anova(Acer_model, type = "II")
aoc(Acer_model, type = "II")
aov(Acer_model, type = "II")
anova(Acer_model, type = "II")
sumary(anova(Acer_model))
summary(anova(Acer_model))
anova(Acer_model)
lmerTest::anova(Acer_model)
lmerTest::rand(Acer_model)
lmerTest::ranova(Acer_model)
Anova(Acer_model, type = "II", test.statistic = "F")
library(tidyverse)
library(gsw) #for density calculation
library(rstatix)
library(ggsignif)
library(dunn.test)
library(cowplot)
library(plotrix)
library(FSA) #for Summarize
library(lme4)
library(car)
library(MASS)
library(emmeans)
metadata <- read_csv("../metadata.csv")
buoyantweights<- metadata %>%
dplyr::select(Species, ID, Colony, Treatment, Treatment_Tank, Bw_initial_raw_mass:bw_final_temp) %>%
drop_na(Treatment)
#sample size
buoyantweights %>%
drop_na(bw_final_raw_mass) %>%
group_by(Species, Colony, Treatment) %>%
summarise(count = n())
#the final time point sample sizes are much lower because I didn't buoyant weigh any corals that got tissue sampled or FACS run (N=69 corals)
#determining seawater density using temperature and salinity (from Patrick Kiel's code)
#general equation:gsw_rho_t_exact(SA = salinity, t = temp,p = 10.1325)/1000
#initial and final corrected buoyant weight calculations
buoyantweights %>%
group_by(Species, ID, Treatment, bw_initial_date) %>%
mutate(SWrho_initial = gsw_rho_t_exact(SA = `bw_initial_salinity (ppt)`,
t = bw_initial_temp,
p = 10.1325)/1000) %>%
mutate(CalcMAir_initial = Bw_initial_raw_mass/(1-SWrho_initial/2.93)) %>%  #2.93 is the density of solid aragonite
ungroup() %>%
group_by(Species, ID, Treatment, bw_final_date) %>%
mutate(SWrho_final = gsw_rho_t_exact(SA = bw_final_salinity,
t = bw_final_temp,
p = 10.1325)/1000) %>%
mutate(CalcMAir_final = bw_final_raw_mass/(1-SWrho_final/2.93)) %>%
filter(!(Species == "Acropora cervicornis" & ID == "94")) %>% #drop this one sample because it was tissue sampled
ungroup() %>%
mutate(percent_change = ((CalcMAir_final - CalcMAir_initial)/ CalcMAir_initial)*100) %>%
drop_na() -> calc_bw_bothspecies_bothtimepoints
#write_csv(calc_bw_bothspecies_bothtimepoints, file = "calc_bw_bothspecies_bothtimepoints.csv")
str(calc_bw_bothspecies_bothtimepoints)
#make factors: Colony, Puck, Tank, Treatment, Species
calc_bw_bothspecies_bothtimepoints %>%
mutate_at(vars(Colony, ID, Treatment_Tank, Treatment, Species), factor) -> calc_bw_bothspecies_bothtimepoints
calc_bw_bothspecies_bothtimepoints %>%
filter(Species == "Acropora cervicornis") -> Acer_calc_bw
calc_bw_bothspecies_bothtimepoints %>%
filter(Species == "Pseudodiploria clivosa") -> Pcli_calc_bw
#summary
Summarize(percent_change~Treatment*Colony, data=Acer_calc_bw, digits=3)
Summarize(percent_change~Treatment*Colony, data=Pcli_calc_bw, digits=3)
Acer_bw_model <- lmer(percent_change ~ Treatment*Colony + (1|Treatment_Tank), data = Acer_calc_bw)
summary(Acer_bw_model)
anova(Acer_bw_model)
Pcli_bw_model <- lmer(percent_change ~ Treatment*Colony + (1|Treatment_Tank), data = Pcli_calc_bw)
summary(Pcli_bw_model)
anova(Pcli_bw_model)
x = residuals(Acer_bw_model)
plot(fitted(Acer_bw_model), x)
leveneTest(x ~ Treatment*Colony, data=Acer_calc_bw, center=mean) # formal statistical test for homogenity of variance #not significant
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
shapiro.test(x) # formal statistical test  -- significant aka not normal
car::outlierTest(Acer_bw_model) #row 27
Acer_calc_bw[-27, ] -> Acer_calc_bw_noout
Acer_bw_model_2 <- lmer(percent_change ~ Treatment*Colony + (1|Treatment_Tank), data = Acer_calc_bw_noout)
x = residuals(Acer_bw_model_2)
plot(fitted(Acer_bw_model_2), x)
leveneTest(x ~ Treatment*Colony, data=Acer_calc_bw_noout, center=mean) # formal statistical test for homogenity of variance #not significant
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
shapiro.test(x) # formal statistical test
# Acer data meets assumptions, yay
Anova(Acer_bw_model_2)
capture.output(Anova(Acer_bw_model_2), file = "Acer_bw_model_ANOVA.csv")
Anova(Acer_bw_model_2,  type = "II", test.statistic = "F")
capture.output(Anova(Acer_bw_model_2,  type = "II", test.statistic = "F"), file = "Acer_bw_model_ANOVA.csv")
x = residuals(Pcli_bw_model)
plot(fitted(Pcli_bw_model), x)
leveneTest(x ~ Treatment*Colony, data=Pcli_calc_bw, center=mean) # formal statistical test for homogeneity of variance #not significant
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
shapiro.test(x) # formal statistical test
# Perform Bonferroni outlier test
bonf_outliers <- outlierTest(Pcli_bw_model, cutoff = Inf, n.max = Inf)
# View all potential outliers identified with Bonferroni correction
bonf_outliers #rows 37, 63, and 54
# Indices of the rows to remove
rows_to_remove <- c(37, 63, 54)
# Remove these rows
Pcli_calc_bw_clean <- Pcli_calc_bw[-rows_to_remove, ]
Pcli_bw_model_2 <- lmer(percent_change ~ Treatment*Colony + (1|Treatment_Tank), data = Pcli_calc_bw_clean)
x = residuals(Pcli_bw_model_2)
plot(fitted(Pcli_bw_model_2), x)
leveneTest(x ~ Treatment*Colony, data=Pcli_calc_bw_clean, center=mean) # formal statistical test for homogenity of variance #not significant
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
shapiro.test(x) # formal statistical test -- good enough (i tried every possible transformation and outlier filter combination and this was the best result)
Anova(Pcli_bw_model_2, type = "II", test.statistic = "F") #you need to manually specify Satterthwaite's method, because otherwise it will give you the Wald/Chi-squared approximation and that is only appropriate for binomial or poisson distributions. Satterthwaite's method is for normal/gaussian
capture.output(Anova(Pcli_bw_model_2, type = "II", test.statistic = "F"), file = "Pcli_bw_model_ANOVA.csv")
Anova(Acer_model, type = "II", test.statistic = "F")
#repeated measures -- include ID in the formula as a random effect
Acer_model <- lmer(mean_Rintensity_percoral ~ Treatment*Colony + (1|Treatment_Tank) + (1|ID), data = Acer_tidydata)
summary(Acer_model)
Anova(Acer_model, type = "II", test.statistic = "F")
Acer_model <- lmer(mean_Rintensity_percoral ~ Treatment*Colony*Days_from_start + (1|Treatment_Tank) + (1|ID), data = Acer_tidydata)
summary(Acer_model)
Anova(Acer_model, type = "II", test.statistic = "F")
x = residuals(Acer_model)
plot(fitted(Acer_model), x)
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
Anova(Acer_model, type = type = "II", test.statistic = "F")
Anova(Acer_model, type = "II", test.statistic = "F")
capture.output(Anova(Acer_model, type = "II", test.statistic = "F"), file = "Acer_colorscore_model_ANOVA.csv")
capture.output(Anova(Acer_model, type = "II", test.statistic = "F"), file = "Acer_colorscore_model_ANOVA.csv")
Anova(Acer_model, type = "II", test.statistic = "F")
Pcli_tidydata
Pcli_tidydata %>%
mutate(Days_from_start = as.numeric(Date - as.Date("2022-03-10"))) -> Pcli_tidydata
Pcli_tidydata
Pcli_model <- lmer(mean_Rintensity_percoral ~ Treatment*Colony*Days_from_start + (1|Treatment_Tank/ID), data = Pcli_tidydata)
summary(Pcli_model)
anova(Pcli_model)
Anova(Pcli_model, type = "II", test.statistic = "F")
x = residuals(Pcli_model)
plot(fitted(Pcli_model), x)
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
Anova(Pcli_model, , type = "II", test.statistic = "F")
Anova(Pcli_model, type = "II", test.statistic = "F")
capture.output(Anova(Pcli_model, type = "II", test.statistic = "F"), file = "Pcli_colorscore_model_ANOVA.csv")
#colony + treatment
Acer_emms <- emmeans(Acer_model, pairwise ~ Treatment*Colony*Days_from_start, weights = "proportional", adjust="none")
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
#colony + treatment
Acer_emms <- emmeans(Acer_model, pairwise ~ Treatment*Colony, weights = "proportional", adjust="none")
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
summary(glht(Acer_model, linfct=mcp(Treatment="Tukey")), test = adjusted(type = "bonferroni"))
Anova(Pcli_model, type = "II", test.statistic = "F")
Anova(Acer_model, type = "II", test.statistic = "F")
#colony + treatment
Acer_emms <- emmeans(Acer_model, pairwise ~ Treatment, weights = "proportional", adjust="none")
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
#colony + treatment
Acer_emms <- emmeans(Acer_model, pairwise ~ Treatment*Colony*Days_from_start, adjust="none")
#colony + treatment
Acer_emms <- emmeans(Acer_model, pairwise ~ Treatment*Colony*Days_from_start)
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
#colony + treatment
Acer_emms <- emmeans(Acer_model, pairwise ~ Treatment*Colony)
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
summary(glht::glht(Acer_model, linfct=mcp(Treatment="Tukey")), test = adjusted(type = "bonferroni"))
summary(multcomp::glht(Acer_model, linfct=mcp(Treatment="Tukey")), test = adjusted(type = "bonferroni"))
summary(multcomp::glht(Acer_model, linfct=multcomp::mcp(Treatment="Tukey")), test = adjusted(type = "bonferroni"))
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
summary(Acer_model)
Rintensity_tidydata %>%
filter(Species == "Acropora cervicornis") -> Acer_tidydata
Acer_tidydata
Acer_tidydata %>%
mutate(time_point = case_when(Date < as.Date("2022-03-30") ~ "T0",
Date > as.Date("2022-04-17") ~ "T1")) -> Acer_tidydata
Acer_tidydata
Rintensity_tidydata %>%
filter(Species == "Pseudodiploria clivosa") %>%
mutate(time_point = case_when(Date < as.Date("2022-03-30") ~ "T0",
Date > as.Date("2022-04-17") ~ "T1")) -> Pcli_tidydata
#repeated measures -- include ID in the formula as a random effect
Acer_model <- lmer(mean_Rintensity_percoral ~ Treatment*Colony*time_point + (1|Treatment_Tank) + (1|ID), data = Acer_tidydata)
summary(Acer_model)
Anova(Acer_model, type = "II", test.statistic = "F")
Pcli_model <- lmer(mean_Rintensity_percoral ~ Treatment*Colony*time_point + (1|Treatment_Tank/ID), data = Pcli_tidydata)
summary(Pcli_model)
Anova(Pcli_model, type = "II", test.statistic = "F")
x = residuals(Acer_model)
plot(fitted(Acer_model), x)
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
Anova(Acer_model, type = "II", test.statistic = "F")
capture.output(Anova(Acer_model, type = "II", test.statistic = "F"), file = "Acer_colorscore_model_ANOVA.csv")
capture.output(Anova(Pcli_model, type = "II", test.statistic = "F"), file = "Pcli_colorscore_model_ANOVA.csv")
#colony + treatment
Acer_emms <- emmeans(Acer_model, pairwise ~ Treatment*Colony*time_point, weights = "proportional", adjust="none")
#colony + treatment
Acer_emms <- emmeans(Acer_model,  ~ Treatment*Colony*time_point, weights = "proportional", adjust="none")
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
Acer_emms
#colony + treatment
Acer_emms <- emmeans(Acer_model, pairwise ~ Treatment*Colony*time_point, weights = "proportional", adjust="none")
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
capture.output(rbind(Acer_emms$contrasts), file = "Acer_bw_Tukey_colonytreatmenttimepoint.csv")
#colony + treatment + timepoint
Pcli_emms <- emmeans(Pcli_model, pairwise ~ Treatment*Colony*time_point, weights = "proportional", adjust="none")
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
# P.value adjustment of the Bonferroni
rbind(Pcli_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
capture.output(rbind(Pcli_emms$contrasts), file = "Acer_bw_Tukey_colonytreatmenttimepoint.csv")
capture.output(rbind(Acer_emms$contrasts), file = "Acer_Tukey_colonytreatmenttimepoint.csv")
capture.output(rbind(Pcli_emms$contrasts), file = "Pcli_colonytreatmenttimepoint.csv")
