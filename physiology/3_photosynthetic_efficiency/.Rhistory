Species == "Acervicornis" & fvfm_timepoint == "fvfm_t3" ~ 70))
treatment_normalized_bothspecies <- ipam_tidy_data %>%
dplyr::filter(!Treatment_period == "CBASS") %>%
drop_na(Colony) %>% #this is because there are some corals that never matched up to IPAM values so they're just NA
dplyr::select(Date, Colony, Puck, Tank, fvfm, Treatment, Species)  %>%
mutate(Date = mdy(Date)) %>%
dplyr::filter(Date <= "2022-04-20") %>% #pre-CBASS time points
pivot_wider(names_from = Date, values_from = fvfm) %>%
mutate(fvfm_loss = case_when(Species == "Acervicornis" ~ `2022-03-16` - `2022-04-20`,
Species == "Pclivosa" ~ `2022-03-21` - `2022-04-20`)) %>%
mutate(fvfm_loss_norm = case_when(Species == "Acervicornis" ~ (fvfm_loss/`2022-03-16`)*100,
Species == "Pclivosa" ~ (fvfm_loss/`2022-03-21`)*100))
str(treatment_normalized_bothspecies)
#make factors: Colony, Puck, Tank, Treatment, Species
treatment_normalized_bothspecies %>%
mutate_at(vars(Colony, Puck, Tank, Treatment, Species), factor) -> treatment_normalized_bothspecies
#remake the treatment_normalized_bothspecies data frame before running this section of code
treat_model <- lm(fvfm_loss_norm ~ Treatment*Species*Colony + Tank, data = treatment_normalized_bothspecies)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species*Colony, data = treat_model_metrics) #not significant
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3) -> treat_outliers
# 2 outliers
#remove outliers
treatment_normalized_bothspecies <- treatment_normalized_bothspecies[!rownames(treatment_normalized_bothspecies) %in% treat_outliers$.rownames,]
aov(fvfm_loss_norm ~ Treatment*Species*Colony, data = treatment_normalized_bothspecies)
summary(aov(fvfm_loss_norm ~ Treatment*Species*Colony, data = treatment_normalized_bothspecies))
treat_outliers
treatment_normalized_bothspecies%>%
ggplot(., aes(x=Colony, y= fvfm_loss_norm, fill=Treatment)) +
geom_boxplot() +
theme_classic() + labs(y = "% Decline in Fv/Fm", x="Colony") +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))  +
theme(text = element_text(size = 15)) +
facet_wrap(~Species, scales = "free_x")
ipam_tidy_data <- read.csv("ipam_tidy_data.csv")
treatment_time_bothspecies <- ipam_tidy_data %>%
dplyr::filter(!Treatment_period == "CBASS") %>%
drop_na(Colony) %>% #this is because there are some corals that never matched up to IPAM values so they're just NA
dplyr::select(Date, Colony, Puck, Tank, fvfm, Treatment, Species) %>%
mutate(Date = mdy(Date)) %>%
dplyr::filter(Date <= "2022-04-20") %>%
pivot_wider(names_from = Date, values_from = fvfm) %>%
mutate(fvfm_t0 = case_when(Species == "Acervicornis" ~ `2022-03-16`,
Species == "Pclivosa" ~ `2022-03-21`)) %>%
mutate(fvfm_t1 = case_when(Species == "Acervicornis" ~ `2022-04-06`,
Species == "Pclivosa" ~ `2022-04-06`)) %>%
mutate(fvfm_t2 = case_when(Species == "Acervicornis" ~ `2022-04-20`,
Species == "Pclivosa" ~ `2022-04-20`)) %>%
pivot_longer(fvfm_t0:fvfm_t2, names_to = "fvfm_timepoint", values_to = "fvfm") %>%
mutate(numDays = case_when(fvfm_timepoint == "fvfm_t0" ~ 0,
Species == "Pclivosa" & fvfm_timepoint == "fvfm_t1" ~ 16,
Species == "Acervicornis" & fvfm_timepoint == "fvfm_t1" ~ 21,
Species == "Pclivosa" & fvfm_timepoint == "fvfm_t2" ~ 30,
Species == "Acervicornis" & fvfm_timepoint == "fvfm_t2" ~ 35,
Species == "Pclivosa" & fvfm_timepoint == "fvfm_t3" ~ 65,
Species == "Acervicornis" & fvfm_timepoint == "fvfm_t3" ~ 70))
treatment_normalized_bothspecies <- ipam_tidy_data %>%
dplyr::filter(!Treatment_period == "CBASS") %>%
drop_na(Colony) %>% #this is because there are some corals that never matched up to IPAM values so they're just NA
dplyr::select(Date, Colony, Puck, Tank, fvfm, Treatment, Species)  %>%
mutate(Date = mdy(Date)) %>%
dplyr::filter(Date <= "2022-04-20") %>% #pre-CBASS time points
pivot_wider(names_from = Date, values_from = fvfm) %>%
mutate(fvfm_loss = case_when(Species == "Acervicornis" ~ `2022-03-16` - `2022-04-20`,
Species == "Pclivosa" ~ `2022-03-21` - `2022-04-20`)) %>%
mutate(fvfm_loss_norm = case_when(Species == "Acervicornis" ~ (fvfm_loss/`2022-03-16`)*100,
Species == "Pclivosa" ~ (fvfm_loss/`2022-03-21`)*100))
treatment_time_bothspecies %>%
dplyr::select(!c(`2022-04-06`:`2022-04-20`)) %>%
mutate(numDays = as.factor(numDays)) %>%
ggplot(., aes(x=numDays, y=fvfm, fill = Treatment, color = Treatment)) +
geom_boxplot(color = "black", outlier.shape = NA, alpha=0.3) + #not removing outliers, just removing the black dots because they are already represented in the geom_point() line
geom_point(position = position_jitterdodge(), alpha=0.3) +
stat_summary(fun=mean, geom="line", aes(group=Treatment, color = Treatment), position = position_dodge(width = 0.5)) +
facet_wrap(~Species) +
theme_classic() +
labs(y = "Fv/Fm", x = "Days in Treatment") +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))  +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(text = element_text(size = 14))
treatment_time_bothspecies%>%
dplyr::select(!c(`2022-04-06`:`2022-04-20`)) %>%
mutate(numDays = as.factor(numDays)) %>%
ggplot(., aes(x=numDays, y=fvfm, fill = Treatment)) +
geom_boxplot(color = "black") +
stat_summary(fun=mean, geom="line", aes(group=Treatment, color = Treatment), position = position_dodge(width = 0.5)) +
facet_wrap(~Species + Colony) +
theme_classic() +
labs(y = "Fv/Fm", x = "Days in Treatment") +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))  +
theme(text = element_text(size = 14))
treatment_normalized_bothspecies%>%
ggplot(., aes(x=Treatment, y= fvfm_loss_norm, fill= Treatment)) +
geom_boxplot() +
theme_classic() +
labs(y = "% Decline in Fv/Fm", x="Treatment") +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
theme(text = element_text(size = 15)) +
facet_wrap(~Species) +
theme(legend.position="none")
str(treatment_normalized_bothspecies)
#make factors: Colony, Puck, Tank, Treatment, Species
treatment_normalized_bothspecies %>%
mutate_at(vars(Colony, Puck, Tank, Treatment, Species), factor) -> treatment_normalized_bothspecies
treatment_normalized_bothspecies
treat_model_1 <- lm(fvfm_loss_norm ~ Treatment*Species + Colony + Tank, data = treatment_normalized_bothspecies)
treat_model_metrics_1 <- augment(treat_model_1)
plot(treat_model_1)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics_1$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics_1) #not significant
# identifying outliers
treat_model_metrics_1 %>%
filter(abs(.std.resid) > 3) -> treat_outliers_1
treat_outliers_1
#remove outliers
treatment_normalized_bothspecies_2wayanova <- treatment_normalized_bothspecies[!rownames(treatment_normalized_bothspecies) %in% treat_outliers_1$.rownames,]
treatment_normalized_bothspecies_2wayanova
aov(fvfm_loss_norm ~ Treatment*Species, data = treatment_normalized_bothspecies_2wayanova)
summary(aov(fvfm_loss_norm ~ Treatment*Species, data = treatment_normalized_bothspecies_2wayanova))
treat_model_2 <- lm(fvfm_loss_norm ~ Treatment*Species*Colony + Tank, data = treatment_normalized_bothspecies)
treat_model_metrics_2 <- augment(treat_model_2)
plot(treat_model_2)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics_2$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species*Colony, data = treat_model_metrics_2) #not significant
# identifying outliers
treat_model_metrics_2 %>%
filter(abs(.std.resid) > 3) -> treat_outliers_2
treat_outliers_2
#remove outliers
treatment_normalized_bothspecies_3wayanova <- treatment_normalized_bothspecies[!rownames(treatment_normalized_bothspecies) %in% treat_outliers_2$.rownames,]
aov(fvfm_loss_norm ~ Treatment*Species*Colony, data = treatment_normalized_bothspecies_3wayanova)
summary(aov(fvfm_loss_norm ~ Treatment*Species*Colony, data = treatment_normalized_bothspecies_3wayanova))
capture.output(summary(aov(fvfm_loss_norm ~ Treatment*Species*Colony, data = treatment_normalized_bothspecies_3wayanova)), file = "fvfm_loss_norm_bothspeciesgenet_anova_table.csv")
capture.output(TukeyHSD(aov(fvfm_loss_norm ~ Treatment*Species*Colony, data = treatment_normalized_bothspecies_3wayanova)), file = "fvfm_loss_norm_bothspeciesgenet_anova_tukey.csv")
summary(aov(fvfm_loss_norm ~ Treatment*Species*Colony, data = treatment_normalized_bothspecies_3wayanova))
TukeyHSD(aov(fvfm_loss_norm ~ Treatment*Species, data = treatment_normalized_bothspecies_2wayanova))
library(tidyverse)
library(readxl)
library(rstatix)
library(plotrix)
library(ggpubr)
library(cowplot)
library(dunn.test)
Rscoredata <- read_xlsx("data_rscores.xlsx")
Rscoredata %>%
rename(`Photo ID` = `Image #`) %>%
rename(Date = `Date (Folder Name)`) -> Rscoredata
initialphotos <- read_xlsx("photo_metadata.xlsx")
april18 <- read_xlsx("photo_metadata.xlsx", sheet = "april 18")
june21 <- read_xlsx("photo_metadata.xlsx", sheet = "june 21")
july8 <- read_xlsx("photo_metadata.xlsx", sheet = "july 8")
coral_metadata <- readxl::read_xlsx("../metadata.xlsx")
coral_metadata %>%
dplyr::select(Species:CBASS_tank) -> coral_metadata
str(initialphotos)
initialphotos %>%
dplyr::select(`Photo ID`:`Coral Position`) -> initialphotos
str(april18)
april18 %>%
dplyr::select(`Photo ID`:`Coral Position`) -> april18
str(june21)
june21%>%
dplyr::select(`Photo ID`:`Coral Position`) -> june21
str(july8)
july8 %>%
dplyr::select(`Photo ID`:`Coral Position`) -> july8
full_join(initialphotos, april18) %>%
full_join(., june21) %>%
full_join(., july8) -> allRscores
allRscores
#Tank column depends on time point, as the tank assignments changed throughout timeline. But, should be able to use the Puck ID + Species as the unique identifier
allRscores %>%
mutate(Species = case_when(Species == "Acer" ~ "Acropora cervicornis",
Species == "Pcli" ~ "Pseudodiploria clivosa")) -> allRscores
allRscores %>%
rename(ID = `Puck ID`) -> allRscores #821 rows
full_join(allRscores, coral_metadata, by = c("Species", "ID")) %>%
drop_na(`Photo ID`)  -> allmetadata #821 rows
full_join(allmetadata, Rscoredata, by = c("Date", "Photo ID", "Coral Position")) -> Rintensity_withmetadata
Rintensity_withmetadata %>%
dplyr::select(!Genotype) -> Rintensity_withmetadata
Rintensity_withmetadata$month <- format(Rintensity_withmetadata$Date, "%m")
Rintensity_withmetadata$Date <- as.factor(Rintensity_withmetadata$Date)
Rintensity_withmetadata$month <- as.factor(Rintensity_withmetadata$month)
Rintensity_withmetadata %>%
group_by(ID, Species, Colony, Treatment, month) %>%
mutate(mean_Rintensity_percoral = mean(Mean)) -> Rintensity_withmetadata
# Rintensity_withmetadata %>%
#   filter(is.na(Species)) #photo 4709 is a duplicate from photo 4711 so I already have these values in the spreadsheet
Rintensity_withmetadata %>%
drop_na(ID) -> Rintensity_withmetadata
Rintensity_withmetadata
ggplot(Rintensity_withmetadata,aes(x = month, y= mean_Rintensity_percoral, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
facet_wrap(~Species, scales = "free") +
ylim(0, 255) +
labs(y = "R Intensity") +
theme(text = element_text(size = 13)) +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))
Rintensity_withmetadata %>%
ungroup() %>%
filter(month == "03" | month == "04") %>%
dplyr::select(ID, Species, Colony, Treatment, Treatment_Tank, month, mean_Rintensity_percoral) %>%
distinct() %>%
pivot_wider(names_from = "month", values_from = "mean_Rintensity_percoral") %>%
mutate(percent_change = ((`04`-`03`)/`03`)*100) -> percentchange
percentchange
str(percentchange) #275 rows
percentchange %>%
drop_na() -> percentchange #7 corals were not measured in the second time point
percentchange
percentchange %>%
mutate_at(vars(Colony, Treatment, Species), factor) -> percentchange
treat_model_1 <- lm(percent_change ~ Treatment*Species + Colony + Treatment_Tank, data = percentchange)
treat_model_metrics_1 <- augment(treat_model_1)
plot(treat_model_1)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics_1$.resid) #significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics_1) #significant
# identifying outliers
treat_model_metrics_1 %>%
filter(abs(.std.resid) > 3)
#remove outliers
percentchange  %>%
filter(percent_change < 180) -> percentchange
#rerun
treat_model_1 <- lm(percent_change ~ Treatment*Species + Colony + Treatment_Tank, data = percentchange)
treat_model_metrics_1 <- augment(treat_model_1)
shapiro_test(treat_model_metrics_1$.resid) #still significant
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics_1) #still significant
#make interaction term
percentchange$Treatment_Species <- interaction(percentchange$Treatment, percentchange$Species)
kruskal_test(percent_change ~ Treatment_Species, data = percentchange) #significant
#posthoc test
as.data.frame(dunn.test(percentchange$percent_change, percentchange$Treatment_Species, method = "bonferroni")) #%>%
percentchange %>%
filter(Species == "Pseudodiploria clivosa") -> Pcli_R_percentchange
Pcli_Rtreat_model <- lm(percent_change ~ Treatment*Colony + Treatment_Tank, data = Pcli_R_percentchange)
Pcli_Rtreat_model_metrics <- augment(Pcli_Rtreat_model)
plot(Pcli_Rtreat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Pcli_Rtreat_model_metrics$.resid) #not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Colony, data = Pcli_Rtreat_model_metrics) #not significant
# two-way anova
summary(aov(percent_change ~ Treatment*Colony, data = Pcli_R_percentchange)) #significant
TukeyHSD(aov(percent_change ~ Treatment*Colony, data = Pcli_R_percentchange))
# two-way anova
summary(aov(percent_change ~ Treatment*Colony, data = Pcli_R_percentchange)) #significant
str(slowburn_Rintensity) #99 rows
Rintensity_withmetadata %>%
ungroup() %>%
filter(month == "06" | month == "07") %>%
dplyr::select(ID, Species, Colony, Treatment, Treatment_Tank, month, mean_Rintensity_percoral) %>%
distinct() %>%
pivot_wider(names_from = "month", values_from = "mean_Rintensity_percoral") %>%
mutate(percent_change = ((`07`-`06`)/`06`)*100) -> slowburn_Rintensity
slowburn_Rintensity %>%
drop_na() -> slowburn_Rintensity #~60 corals were not measured in the second time point
str(slowburn_Rintensity) #99 rows
slowburn_Rintensity %>%
mutate_at(vars(Colony, Treatment, Species), factor) -> slowburn_Rintensity
treat_model <- lm(percent_change ~ Treatment*Species + Colony + Treatment_Tank, data = slowburn_Rintensity)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) #not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #not significant
summary(aov(percent_change ~ Treatment*Species, data = slowburn_Rintensity)) #significant for species
slowburn_Rintensity %>%
filter(Species == "Acropora cervicornis") -> Acer_slowburn_Rintensity
Acer_R_model <- lm(percent_change ~ Treatment*Colony + Treatment_Tank, data = Acer_slowburn_Rintensity)
Acer_R_model_model_metrics <- augment(Acer_R_model)
plot(Acer_R_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Acer_R_model_model_metrics$.resid) #not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Colony, data = Acer_R_model_model_metrics) #not significant
summary(aov(percent_change ~ Treatment*Colony, data = Acer_slowburn_Rintensity)) #significant for species
slowburn_Rintensity %>%
filter(Species == "Pseudodiploria clivosa") -> Pcli_slowburn_Rintensity
Pcli_R_model <- lm(percent_change ~ Treatment*Colony + Treatment_Tank, data = Pcli_slowburn_Rintensity)
Pcli_R_model_metrics <- augment(Pcli_R_model)
plot(Pcli_R_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Pcli_R_model_metrics$.resid) #not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Colony, data = Pcli_R_model_metrics) #not significant
# two-way anova
summary(aov(percent_change ~ Treatment*Colony, data = Pcli_slowburn_Rintensity)) #significant
library(tidyverse)
library(plotrix)
library(lme4)
library(ggpubr)
library(drc) #for the function "drm" dose-response model
library(broom) #for the tidy function needed for dose response model
library(car)
library(rstatix)
library(rcompanion)
library(cowplot)
library(dunn.test)
ipam_tidy_data <- read.csv("ipam_tidy_data.csv")
ipam_tidy_data %>%
dplyr::filter(Treatment_period == "CBASS") %>%
dplyr::select(!Treatment) -> ipam_tidy_CBASS
ipam_tidy_data %>%
dplyr::filter(!Treatment_period == "CBASS") %>%
dplyr::select(Tank, Puck, Colony, Treatment, Species) %>%
distinct() %>% #283 rows = one coral ID per treatment, no repeats
mutate(Treatment = case_when(Tank == "1" ~ "Untreated",
Tank == "2" ~ "Treated",
Tank == "3" ~ "Treated",
Tank == "4" ~ "Untreated",
Tank == "5" ~ "Treated",
Tank == "6" ~ "Untreated",
Tank == "7" ~ "Untreated",
Tank == "8" ~ "Treated")) %>%
full_join(ipam_tidy_CBASS, by = c("Puck", "Colony", "Species")) %>%
drop_na() %>%
dplyr::rename(Treatment_Tank = Tank.x, CBASS_Tank = Tank.y) %>%
dplyr::select(-c("X", "AOI", "Ft", "Fm", "file")) -> ipam_tidy_CBASS_treatments
ipam_tidy_CBASS_treatments %>%
mutate_at(vars(Colony, Puck, Treatment, Species), factor) -> ipam_tidy_CBASS_treatments
str(ipam_tidy_CBASS_treatments)
#make factors: Colony, Puck, Treatment, Species
ipam_tidy_CBASS_treatments %>%
mutate_at(vars(Colony, Puck, Treatment, Species), factor) -> ipam_tidy_CBASS_treatments
#check
str(ipam_tidy_CBASS_treatments)
# Checking sample sizes
aggregate(fvfm ~ Species + Treatment, data=ipam_tidy_CBASS_treatments, length)
#sample sizes are large enough to use z-test statistics from compParm()
aggregate(fvfm ~ Species + Treatment + Colony, data=ipam_tidy_CBASS_treatments, length)
ipam_tidy_CBASS_treatments$Species_Treatment <- interaction(ipam_tidy_CBASS_treatments$Species, ipam_tidy_CBASS_treatments$Treatment)
ipam_tidy_CBASS_treatments$CBASS_temp <- as.numeric(ipam_tidy_CBASS_treatments$CBASS_temp) #needs to be numeric or drm function won't run
DRC_species_treatment_Ed25 = drm(fvfm ~ CBASS_temp, data = ipam_tidy_CBASS_treatments, curveid = Species_Treatment,
fct = LL.3())
summary(DRC_species_treatment_Ed25)
plot(DRC_species_treatment_Ed25)
summary(DRC_species_treatment_Ed25)
DRC_species_treatment_Ed25_coeff <- data.frame(ED(DRC_species_treatment_Ed25, c(25)))
untreated_Acer <- drm(fvfm ~ CBASS_temp, data = ipam_tidy_CBASS_treatments[ipam_tidy_CBASS_treatments$Species == "Acervicornis" & ipam_tidy_CBASS_treatments$Treatment=="Untreated",], fct = LL.3())
summary(untreated_Acer)
plot(untreated_Acer)
treated_Acer <- drm(fvfm ~ CBASS_temp, data = ipam_tidy_CBASS_treatments[ipam_tidy_CBASS_treatments$Species == "Acervicornis" & ipam_tidy_CBASS_treatments$Treatment=="Treated",], fct = LL.3())
summary(treated_Acer)
plot(treated_Acer)
untreated_Acer_preddata = data.frame(temp = seq(27,39, length.out = 100))
untreated_Acer_pred = as.data.frame(predict(untreated_Acer, newdata = untreated_Acer_preddata, interval = 'confidence'))
untreated_Acer_preddata = data.frame(untreated_Acer_preddata, fvfm = untreated_Acer_pred$Prediction, Lower = untreated_Acer_pred$Lower, Upper = untreated_Acer_pred$Upper)
treated_Acer_preddata = data.frame(temp = seq(27,39, length.out = 100))
treated_Acer_pred = as.data.frame(predict(treated_Acer, newdata = treated_Acer_preddata, interval = 'confidence'))
treated_Acer_preddata = data.frame(treated_Acer_preddata, fvfm = treated_Acer_pred$Prediction, Lower = treated_Acer_pred$Lower, Upper = treated_Acer_pred$Upper)
ggplot() +
geom_jitter(data = ipam_tidy_CBASS_treatments[ipam_tidy_CBASS_treatments$Species == "Acervicornis",], aes(x = CBASS_temp, y = fvfm, color =   Treatment), size = 1, width = 0.25) +
scale_x_continuous(limits=c(28,40), breaks=c(28,30,32,34,36,38)) +
scale_y_continuous(limits=c(-0.05, 0.7), breaks=c(0, 0.2, 0.4, 0.6)) +
geom_line(data = untreated_Acer_preddata, aes(x = temp, y = fvfm), color = "#60DBDB", show.legend = FALSE) +
geom_ribbon(data = untreated_Acer_preddata, aes(x = temp, ymin=Lower, ymax=Upper), fill = "#60DBDB", linetype=2, alpha = 0.2) +
geom_vline(data = DRC_species_treatment_Ed25_coeff, aes(xintercept = 35.522914), color = "#60DBDB", show.legend = FALSE) +
geom_text(data = DRC_species_treatment_Ed25_coeff, aes(label = "ED25 = 35.52"), x = 38, y = 0.65, show.legend = FALSE, color = "#60DBDB") +
geom_line(data = treated_Acer_preddata, aes(x = temp, y = fvfm), color = '#F54A34', show.legend = FALSE) +
geom_ribbon(data = treated_Acer_preddata, aes(x = temp, ymin=Lower, ymax=Upper), fill = '#F54A34', linetype=2, alpha = 0.2) +
geom_vline(data = DRC_species_treatment_Ed25_coeff, aes(xintercept = 35.656305), color = '#F54A34', show.legend = FALSE) +
geom_text(data = DRC_species_treatment_Ed25_coeff, aes(label = "ED25 = 35.66"), x = 38, y = 0.6, show.legend = FALSE, color = '#F54A34') +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("Fv/Fm") +
xlab("Temperature (°C)") +
theme_bw() +
labs(title = "A.cervicornis") +
theme(legend.position="none") +
theme(text = element_text(size = 15))
compParm(DRC_species_treatment_Ed25, 'ed25')
DRC_species_treatment_Ed25
EDcomp(DRC_species_treatment_Ed25, c(25,25))
CBASS_temp_logs <- readxl::read_xlsx("../../tank parameters/Data from LabVIEW/CBASS_labview.xlsx")
View(CBASS_temp_logs)
ggplot(CBASS_temp_logs, aes(x=Time, y = `1`)) + geom_point()
CBASS_temp_logs %>%
dplyr::select(Time:`8`) %>%
pivot_longer(`1`:`8`, names_to="Tank", values_to ="Temp") %>%
ggplot(data = .,
aes(x = Time, y = Temp, color = Tank)) +
geom_point() +
theme_classic() +
facet_wrap(~Tank) +
labs(title = "Tank Temperatures",
y = "Temperature (°C)",
x = "Date")e, y = `1`)) + geom_point()
CBASS_temp_logs %>%
dplyr::select(Time:`8`) %>%
pivot_longer(`1`:`8`, names_to="Tank", values_to ="Temp") %>%
ggplot(data = .,
aes(x = Time, y = Temp, color = Tank)) +
geom_point() +
theme_classic() +
facet_wrap(~Tank) +
labs(title = "Tank Temperatures",
y = "Temperature (°C)",
x = "Date")
CBASS_temp_logs %>%
dplyr::select(Time:`8`) %>%
pivot_longer(`1`:`8`, names_to="Tank", values_to ="Temp")
CBASS_temp_logs %>%
dplyr::select(Time:`8`) %>%
pivot_longer(`1`:`8`, names_to="Tank", values_to ="Temp") -> CBASS_temp
above_32 <- filter(CBASS_temp, temperature > 32)
above_32 <- filter(CBASS_temp, Temp > 32)
above_32
hourly_counts <- above_32 %>%
mutate(hour = floor_date(Time, "hour")) %>%
group_by(Tank, hour) %>%
summarise(count = n())
hourly_counts
# To find hours with temperatures consistently above 32, we need to identify
# hours where 'count' is equal to 12 (since there are 12 five-minute intervals in an hour)
hours_above_32 <- filter(hourly_counts, count == 12)
# Summarize to get the total number of hours above 32 degrees for each tank
hours_per_tank <- hours_above_32 %>%
group_by(Tank) %>%
summarise(total_hours = n())
hours_per_tank
above_32 %>%
group_by(Tank, hour) %>%
summarise(count = n())
above_32 %>%
group_by(Tank) %>%
summarise(count = n())
o
above_32 <- filter(CBASS_temp, Temp > 32)
above_32
above_32 %>%
group_by(Tank) %>%
summarise(count = n()) %>%
mutate(min_above_32 = count * 5)
min_counts <- above_32 %>%
group_by(Tank) %>%
summarise(count = n()) %>%
mutate(min_above_32 = count * 5) %>%  #because each data point was recorded at 5-min intervals
select(Tank, min_above_32)
min_above_32 <- above_32 %>%
group_by(Tank) %>%
summarise(count = n()) %>%
mutate(min_above_32 = count * 5) %>%  #because each data point was recorded at 5-min intervals
select(Tank, min_above_32)
min_above_32
#check
str(ipam_tidy_CBASS_treatments)
ipam_tidy_CBASS_treatments
ipam_tidy_CBASS_treatments %>%
select(Puck:CBASS_Tank, CBASS_temp, Species_Treatment)
min_above_32 <- above_32 %>%
group_by(Tank) %>%
summarise(count = n()) %>%
mutate(min_above_32 = count * 5) %>%  #because each data point was recorded at 5-min intervals
select(Tank, min_above_32) %>%
rename(Tank = CBASS_Tank)
min_above_32 <- above_32 %>%
group_by(Tank) %>%
summarise(count = n()) %>%
mutate(min_above_32 = count * 5) %>%  #because each data point was recorded at 5-min intervals
select(Tank, min_above_32) %>%
rename(CBASS_Tank = Tank)
min_above_32
min_above_32 <- above_32 %>%
group_by(Tank) %>%
summarise(count = n()) %>%
mutate(min_above_32 = count * 5) %>%  #because each data point was recorded at 5-min intervals
select(Tank, min_above_32) %>%
rename(CBASS_Tank = Tank) %>%
mutate(CBASS_Tank = as.int(CBASS_Tank))
min_above_32 <- above_32 %>%
group_by(Tank) %>%
summarise(count = n()) %>%
mutate(min_above_32 = count * 5) %>%  #because each data point was recorded at 5-min intervals
select(Tank, min_above_32) %>%
rename(CBASS_Tank = Tank) %>%
mutate(CBASS_Tank = as.integer(CBASS_Tank))
ipam_tidy_CBASS_treatments %>%
select(Puck:CBASS_Tank, CBASS_temp, Species_Treatment) %>%
full_join(., min_above_32)
ipam_tidy_CBASS_treatments %>%
select(Puck:CBASS_Tank, CBASS_temp, Species_Treatment) %>%
full_join(., min_above_32) %>%
drop_na() #removes control tank that was set to 28ºC
species_Treatment_DHM <- ipam_tidy_CBASS_treatments %>%
select(Puck:CBASS_Tank, CBASS_temp, Species_Treatment) %>%
full_join(., min_above_32) %>%
drop_na() #removes control tank that was set to 28ºC
DRC_species_treatment_DHM = drm(fvfm ~ min_above_32, data = species_Treatment_DHM, curveid = Species_Treatment,
fct = LL.3(names = c('hill', 'max', 'ed50')))
summary(DRC_species_treatment_DHM)
plot(DRC_species_treatment_DHM)
#compParm compares the selected coefficient by means of a z-test
compParm(DRC_species_treatment_DHM, 'ed50')
compParm(DRC_species_treatment_DHM, 'hill')
EDcomp(DRC_species_treatment_DHM, c(25,25))
plot(DRC_species_treatment_DHM)
