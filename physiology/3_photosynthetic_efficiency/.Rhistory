as.data.frame(compParm(DRC_species_treatment, 'hill', "-")) %>%
write.csv("DRC_species_treatment_hill_stats.csv")
compParm(DRC_species_treatment, 'ed50')
as.data.frame(compParm(DRC_species_treatment, 'ed50', "-"))
ipam_tidy_CBASS_treatments %>%
filter(Species == "Acervicornis") -> Acer_CBASS
Acer_CBASS$Colony_Treatment <- interaction(Acer_CBASS$Colony, Acer_CBASS$Treatment)
str(Acer_CBASS)
DRC_Acer_colony_treatment = drm(fvfm ~ CBASS_temp, data = Acer_CBASS, curveid = Colony_Treatment,
fct = LL.3(names = c('hill', 'max', 'ed50')))
summary(DRC_Acer_colony_treatment)
plot(DRC_Acer_colony_treatment)
compParm(DRC_Acer_colony_treatment, 'ed50')
compParm(DRC_Acer_colony_treatment, 'ed50', "-")
compParm(DRC_Acer_colony_treatment, 'hill')
compParm(DRC_Acer_colony_treatment, 'hill', "-")
Acer_coeff <- as.data.frame(DRC_Acer_colony_treatment$coefficients)
Acer_coeff %>%
rownames_to_column(var = "coeff_colony_treatment") %>%
filter(grepl("ed50", coeff_colony_treatment)) %>%
rename(ED50 = `DRC_Acer_colony_treatment$coefficients`) %>%
separate(coeff_colony_treatment, into=c("ed50", "Colony", "Treatment"), sep = "[:.]") -> Acer_ED50s
#statistics
Acer_model <- lm(ED50 ~ Treatment, data = Acer_ED50s)
Acer_model_metrics <- augment(Acer_model)
plot(Acer_model) #not normal
summary(aov(ED50 ~ Treatment, data = Acer_ED50s)) #not significant
kruskal.test(ED50 ~ Treatment, data = Acer_ED50s) #not significant
kruskal.test(ED50 ~ Treatment, data = Acer_ED50s) #not significant
summary(aov(ED50 ~ Treatment, data = Acer_ED50s)) #not significant
plot(Acer_model) #not normal
kruskal.test(ED50 ~ Treatment, data = Acer_ED50s) #not significant
summary(aov(ED50 ~ Treatment, data = Acer_ED50s)) #not significant
Acer_ED50s
kruskal.test(ED50 ~ Treatment, data = Acer_ED50s) #not significant
ipam_tidy_CBASS_treatments %>%
filter(Species == "Pclivosa") -> Pcli_CBASS
Pcli_CBASS$Colony_Treatment <- interaction(Pcli_CBASS$Colony, Pcli_CBASS$Treatment)
str(Pcli_CBASS)
DRC_Pcli_colony_treatment = drm(fvfm ~ CBASS_temp, data = Pcli_CBASS, curveid = Colony_Treatment,
fct = LL.3(names = c('hill', 'max', 'ed50')))
summary(DRC_Pcli_colony_treatment)
plot(DRC_Pcli_colony_treatment)
compParm(DRC_Pcli_colony_treatment, 'ed50')
compParm(DRC_Pcli_colony_treatment, 'ed50', "-")
compParm(DRC_Pcli_colony_treatment, 'hill')
compParm(DRC_Pcli_colony_treatment, 'hill', "-")
Pcli_coeff <- as.data.frame(DRC_Pcli_colony_treatment$coefficients)
Pcli_coeff %>%
rownames_to_column(var = "coeff_colony_treatment") %>%
filter(grepl("ed50", coeff_colony_treatment)) %>%
rename(ED50 = `DRC_Pcli_colony_treatment$coefficients`) %>%
separate(coeff_colony_treatment, into=c("ed50", "Colony", "Treatment"), sep = "[:.]") -> Pcli_ED50s
#statistics
Pcli_model <- lm(ED50 ~ Treatment, data = Pcli_ED50s)
Pcli_model_metrics <- augment(Pcli_model)
plot(Pcli_model) # not normal
kruskal.test(ED50 ~ Treatment, data = Pcli_ED50s) #not significant
Pcli_ED50s
kruskal.test(ED50 ~ Treatment, data = Pcli_ED50s) #not significant
Acer_coeff %>%
rownames_to_column(var = "coeff_colony_treatment") %>%
filter(grepl("hill", coeff_colony_treatment)) %>%
rename(hill = `DRC_Acer_colony_treatment$coefficients`) %>%
separate(coeff_colony_treatment, into=c("var", "Colony", "Treatment"), sep = "[:.]") -> Acer_hills
#statistics
Acer_hill_model <- lm(hill ~ Treatment, data = Acer_hills)
Acer_hill_model_metrics <- augment(Acer_hill_model)
plot(Acer_hill_model) # need to do non parametric test
kruskal.test(hill ~ Treatment, data = Acer_hills) #not significant
kruskal.test(hill ~ Treatment, data = Acer_hills) #not significant
kruskal.test(ED50 ~ Treatment, data = Pcli_ED50s) #not significant
summary(aov(ED50 ~ Treatment, data = Acer_ED50s)) #not significant
summary(aov(ED50 ~ Treatment, data = Pcli_ED50s))
summary(aov(hill ~ Treatment, data = Acer_hills))
summary(aov(hill ~ Treatment, data = Acer_hills))
Acer_model <- lm(ED50 ~ Treatment, data = Acer_ED50s)
Acer_model_metrics <- augment(Acer_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Acer_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment, data = Acer_model_metrics) #not significant
summary(aov(ED50 ~ Treatment, data = Acer_ED50s)) #not significant
Pcli_model <- lm(ED50 ~ Treatment, data = Pcli_ED50s)
Pcli_model_metrics <- augment(Pcli_model)
plot(Pcli_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Pcli_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment, data = Pcli_model_metrics) #not significant
summary(aov(ED50 ~ Treatment, data = Pcli_ED50s))
Acer_hill_model <- lm(hill ~ Treatment, data = Acer_hills)
Acer_hill_model_metrics <- augment(Acer_hill_model)
plot(Acer_hill_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Acer_hill_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment, data = Acer_hill_model_metrics) #not significant
summary(aov(hill ~ Treatment, data = Acer_hills))
Pcli_hill_model <- lm(hill ~ Treatment, data = Pcli_hills)
Pcli_coeff %>%
rownames_to_column(var = "coeff_colony_treatment") %>%
filter(grepl("hill", coeff_colony_treatment)) %>%
rename(hill = `DRC_Pcli_colony_treatment$coefficients`) %>%
separate(coeff_colony_treatment, into=c("var", "Colony", "Treatment"), sep = "[:.]") -> Pcli_hills
#statistics
Pcli_hill_model <- lm(hill ~ Treatment, data = Pcli_hills)
Pcli_hill_model_metrics <- augment(Pcli_hill_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Pcli_hill_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment, data = Pcli_hill_model_metrics) #not significant
summary(aov(hill ~ Treatment, data = Pcli_hills))
ipam_tidy_CBASS_treatments %>%
filter(Species == "Acervicornis") %>%
filter(Colony == "SI-C") %>%
mutate(CBASS_temp = as.factor(CBASS_temp)) -> Acer_SIC_CBASS
str(Acer_SIC_CBASS)
#rerun above code chunk to recreate Acer_CBASS dataset before running statistical tests because outliers have been filtered out in other sections
Acer_SIC_CBASS_model <- lm(fvfm ~ Treatment*CBASS_temp + Treatment_Tank, data = Acer_SIC_CBASS)
Acer_SIC_CBASS_model_metrics <- augment(Acer_SIC_CBASS_model)
plot(Acer_SIC_CBASS_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Acer_SIC_CBASS_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*CBASS_temp, data = Acer_SIC_CBASS_model_metrics) #not significant
# identifying outliers
Acer_SIC_CBASS_model_metrics %>%
filter(abs(.std.resid) > 3)
# 0 outliers
aov(fvfm ~ Treatment*CBASS_temp, data = Acer_SIC_CBASS)
summary(aov(fvfm ~ Treatment*CBASS_temp, data = Acer_SIC_CBASS))
capture.output(summary(aov(fvfm ~ Treatment*CBASS_temp, data = Acer_SIC_CBASS)), file = "fvfm_CBASStemps_Acer_SIC_anova_table.csv")
TukeyHSD(aov(fvfm ~ Treatment*CBASS_temp, data = Acer_SIC_CBASS))
capture.output(TukeyHSD(aov(fvfm ~ Treatment*CBASS_temp, data = Acer_SIC_CBASS)), file = "fvfm_CBASStemps_Acer_SIC_anova_tukey.csv")
Pcli_ED50s %>%
mutate(Species ="Pclivosa") -> Pcli_ED50s
Acer_ED50s %>%
mutate(Species = "Acervicornis") -> Acer_ED50s
full_join(Pcli_ED50s, Acer_ED50s) -> bothspecies_colony_ED50s
ed50_model <- lm(ED50 ~ Species*Treatment + Colony, data = bothspecies_colony_ED50s)
ed50_model_metrics <- augment(ed50_model)
plot(ed50_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(ed50_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Species*Treatment, data = ed50_model_metrics) #not significant
# identifying outliers
ed50_model_metrics %>%
filter(abs(.std.resid) > 3) #no outliers
TukeyHSD(aov(ED50 ~ Species*Treatment, data = bothspecies_colony_ED50s))
capture.output(TukeyHSD(aov(ED50 ~ Species*Treatment, data = bothspecies_colony_ED50s), file = "bothspecies_colony_ED50s_anova_tukey.csv"))
capture.output(TukeyHSD(aov(ED50 ~ Species*Treatment, data = bothspecies_colony_ED50s), file = "bothspecies_colony_ED50s_anova_tukey.csv"))
capture.output(TukeyHSD(aov(ED50 ~ Species*Treatment, data = bothspecies_colony_ED50s)), file = "bothspecies_colony_ED50s_anova_tukey.csv")
Pcli_hills %>%
mutate(Species ="Pclivosa") -> Pcli_hills
Acer_hills %>%
mutate(Species = "Acervicornis") -> Acer_hills
full_join(Pcli_hills, Acer_hills) -> bothspecies_colony_hills
hill_model <- lm(hill ~ Species*Treatment + Colony, data = bothspecies_colony_hills)
hill_model_metrics <- augment(hill_model)
plot(hill_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(hill_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Species*Treatment, data = hill_model_metrics) #not significant
# identifying outliers
hill_model_metrics %>%
filter(abs(.std.resid) > 3) #no outliers
capture.output(TukeyHSD(aov(hill ~ Species*Treatment, data = bothspecies_colony_hills)), file = "bothspecies_colony_hill_anova_tukey.csv")
capture.output(TukeyHSD(aov(hill ~ Species*Treatment, data = bothspecies_colony_hills)), file = "bothspecies_colony_hill_anova_tukey.csv")
library(tidyverse)
library(readxl)
library(rstatix)
library(plotrix)
library(ggpubr)
library(cowplot)
library(dunn.test)
Rscoredata <- read_xlsx("data_rscores.xlsx")
Rscoredata %>%
select(`Date (Folder Name)`) %>%
distinct() #Dates with scores: 3/8-3/18 (Initial), 4/18, 6/21, 7/8
View(Rscoredata)
Rscoredata %>%
rename(`Photo ID` = `Image #`) %>%
rename(Date = `Date (Folder Name)`) -> Rscoredata
initialphotos <- read_xlsx("photo_metadata.xlsx")
april18 <- read_xlsx("photo_metadata.xlsx", sheet = "april 18")
june21 <- read_xlsx("photo_metadata.xlsx", sheet = "june 21")
july8 <- read_xlsx("photo_metadata.xlsx", sheet = "july 8")
coral_metadata <- readxl::read_xlsx("../metadata.xlsx")
coral_metadata %>%
select(Species:CBASS_tank) -> coral_metadata
coral_metadata
coral_metadata %>%
dplyr::select(Species:CBASS_tank) -> coral_metadata
str(initialphotos)
initialphotos %>%
dplyr::select(`Photo ID`:`Coral Position`) -> initialphotos
str(april18)
april18 %>%
dplyr::select(`Photo ID`:`Coral Position`) -> april18
str(june21)
june21%>%
dplyr::select(`Photo ID`:`Coral Position`) -> june21
str(july8)
july8 %>%
dplyr::select(`Photo ID`:`Coral Position`) -> july8
full_join(initialphotos, april18) %>%
full_join(., june21) %>%
full_join(., july8) -> allRscores
allRscores
#Tank column depends on time point, as the tank assignments changed throughout timeline. But, should be able to use the Puck ID + Species as the unique identifier
allRscores %>%
mutate(Species = case_when(Species == "Acer" ~ "Acropora cervicornis",
Species == "Pcli" ~ "Pseudodiploria clivosa")) -> allRscores
allRscores %>%
rename(ID = `Puck ID`) -> allRscores #821 rows
full_join(allRscores, coral_metadata, by = c("Species", "ID")) %>%
drop_na(`Photo ID`)  -> allmetadata #821 rows
full_join(allmetadata, Rscoredata, by = c("Date", "Photo ID", "Coral Position")) -> Rintensity_withmetadata
Rintensity_withmetadata %>%
dplyr::select(!Genotype) -> Rintensity_withmetadata
Rintensity_withmetadata$month <- format(Rintensity_withmetadata$Date, "%m")
Rintensity_withmetadata$Date <- as.factor(Rintensity_withmetadata$Date)
Rintensity_withmetadata$month <- as.factor(Rintensity_withmetadata$month)
Rintensity_withmetadata %>%
group_by(ID, Species, Colony, Treatment, month) %>%
mutate(mean_Rintensity_percoral = mean(Mean)) -> Rintensity_withmetadata
# Rintensity_withmetadata %>%
#   filter(is.na(Species)) #photo 4709 is a duplicate from photo 4711 so I already have these values in the spreadsheet
Rintensity_withmetadata %>%
drop_na(ID) -> Rintensity_withmetadata
Rintensity_withmetadata %>%
ungroup() %>%
filter(month == "03" | month == "04") %>%
dplyr::select(ID, Species, Colony, Treatment, Treatment_Tank, month, mean_Rintensity_percoral) %>%
distinct() %>%
pivot_wider(names_from = "month", values_from = "mean_Rintensity_percoral") %>%
mutate(percent_change = ((`04`-`03`)/`03`)*100) -> percentchange
percentchange %>%
drop_na() -> percentchange #7 corals were not measured in the second time point
str(percentchange) #275 rows
percentchange %>%
mutate_at(vars(Colony, Treatment, Species), factor) -> percentchange
treat_model <- lm(percent_change ~ Treatment*Species + Colony + Treatment_Tank, data = percentchange)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) #significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #significant
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3)
# 7 outliers
percentchange %>%
arrange(desc(percent_change)) # everything greater than 180 is an outlier
#remove outliers
percentchange  %>%
filter(percent_change < 180) -> percentchange
#rerun
treat_model <- lm(percent_change ~ Treatment*Species + Colony + Treatment_Tank, data = percentchange)
treat_model_metrics <- augment(treat_model)
shapiro_test(treat_model_metrics$.resid) #still significant
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #still significant
#run kruskal-wallis test
#make interaction term
percentchange$Treatment_Species <- interaction(percentchange$Treatment, percentchange$Species)
kruskal_test(percent_change ~ Treatment_Species, data = percentchange)#significant
#posthoc test
as.data.frame(dunn.test(percentchange$percent_change, percentchange$Treatment_Species, method = "bonferroni")) #%>%
#write_csv("changeinRintensity_posthoc_species.csv")
kruskal_test(percent_change ~ Treatment_Species, data = percentchange) #significant
percentchange %>%
filter(Species == "Acropora cervicornis") -> Acer_R_percentchange
Acer_Rtreat_model <- lm(percent_change ~ Treatment*Colony + Treatment_Tank, data = Acer_R_percentchange)
Acer_Rtreat_model_metrics <- augment(Acer_Rtreat_model)
plot(Acer_Rtreat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Acer_Rtreat_model_metrics$.resid) #significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Colony, data = Acer_Rtreat_model_metrics) #significant
# identifying outliers
Acer_Rtreat_model_metrics %>%
filter(abs(.std.resid) > 3) #0 outliers
#run non parametric test
#make interaction term
Acer_R_percentchange$Treatment_Colony <- interaction(Acer_R_percentchange$Treatment, Acer_R_percentchange$Colony)
kruskal_test(percent_change ~ Treatment_Colony, data = Acer_R_percentchange)#significant
#posthoc test
as.data.frame(dunn.test(Acer_R_percentchange$percent_change, Acer_R_percentchange$Treatment_Colony, method = "bonferroni"))
kruskal_test(percent_change ~ Treatment_Colony, data = Acer_R_percentchange)#significant
#posthoc test
as.data.frame(dunn.test(Acer_R_percentchange$percent_change, Acer_R_percentchange$Treatment_Colony, method = "bonferroni"))
percentchange %>%
filter(Species == "Pseudodiploria clivosa") -> Pcli_R_percentchange
Pcli_Rtreat_model <- lm(percent_change ~ Treatment*Colony + Treatment_Tank, data = Pcli_R_percentchange)
Pcli_Rtreat_model_metrics <- augment(Pcli_Rtreat_model)
plot(Pcli_Rtreat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Pcli_Rtreat_model_metrics$.resid) #not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Colony, data = Pcli_Rtreat_model_metrics) #not significant
# two-way anova
summary(aov(percent_change ~ Treatment*Colony, data = Pcli_R_percentchange)) #significant
TukeyHSD(aov(percent_change ~ Treatment*Colony, data = Pcli_R_percentchange))
# two-way anova
summary(aov(percent_change ~ Treatment*Colony, data = Pcli_R_percentchange)) #significant
Rintensity_withmetadata %>%
ungroup() %>%
filter(month == "06" | month == "07") %>%
select(ID, Species, Colony, Treatment, Treatment_Tank, month, mean_Rintensity_percoral) %>%
distinct() %>%
pivot_wider(names_from = "month", values_from = "mean_Rintensity_percoral") %>%
mutate(percent_change = ((`07`-`06`)/`06`)*100) -> slowburn_Rintensity
Rintensity_withmetadata %>%
ungroup() %>%
filter(month == "06" | month == "07") %>%
dplyr::select(ID, Species, Colony, Treatment, Treatment_Tank, month, mean_Rintensity_percoral) %>%
distinct() %>%
pivot_wider(names_from = "month", values_from = "mean_Rintensity_percoral") %>%
mutate(percent_change = ((`07`-`06`)/`06`)*100) -> slowburn_Rintensity
slowburn_Rintensity %>%
drop_na() -> slowburn_Rintensity #~60 corals were not measured in the second time point
str(slowburn_Rintensity) #99 rows
slowburn_Rintensity %>%
mutate_at(vars(Colony, Treatment, Species), factor) -> slowburn_Rintensity
treat_model <- lm(percent_change ~ Treatment*Species + Colony + Treatment_Tank, data = slowburn_Rintensity)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) #not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #not significant
# anova
summary(aov(percent_change ~ Treatment*Species, data = slowburn_Rintensity)) #significant for species
TukeyHSD(aov(percent_change ~ Treatment*Species, data = slowburn_Rintensity))
summary(aov(percent_change ~ Treatment*Species, data = slowburn_Rintensity)) #significant for species
TukeyHSD(aov(percent_change ~ Treatment*Species, data = slowburn_Rintensity))
capture.output(TukeyHSD(aov(percent_change ~ Treatment*Species, data = slowburn_Rintensity)), file = "slowburn_Rintensity_treatmentspecies.csv")
TukeyHSD(aov(percent_change ~ Treatment*Species, data = slowburn_Rintensity))
slowburn_Rintensity %>%
filter(Species == "Acropora cervicornis") -> Acer_slowburn_Rintensity
Acer_R_model <- lm(percent_change ~ Treatment*Colony + Treatment_Tank, data = Acer_slowburn_Rintensity)
Acer_R_model_model_metrics <- augment(Acer_R_model)
plot(Acer_R_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Acer_R_model_model_metrics$.resid) #not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Colony, data = Acer_R_model_model_metrics) #not significant
# anova
summary(aov(percent_change ~ Treatment*Colony, data = Acer_slowburn_Rintensity)) #significant for species
TukeyHSD(aov(percent_change ~ Treatment*Colony, data = Acer_slowburn_Rintensity))
summary(aov(percent_change ~ Treatment*Colony, data = Acer_slowburn_Rintensity)) #significant for species
TukeyHSD(aov(percent_change ~ Treatment*Colony, data = Acer_slowburn_Rintensity))
slowburn_Rintensity %>%
filter(Species == "Pseudodiploria clivosa") -> Pcli_slowburn_Rintensity
Pcli_R_model <- lm(percent_change ~ Treatment*Colony + Treatment_Tank, data = Pcli_slowburn_Rintensity)
Pcli_R_model_metrics <- augment(Pcli_R_model)
plot(Pcli_R_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Pcli_R_model_metrics$.resid) #not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Colony, data = Pcli_R_model_metrics) #not significant
# two-way anova
summary(aov(percent_change ~ Treatment*Colony, data = Pcli_slowburn_Rintensity)) #significant
TukeyHSD(aov(percent_change ~ Treatment*Colony, data = Pcli_slowburn_Rintensity))
# two-way anova
summary(aov(percent_change ~ Treatment*Colony, data = Pcli_slowburn_Rintensity)) #significant
TukeyHSD(aov(percent_change ~ Treatment*Colony, data = Pcli_slowburn_Rintensity))
library(tidyverse)
library(plotrix)
library(ggpubr)
library(rstatix)
library(cowplot)
library(dunn.test)
library(Rmisc)
library(plyr)
library(dplyr)
percent_cells_df <- read_csv("Grace_percentcells_alldata.csv")
percent_cells_df%>%
mutate(Treatment = case_when(Treatment == "Control" ~ "Untreated",
Treatment == "Variable" ~ "Treated")) -> percent_cells_df
#there's one outlier to remove right off the bat: T1	Pcli	B	P9	r2	Percent=111.50	T1	Untreated
percent_cells_df %>%
filter(!(TimePoint=="T1" & Species == "Pcli" & Genotype == "B" & Treatment == "Untreated" & ID == "P9" & Replicate == "r2")) -> percent_cells_df
#replicates are technical replicates of the same coral fragment
#time points:
#T0 = initial pre-treatment (March 22)
#T1 = one week into treatment (March 30)
#T2 = end of treatment (April 20)
#follow-up = post CBASS and treatment follow-up (June 1)
percent_cells_df %>%
mutate(num_days = case_when(TimePoint == "T0" ~ "0",
TimePoint == "T1" ~ "7",
TimePoint == "T2" ~ "28",
TimePoint == "FollowUp" ~ "71")) %>%
mutate(num_days = as.factor(num_days)) %>%
mutate(num_days = fct_relevel(num_days, "0", "7", "28", "71")) -> percent_cells_df
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
filter(num_days == "0" | num_days == "28") -> percent_cells_speciestreatments
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
dplyr::select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
filter(num_days == "0" | num_days == "28") -> percent_cells_speciestreatments
percent_cells_speciestreatments %>%
dplyr::mutate_at(vars(Species, Treatment, num_days), factor) -> percent_cells_speciestreatments
treat_model <- lm(mean_replicate_percent_perID ~ Treatment*Species*num_days + Genotype + Tank, data = percent_cells_speciestreatments)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species*num_days, data = treat_model_metrics) #significant
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3)
# 0 outliers
#make interaction term
percent_cells_speciestreatments$Treatment_Species_numdays <- interaction(percent_cells_speciestreatments$Treatment, percent_cells_speciestreatments$Species, percent_cells_speciestreatments$num_days)
#run Welch's anova
oneway.test(mean_replicate_percent_perID ~ Treatment_Species_numdays, data = percent_cells_speciestreatments, var.equal = FALSE) #significant
#posthoc test: Games-Howell
games_howell_test(percent_cells_speciestreatments, mean_replicate_percent_perID ~ Treatment_Species_numdays) #%>%
# write_csv("percentcells_speciestreatment_posthoc.csv")
#run Welch's anova
oneway.test(mean_replicate_percent_perID ~ Treatment_Species_numdays, data = percent_cells_speciestreatments, var.equal = FALSE) #significant
percent_cells_speciestreatments
#run Welch's anova
oneway.test(mean_replicate_percent_perID ~ Treatment_Species_numdays, data = percent_cells_speciestreatments, var.equal = FALSE) #significant
#average all technical replicates together before running stats
percent_cells_df %>%
filter(Species == "Acer") %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, Genotype, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
filter(num_days == "0" | num_days == "28") -> Acer_percent_cells
#average all technical replicates together before running stats
percent_cells_df %>%
filter(Species == "Acer") %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, Genotype, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
dplyr::select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
filter(num_days == "0" | num_days == "28") -> Acer_percent_cells
Acer_percent_cells %>%
dplyr::mutate_at(vars(Species, Genotype, Treatment, num_days), factor) -> Acer_percent_cells
Acer_model <- lm(mean_replicate_percent_perID ~ Treatment*Genotype*num_days + Tank, data = Acer_percent_cells)
Acer_model_metrics <- augment(Acer_model)
plot(Acer_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Acer_model_metrics$.resid) # significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Genotype*num_days, data = Acer_model_metrics) #not significant
# identifying outliers
Acer_model_metrics %>%
filter(abs(.std.resid) > 3)
# 0 outliers
#make interaction term
Acer_percent_cells$Treatment_Genotype_numdays <- interaction(Acer_model_metrics$Treatment, Acer_percent_cells$Genotype, Acer_percent_cells$num_days)
# kruskal wallis test
kruskal_test(mean_replicate_percent_perID ~ Treatment_Genotype_numdays, data = Acer_percent_cells)#significant
#posthoc test
as.data.frame(dunn.test(Acer_percent_cells$mean_replicate_percent_perID, Acer_percent_cells$Treatment_Genotype_numdays, method = "bonferroni")) %>%
write_csv("Acer_percent_cells_genet_posthoc.csv")
# kruskal wallis test
kruskal_test(mean_replicate_percent_perID ~ Treatment_Genotype_numdays, data = Acer_percent_cells)#significant
#average all technical replicates together before running stats
percent_cells_df %>%
filter(Species == "Pcli") %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, Genotype, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
dplyr::select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
filter(num_days == "0" | num_days == "28") -> Pcli_percent_cells
str(Pcli_percent_cells)
Pcli_percent_cells %>%
dplyr::mutate_at(vars(Species, Genotype, Treatment, num_days), factor) -> Pcli_percent_cells
Pcli_model <- lm(mean_replicate_percent_perID ~ Treatment*Genotype*num_days + Tank, data = Pcli_percent_cells)
Pcli_model_metrics <- augment(Pcli_model)
plot(Pcli_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Pcli_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Genotype*num_days, data = Pcli_model_metrics) #not significant
# identifying outliers
Pcli_model_metrics %>%
filter(abs(.std.resid) > 3)
# 0 outliers
#run two-way anova
summary(aov(mean_replicate_percent_perID ~ Treatment*Genotype*num_days, data = Pcli_percent_cells)) #only num of days is significant
capture.output(TukeyHSD(aov(mean_replicate_percent_perID ~ Treatment*Genotype*num_days, data = Pcli_percent_cells)), file = "pcli_phagocytosis_posthoc.csv")
