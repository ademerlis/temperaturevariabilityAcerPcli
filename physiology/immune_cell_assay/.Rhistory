drop_na() %>% #one technical replicate is NA for one coral ID
mutate(num_days = as.factor(num_days)) %>%
group_by(num_days, Species, Genotype, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
group_by(num_days, Species, Genotype, Treatment) %>%
mutate(avg_percent_per_genet = mean(mean_replicate_percent_perID), se_percent_per_genet = std.error(mean_replicate_percent_perID)) %>%
ungroup() %>%
ggplot(., aes(x = num_days, y = avg_percent_per_genet))+
theme_classic()+
geom_jitter(aes(y=mean_replicate_percent_perID, color = Treatment, fill = Treatment),
position=position_dodge(width=0.3),
alpha=0.2, pch = 21,
color = "black") +
geom_errorbar(aes(x = num_days, ymax = avg_percent_per_genet+se_percent_per_genet, ymin = avg_percent_per_genet-se_percent_per_genet, color = Treatment), width = .2, position = position_dodge(width=0.4)) +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
geom_point(mapping = aes(x = num_days, ymax = avg_percent_per_genet+se_percent_per_genet, ymin = avg_percent_per_genet-se_percent_per_genet, fill = Treatment), size = 3, pch = 21, color = "black", position = position_dodge(width=0.4))+
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
xlab("Number of Days")+
ylab("% Phagocytic Activity")+
facet_wrap(~Species+Genotype, scales = "free_x") +
theme(text = element_text(size = 15))
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
mutate(num_days = as.factor(num_days), levels = c("0", "7", "28", "71")) %>%
group_by(num_days, Species, Genotype, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
group_by(num_days, Species, Genotype, Treatment) %>%
mutate(avg_percent_per_genet = mean(mean_replicate_percent_perID), se_percent_per_genet = std.error(mean_replicate_percent_perID)) %>%
ungroup() %>%
ggplot(., aes(x = num_days, y = avg_percent_per_genet))+
theme_classic()+
geom_jitter(aes(y=mean_replicate_percent_perID, color = Treatment, fill = Treatment),
position=position_dodge(width=0.3),
alpha=0.2, pch = 21,
color = "black") +
geom_errorbar(aes(x = num_days, ymax = avg_percent_per_genet+se_percent_per_genet, ymin = avg_percent_per_genet-se_percent_per_genet, color = Treatment), width = .2, position = position_dodge(width=0.4)) +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
geom_point(mapping = aes(x = num_days, ymax = avg_percent_per_genet+se_percent_per_genet, ymin = avg_percent_per_genet-se_percent_per_genet, fill = Treatment), size = 3, pch = 21, color = "black", position = position_dodge(width=0.4))+
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
xlab("Number of Days")+
ylab("% Phagocytic Activity")+
facet_wrap(~Species+Genotype, scales = "free_x") +
theme(text = element_text(size = 15))
percent_cells_df %>%
mutate(num_days = case_when(TimePoint == "T0" ~ "0",
TimePoint == "T1" ~ "7",
TimePoint == "T2" ~ "28",
TimePoint == "FollowUp" ~ "71")) %>%
fct_relevel(num_days, "0", "7", "28", "71")-> percent_cells_df
percent_cells_df %>%
mutate(num_days = case_when(TimePoint == "T0" ~ "0",
TimePoint == "T1" ~ "7",
TimePoint == "T2" ~ "28",
TimePoint == "FollowUp" ~ "71")) %>%
mutate(num_days = as.factor(num_days)) %>%
factor(num_days, levels = c("0", "7", "28", "71")) -> percent_cells_df
percent_cells_df %>%
mutate(num_days = case_when(TimePoint == "T0" ~ "0",
TimePoint == "T1" ~ "7",
TimePoint == "T2" ~ "28",
TimePoint == "FollowUp" ~ "71")) %>%
mutate(num_days = as.factor(num_days))
percent_cells_df %>%
mutate(num_days = case_when(TimePoint == "T0" ~ "0",
TimePoint == "T1" ~ "7",
TimePoint == "T2" ~ "28",
TimePoint == "FollowUp" ~ "71")) %>%
mutate(num_days = as.factor(num_days)) %>%
factor(num_days, levels = c("0", "7", "28", "71"))
percent_cells_df %>%
mutate(num_days = case_when(TimePoint == "T0" ~ "0",
TimePoint == "T1" ~ "7",
TimePoint == "T2" ~ "28",
TimePoint == "FollowUp" ~ "71")) %>%
mutate(num_days = as.factor(num_days)) %>%
mutate(num_days = fct_relevel(num_days, "0", "7", "28", "71")) -> percent_cells_df
percent_cells_df
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, Genotype, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
group_by(num_days, Species, Genotype, Treatment) %>%
mutate(avg_percent_per_genet = mean(mean_replicate_percent_perID), se_percent_per_genet = std.error(mean_replicate_percent_perID)) %>%
ungroup() %>%
ggplot(., aes(x = num_days, y = avg_percent_per_genet))+
theme_classic()+
geom_jitter(aes(y=mean_replicate_percent_perID, color = Treatment, fill = Treatment),
position=position_dodge(width=0.3),
alpha=0.2, pch = 21,
color = "black") +
geom_errorbar(aes(x = num_days, ymax = avg_percent_per_genet+se_percent_per_genet, ymin = avg_percent_per_genet-se_percent_per_genet, color = Treatment), width = .2, position = position_dodge(width=0.4)) +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
geom_point(mapping = aes(x = num_days, ymax = avg_percent_per_genet+se_percent_per_genet, ymin = avg_percent_per_genet-se_percent_per_genet, fill = Treatment), size = 3, pch = 21, color = "black", position = position_dodge(width=0.4))+
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
xlab("Number of Days")+
ylab("% Phagocytic Activity")+
facet_wrap(~Species+Genotype, scales = "free_x") +
theme(text = element_text(size = 15))
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
group_by(num_days, Species, Treatment) %>%
mutate(avg_percent_per_genet = mean(mean_replicate_percent_perID), se_percent_per_genet = std.error(mean_replicate_percent_perID)) %>%
ungroup() %>%
ggplot(., aes(x = num_days, y = avg_percent_per_genet))+
theme_classic()+
geom_jitter(aes(y=mean_replicate_percent_perID, color = Treatment, fill = Treatment),
position=position_dodge(width=0.3),
alpha=0.2, pch = 21,
color = "black") +
geom_errorbar(aes(x = num_days, ymax = avg_percent_per_genet+se_percent_per_genet, ymin = avg_percent_per_genet-se_percent_per_genet, color = Treatment), width = .2, position = position_dodge(width=0.4)) +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
geom_point(mapping = aes(x = num_days, ymax = avg_percent_per_genet+se_percent_per_genet, ymin = avg_percent_per_genet-se_percent_per_genet, fill = Treatment), size = 3, pch = 21, color = "black", position = position_dodge(width=0.4))+
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
xlab("Number of Days")+
ylab("% Phagocytic Activity")+
facet_wrap(~Species, scales = "free_x") +
theme(text = element_text(size = 15))
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() -> percent_cells_speciestreatments
str(percent_cells_speciestreatments)
percent_cells_speciestreatments %>%
mutate_at(vars(TimePoint, Species, Treatment, num_days), factor) -> percent_cells_speciestreatments
str(percent_cells_speciestreatments)
treat_model <- lm(mean_replicate_percent_perID ~ Treatment*Species + Genotype + Tank, data = percent_cells_speciestreatments)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #not significant
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3)
treat_model <- lm(mean_replicate_percent_perID ~ Treatment*Species*num_days + Genotype + Tank, data = percent_cells_speciestreatments)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #significant
treat_model_metrics %>%
filter(abs(.std.resid) > 3)
#remove outliers
percent_cells_speciestreatments <- percent_cells_speciestreatments[!rownames(percent_cells_speciestreatments) %in% treat_outliers$.rownames,]
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3) -> treat_outliers
percent_cells_speciestreatments
#remove outliers
percent_cells_speciestreatments <- percent_cells_speciestreatments[!rownames(percent_cells_speciestreatments) %in% treat_outliers$.rownames,]
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3)
percent_cells_speciestreatments %>%
filter(Treatment == "Treated" & Species == "Pcli" & Genotype == "A" & "num_days" == "71")
percent_cells_speciestreatments %>%
filter(Treatment == "Treated" & Species == "Pcli" & Genotype == "A")
percent_cells_speciestreatments %>%
filter(Treatment == "Treated" & Species == "Pcli" & Genotype == "A" & TimePoint == "FollowUp")
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3)
percent_cells_speciestreatments %>%
filter(Treatment == "Treated" & Species == "Pcli" & Genotype == "A" & TimePoint == "FollowUp")
percent_cells_speciestreatments %>%
filter(Treatment == "Treated" & Species == "Pcli" & Genotype == "A" & TimePoint == "FollowUp") %>%
arrange(desc(mean_replicate_percent_perID))
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3)
percent_cells_speciestreatments %>%
filter(Treatment == "Treated" & Species == "Pcli" & Genotype == "A" & TimePoint == "FollowUp") %>%
arrange(desc(mean_replicate_percent_perID))
percent_cells_speciestreatments %>%
filter(Treatment == "Treated" & Species == "Pcli" & Genotype == "A" & TimePoint == "FollowUp") %>%
filter(mean_replicate_percent_perID < 20)
percent_cells_speciestreatments
percent_cells_speciestreatments %>%
filter(Treatment == "Treated" & Species == "Pcli" & Genotype == "A" & TimePoint == "FollowUp") %>%
filter(mean_replicate_percent_perID < 20)
percent_cells_speciestreatments %>%
filter(Treatment == "Treated" & Species == "Pcli" & Genotype == "A" & TimePoint == "FollowUp") %>%
filter(mean_replicate_percent_perID > 20)
percent_cells_speciestreatments %>%
filter(Treatment == "Treated" & Species == "Pcli" & Genotype == "A" & TimePoint == "FollowUp") %>%
filter(mean_replicate_percent_perID > 19)
percent_cells_speciestreatments %>%
filter(!(Treatment == "Treated" & Species == "Pcli" & Genotype == "A" & TimePoint == "FollowUp")) %>%
filter(!(mean_replicate_percent_perID > 19))
percent_cells_speciestreatments %>%
filter(!(Treatment == "Treated" & Species == "Pcli" & Genotype == "A" & TimePoint == "FollowUp" & mean_replicate_percent_perID > 19 ))
percent_cells_speciestreatments<- percent_cells_speciestreatments %>%
filter(!(Treatment == "Treated" & Species == "Pcli" & Genotype == "A" & TimePoint == "FollowUp" & mean_replicate_percent_perID > 19 ))
#rerun normality and homogeneity tests to see if they're normal now
treat_model <- lm(mean_replicate_percent_perID ~ Treatment*Species*num_days + Genotype + Tank, data = percent_cells_speciestreatments)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species*num_days, data = treat_model_metrics) #significant
#kruskal wallis test
percent_cells_speciestreatments$Treatment_Species_numdays <- interaction (percent_cells_speciestreatments$Treatment, percent_cells_speciestreatments$Species, percent_cells_speciestreatments$num_days)
#kruskal wallis test
percent_cells_speciestreatments$Treatment_Species_numdays <- interaction(percent_cells_speciestreatments$Treatment, percent_cells_speciestreatments$Species, percent_cells_speciestreatments$num_days)
percent_cells_speciestreatments
kruskal.test(mean_replicate_percent_perID ~ Treatment_Species_numdays, data = percent_cells_speciestreatments, method = "bonferroni")
kruskal_test(mean_replicate_percent_perID ~ Treatment_Species_numdays, data = percent_cells_speciestreatments, method = "bonferroni")
mean_replicate_percent_perID
percent_cells_speciestreatments
kruskal_test(mean_replicate_percent_perID ~ Treatment_Species_numdays, data = percent_cells_speciestreatments, method = "bonferroni")
percent_cells_speciestreatments
percent_cells_speciestreatments
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) -> percent_cells_speciestreatments
percent_cells_speciestreatments
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() -> percent_cells_speciestreatments
percent_cells_speciestreatments
str(percent_cells_speciestreatments)
percent_cells_speciestreatments %>%
mutate_at(vars(TimePoint, Species, Treatment, num_days), factor) -> percent_cells_speciestreatments
percent_cells_speciestreatments %>%
mutate_at(vars( Species, Treatment, num_days), factor) -> percent_cells_speciestreatments
treat_model <- lm(mean_replicate_percent_perID ~ Treatment*Species*num_days + Genotype + Tank, data = percent_cells_speciestreatments)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #significant
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3)
percent_cells_speciestreatments
percent_cells_speciestreatments<- percent_cells_speciestreatments %>%
filter(!(Treatment == "Treated" & Species == "Pcli" & Genotype == "A" & TimePoint == "FollowUp" & mean_replicate_percent_perID > 19 ))
percent_cells_speciestreatments<- percent_cells_speciestreatments %>%
filter(!(Treatment == "Treated" & Species == "Pcli" & Genotype == "A" & num_days = "71" & mean_replicate_percent_perID > 19 ))
percent_cells_speciestreatments<- percent_cells_speciestreatments %>%
filter(!(Treatment == "Treated" & Species == "Pcli" & Genotype == "A" & num_days == "71" & mean_replicate_percent_perID > 19 ))
percent_cells_speciestreatments
#rerun normality and homogeneity tests to see if they're normal now
treat_model <- lm(mean_replicate_percent_perID ~ Treatment*Species*num_days + Genotype + Tank, data = percent_cells_speciestreatments)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species*num_days, data = treat_model_metrics) #significant
#kruskal wallis test
percent_cells_speciestreatments$Treatment_Species_numdays <- interaction(percent_cells_speciestreatments$Treatment, percent_cells_speciestreatments$Species, percent_cells_speciestreatments$num_days)
kruskal_test(mean_replicate_percent_perID ~ Treatment_Species_numdays, data = percent_cells_speciestreatments, method = "bonferroni")
percent_cells_speciestreatments
kruskal_test(percent_cells_speciestreatments, mean_replicate_percent_perID ~ Treatment_Species_numdays)
dunn.test(percent_cells_speciestreatments$mean_replicate_percent_perID, percent_cells_speciestreatments$Treatment_Species_numdays, method = "bonferroni")
as.data.frame(dunn.test(percent_cells_speciestreatments$mean_replicate_percent_perID, percent_cells_speciestreatments$Treatment_Species_numdays, method = "bonferroni"))
as.data.frame(dunn.test(percent_cells_speciestreatments$mean_replicate_percent_perID, percent_cells_speciestreatments$Treatment_Species_numdays, method = "bonferroni")) %>%
write_csv("percent_cells_speciestreatments.csv")
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() -> percent_cells_speciestreatments
percent_cells_speciestreatments
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
pivot_wider(names_from = "num_days", values_from = "mean_replicate_percent_perID")
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct()
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
select(!ID) %>%
pivot_wider(names_from = "num_days", values_from = "mean_replicate_percent_perID")
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
select(!ID) %>%
pivot_wider(names_from = "num_days", values_from = "mean_replicate_percent_perID")
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
select(!ID)
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
select(!ID) %>%
mutate(mean_percent = mean(mean_replicate_percent_perID), sd = sd(mean_replicate_percent_perID))
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
select(!ID) %>%
mutate(mean_percent = mean(mean_replicate_percent_perID), sd = sd(mean_replicate_percent_perID)) %>%
pivot_wider(names_from = "num_days", values_from = "mean_percent")
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
select(!ID) %>%
group_by(Species, Genotype, Tank, Treatment, num_days) %>%
mutate(mean_percent = mean(mean_replicate_percent_perID), sd = sd(mean_replicate_percent_perID)) %>%
pivot_wider(names_from = "num_days", values_from = "mean_percent")
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
select(!ID) %>%
group_by(Species, Genotype, Tank, Treatment, num_days) %>%
mutate(mean_percent = mean(mean_replicate_percent_perID), sd = sd(mean_replicate_percent_perID))
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
select(!ID) %>%
group_by(Species, Genotype, Tank, Treatment, num_days) %>%
mutate(mean_percent = mean(mean_replicate_percent_perID)) %>%
select(Species, Genotype, Tank, Treatment, num_days, mean_percent) %>%
pivot_wider(names_from = "num_days", values_from = "mean_percent")
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
select(!ID) %>%
group_by(Species, Genotype, Treatment, num_days) %>%
mutate(mean_percent = mean(mean_replicate_percent_perID)) %>%
select(Species, Genotype, Tank, Treatment, num_days, mean_percent) %>%
pivot_wider(names_from = "num_days", values_from = "mean_percent")
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
select(!ID) %>%
group_by(Species, Genotype, Treatment, num_days) %>%
mutate(mean_percent = mean(mean_replicate_percent_perID)) %>%
select(Species, Genotype, Treatment, num_days, mean_percent) %>%
pivot_wider(names_from = "num_days", values_from = "mean_percent")
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
select(!ID) %>%
group_by(Species, Genotype, Tank, Treatment, num_days)
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
select(!ID) %>%
group_by(Species Treatment, num_days) %>%
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
select(!ID) %>%
group_by(Species Treatment, num_days) %>%
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
select(!ID) %>%
group_by(Species, Treatment, num_days) %>%
mutate(mean_percent = mean(mean_replicate_percent_perID))
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
select(!ID) %>%
group_by(Species, Treatment, num_days) %>%
mutate(mean_percent = mean(mean_replicate_percent_perID)) %>%
select(Species, Treatment, num_days, mean_percent)
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
select(!ID) %>%
group_by(Species, Treatment, num_days) %>%
mutate(mean_percent = mean(mean_replicate_percent_perID)) %>%
select(Species, Treatment, num_days, mean_percent) %>%
distinct()
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
select(!ID) %>%
group_by(Species, Treatment, num_days) %>%
mutate(mean_percent = mean(mean_replicate_percent_perID)) %>%
select(Species, Treatment, num_days, mean_percent) %>%
distinct() %>%
pivot_wider(names_from = "num_days", values_from = "mean_percent")
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() -> percent_cells_speciestreatments
#average all technical replicates together before running stats
cell_means <- summarySE(percent_cells_speciestreatments, measurevar="mean_replicate_percent_perID", groupvars=c("Species","Treatment"))
library(Rmisc)
#average all technical replicates together before running stats
cell_means <- summarySE(percent_cells_speciestreatments, measurevar="mean_replicate_percent_perID", groupvars=c("Species","Treatment"))
cell_means
#average all technical replicates together before running stats
cell_means <- summarySE(percent_cells_speciestreatments, measurevar="mean_replicate_percent_perID", groupvars=c("Species","Treatment", "num_days"))
cell_means
