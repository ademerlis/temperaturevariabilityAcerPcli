pivot_longer(T1:T8, names_to="Tank", values_to ="Temp") %>%
tidyr::separate(Time, c("Date", "Time"), sep = "\\ ") %>%
mutate(Treatment = case_when(Tank == "T1" ~ "control",
Tank == "T2" ~ "variable",
Tank == "T3" ~ "variable",
Tank == "T4" ~ "control",
Tank == "T5" ~ "variable",
Tank == "T6" ~ "control",
Tank == "T7" ~ "control",
Tank == "T8" ~ "tank_8")) %>%
mutate(Species = case_when(Tank == "T1" ~ "Pclivosa",
Tank == "T2" ~ "Pclivosa",
Tank == "T3" ~ "Pclivosa",
Tank == "T4" ~ "Pclivosa",
Tank == "T5" ~ "Acervicornis",
Tank == "T6" ~ "Acervicornis",
Tank == "T7" ~ "Acervicornis",
Tank == "T8" ~ "Acervicornis")) %>%
group_by(Tank, Date, Treatment, Species) %>%
summarise(daily_max = max(Temp), daily_min = min(Temp), daily_range = (max(Temp)-min(Temp))) %>%
ungroup()
str(maxminrange_summarytable)
maxminrange_summarytable %>%
mutate(across(c(Tank,Date,Treatment,Species), as.factor))
maxminrange_summarytable <- maxminrange_summarytable %>%
mutate(across(c(Tank,Date,Treatment,Species), as.factor))
str(maxminrange_summarytable)
maxminrange_summarytable %>%
filter(Species == "Acervicornis") %>%
aov(daily_max ~ Tank, data = .) -> model1
summary(model1)
qqnorm(residuals(model1))
qqline(residuals(model1))
shapiro.test(residuals(model1)) #significant
#Non parametric test
maxminrange_summarytable %>%
filter(Species == "Acervicornis") %>%
kruskal_test(., daily_max ~ Tank)
maxminrange_summarytable %>%
filter(Species == "Acervicornis") -> df
dunn.test(df$daily_max, df$Tank, method = "bonferroni")
maxminrange_summarytable %>%
aov(daily_max ~ Tank, data = .) -> model1
summary(model1)
qqnorm(residuals(model1))
qqline(residuals(model1))
dunn.test(maxminrange_summarytable$daily_max, maxminrange_summarytable$Tank, method = "bonferroni")
#dunn's test assumption is that distribution of groups is similar
ggqqplot(maxminrange_summarytable, "daily_max", facet.by = "Tank")
maxminrange_summarytable %>%
aov(daily_min ~ Tank, data = .) -> model2
summary(model2)
qqnorm(residuals(model2))
qqline(residuals(model2))
#Non parametric test
maxminrange_summarytable %>%
kruskal_test(., daily_max ~ Tank) #significant
#Non parametric test
maxminrange_summarytable %>%
kruskal_test(., daily_min ~ Tank) #significant
dunn.test(maxminrange_summarytable$daily_min, maxminrange_summarytable$Tank, method = "bonferroni")
#dunn's test assumption is that distribution of groups is similar
ggqqplot(maxminrange_summarytable, "daily_min", facet.by = "Tank")
maxminrange_summarytable %>%
aov(daily_range ~ Tank, data = .) -> model3
summary(model3)
qqnorm(residuals(model3))
qqline(residuals(model3))
#Non parametric test
maxminrange_summarytable %>%
kruskal_test(., daily_range ~ Tank) #significant
dunn.test(maxminrange_summarytable$daily_range, maxminrange_summarytable$Tank, method = "bonferroni")
#dunn's test assumption is that distribution of groups is similar
ggqqplot(maxminrange_summarytable, "daily_range", facet.by = "Tank")
dunn.test(maxminrange_summarytable$daily_max, maxminrange_summarytable$Tank, method = "bonferroni")
maxminrange_summarytable
dunn.test(maxminrange_summarytable$daily_max, maxminrange_summarytable$Tank, method = "bonferroni")
dunn.test(maxminrange_summarytable$daily_range, maxminrange_summarytable$Tank, method = "bonferroni")
pairwise.wilcox.test(maxminrange_summarytable$daily_max, maxminrange_summarytable$Tank, p.adjust.method = "BH")
maxminrange_summarytable
ggplot(meanmaxminrange_summarytable, aes(x=Treatment, y=mean_daily_max, color=Tank)) +
geom_point() +
geom_errorbar(aes(ymin = mean_daily_max - sd_daily_max, ymax = mean_daily_max + sd_daily_max), width = 0.2) +
theme_classic()
ggplot(meanmaxminrange_summarytable, aes(x=Treatment, y=mean_daily_min, color=Tank)) +
geom_point() +
geom_errorbar(aes(ymin = mean_daily_min - sd_daily_min, ymax = mean_daily_min + sd_daily_min), width = 0.2) +
theme_classic()
ggplot(meanmaxminrange_summarytable, aes(x=Treatment, y=mean_daily_range, color=Tank)) +
geom_point() +
geom_errorbar(aes(ymin = mean_daily_range - sd_daily_range, ymax = mean_daily_range + sd_daily_range), width = 0.2) +
theme_classic()
meanmaxminrange_summarytable
meanmaxminrange_summarytable %>%
group_by(Treatment) %>% summarise(mean_daily_max=mean(daily_max),sd_daily_max=sd(daily_max), mean_daily_min=mean(daily_min),sd_daily_min=sd(daily_min),mean_daily_range=mean(daily_max - daily_min), sd_daily_range=sd(daily_max - daily_min))
meanmaxminrange_summarytable %>%
group_by(Treatment)
meanmaxminrange_summarytable %>%
group_by(Treatment) %>% summarise(mean_max=mean(mean_daily_max),sd_max=sd(mean_daily_max), mean_min=mean(mean_daily_min),sd_min=sd(mean_daily_min),mean_range=mean(mean_daily_max - mean_daily_min), sd_daily_range=sd(mean_daily_max - mean_daily_min))
dunn.test(df$fvfm_loss_norm, df$colony_tank, method = "bonferroni")
treatment_normalized_bothspecies %>%
filter(Species == "Acervicornis") -> df
dunn.test(df$fvfm_loss_norm, df$Tank, method = "bonferroni")
dunn.test(df$fvfm_loss_norm, df$colony_tank, method = "bonferroni")
#do nonparametric test with interaction term of colony and tank
df$colony_tank <- interaction(df$Colony, df$Tank)
dunn.test(df$fvfm_loss_norm, df$colony_tank, method = "bonferroni")
pairwise.wilcox.test(maxminrange_summarytable$daily_range, maxminrange_summarytable$Tank, p.adjust.method = "BH")
treatment_normalized_bothspecies%>%
filter(Species == "Acervicornis") %>%
ggplot(., aes(x=Tank, y= fvfm_loss_norm, color= Tank)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitterdodge(), alpha=0.3) +
theme_classic() +
labs(y = "Decline in Fv/Fm", x="Tank") +
# scale_fill_manual(labels=c("Untreated", "Treated"), values = c( "#60DBDB", "#F54A34"))  +
# scale_color_manual(labels=c("Untreated", "Treated"), values = c( "#60DBDB", "#F54A34")) +
theme(text = element_text(size = 15))
#Try non parametric test instead
treatment_normalized_bothspecies %>%
filter(Species == "Acervicornis") %>%
kruskal_test(., fvfm_loss_norm ~ Tank)
treatment_normalized_bothspecies %>%
filter(Species == "Acervicornis") -> df
dunn.test(df$fvfm_loss_norm, df$Tank, method = "bonferroni")
pairwise.wilcox.test(df$fvfm_loss_norm, df$colony_tank, p.adjust.method = "BH")
#do nonparametric test with interaction term of colony and tank
df$colony_tank <- interaction(df$Colony, df$Tank)
pairwise.wilcox.test(df$fvfm_loss_norm, df$colony_tank, p.adjust.method = "BH")
dunn.test(df$fvfm_loss_norm, df$colony_tank, method = "bonferroni")
dunn.test(maxminrange_summarytable$daily_range, maxminrange_summarytable$Tank, method = "bonferroni")
treatment_time_bothspecies %>%
dplyr::select(!c(`2022-04-06`:`2022-04-20`)) %>%
mutate(numDays = as.factor(numDays)) %>%
ggplot(., aes(x=numDays, y=fvfm, fill = Treatment, color = Treatment)) +
geom_boxplot(color = "black", outlier.shape = NA, alpha=0.3) + #not removing outliers, just removing the black dots because they are already represented in the geom_point() line
geom_point(position = position_jitterdodge(), alpha=0.3) +
stat_summary(fun=mean, geom="line", aes(group=Treatment, color = Treatment), position = position_dodge(width = 0.5)) +
facet_wrap(~Species) +
theme_classic() +
labs(y = "Fv/Fm", x = "Days in Treatment") +
scale_fill_manual(labels=c("Untreated", "Treated"), values = c( "#60DBDB", "#F54A34"))  +
scale_color_manual(labels=c("Untreated", "Treated"), values = c( "#60DBDB", "#F54A34")) +
theme(text = element_text(size = 14))
View(ipam_tidy_data)
treatment_time_bothspecies <- ipam_tidy_data %>%
dplyr::filter(!Treatment_period == "CBASS") %>%
drop_na(Colony) %>% #this is because there are some corals that never matched up to IPAM values so they're just NA
dplyr::select(Date, Colony, Puck, Tank, fvfm, Treatment, Species)
treatment_time_bothspecies <- ipam_tidy_data %>%
dplyr::filter(!Treatment_period == "CBASS") %>%
drop_na(Colony) %>% #this is because there are some corals that never matched up to IPAM values so they're just NA
dplyr::select(Date, Colony, Puck, Tank, fvfm, Treatment, Species) %>%
dplyr::filter(Date <= "2022-04-20") %>%
pivot_wider(names_from = Date, values_from = fvfm) %>%
mutate(fvfm_t0 = case_when(Species == "Acervicornis" ~ `2022-03-16`,
Species == "Pclivosa" ~ `2022-03-21`)) %>%
mutate(fvfm_t1 = case_when(Species == "Acervicornis" ~ `2022-04-06`,
Species == "Pclivosa" ~ `2022-04-06`)) %>%
mutate(fvfm_t2 = case_when(Species == "Acervicornis" ~ `2022-04-20`,
Species == "Pclivosa" ~ `2022-04-20`)) %>%
pivot_longer(fvfm_t0:fvfm_t2, names_to = "fvfm_timepoint", values_to = "fvfm") %>%
mutate(numDays = case_when(fvfm_timepoint == "fvfm_t0" ~ 0,
Species == "Pclivosa" & fvfm_timepoint == "fvfm_t1" ~ 16,
Species == "Acervicornis" & fvfm_timepoint == "fvfm_t1" ~ 21,
Species == "Pclivosa" & fvfm_timepoint == "fvfm_t2" ~ 30,
Species == "Acervicornis" & fvfm_timepoint == "fvfm_t2" ~ 35,
Species == "Pclivosa" & fvfm_timepoint == "fvfm_t3" ~ 65,
Species == "Acervicornis" & fvfm_timepoint == "fvfm_t3" ~ 70))
treatment_time_bothspecies <- ipam_tidy_data %>%
dplyr::filter(!Treatment_period == "CBASS") %>%
drop_na(Colony) %>% #this is because there are some corals that never matched up to IPAM values so they're just NA
dplyr::select(Date, Colony, Puck, Tank, fvfm, Treatment, Species) %>%
dplyr::filter(Date <= "2022-04-20") %>%
mutate(Treatment = case_when(Tank == "T8" ~ "Tank_8"))
treatment_time_bothspecies
treatment_time_bothspecies <- ipam_tidy_data %>%
dplyr::filter(!Treatment_period == "CBASS") %>%
drop_na(Colony) %>% #this is because there are some corals that never matched up to IPAM values so they're just NA
dplyr::select(Date, Colony, Puck, Tank, fvfm, Treatment, Species) %>%
dplyr::filter(Date <= "2022-04-20") %>%
mutate(Treatment = case_when(Tank == "8" ~ "Tank_8"))
treatment_time_bothspecies
treatment_time_bothspecies <- ipam_tidy_data %>%
dplyr::filter(!Treatment_period == "CBASS") %>%
drop_na(Colony) %>% #this is because there are some corals that never matched up to IPAM values so they're just NA
dplyr::select(Date, Colony, Puck, Tank, fvfm, Treatment, Species) %>%
dplyr::filter(Date <= "2022-04-20") %>%
mutate(Treatment = case_when(Tank == "1" ~ "Untreated",
Tank == "2" ~ "Treated",
Tank == "3" ~ "Treated",
Tank == "4" ~ "Untreated",
Tank == "5" ~ "Treated",
Tank == "6" ~ "Untreated",
Tank == "7" ~ "Untreated",
Tank == "8" ~ "tank_8"))
treatment_time_bothspecies
treatment_time_bothspecies <- ipam_tidy_data %>%
dplyr::filter(!Treatment_period == "CBASS") %>%
drop_na(Colony) %>% #this is because there are some corals that never matched up to IPAM values so they're just NA
dplyr::select(Date, Colony, Puck, Tank, fvfm, Treatment, Species) %>%
dplyr::filter(Date <= "2022-04-20") %>%
mutate(Treatment = case_when(Tank == "1" ~ "Untreated",
Tank == "2" ~ "Treated",
Tank == "3" ~ "Treated",
Tank == "4" ~ "Untreated",
Tank == "5" ~ "Treated",
Tank == "6" ~ "Untreated",
Tank == "7" ~ "Untreated",
Tank == "8" ~ "tank_8")) %>%
pivot_wider(names_from = Date, values_from = fvfm) %>%
mutate(fvfm_t0 = case_when(Species == "Acervicornis" ~ `2022-03-16`,
Species == "Pclivosa" ~ `2022-03-21`)) %>%
mutate(fvfm_t1 = case_when(Species == "Acervicornis" ~ `2022-04-06`,
Species == "Pclivosa" ~ `2022-04-06`)) %>%
mutate(fvfm_t2 = case_when(Species == "Acervicornis" ~ `2022-04-20`,
Species == "Pclivosa" ~ `2022-04-20`)) %>%
pivot_longer(fvfm_t0:fvfm_t2, names_to = "fvfm_timepoint", values_to = "fvfm") %>%
mutate(numDays = case_when(fvfm_timepoint == "fvfm_t0" ~ 0,
Species == "Pclivosa" & fvfm_timepoint == "fvfm_t1" ~ 16,
Species == "Acervicornis" & fvfm_timepoint == "fvfm_t1" ~ 21,
Species == "Pclivosa" & fvfm_timepoint == "fvfm_t2" ~ 30,
Species == "Acervicornis" & fvfm_timepoint == "fvfm_t2" ~ 35,
Species == "Pclivosa" & fvfm_timepoint == "fvfm_t3" ~ 65,
Species == "Acervicornis" & fvfm_timepoint == "fvfm_t3" ~ 70))
treatment_normalized_bothspecies <- ipam_tidy_data %>%
dplyr::filter(!Treatment_period == "CBASS") %>%
drop_na(Colony) %>% #this is because there are some corals that never matched up to IPAM values so they're just NA
dplyr::select(Date, Colony, Puck, Tank, fvfm, Treatment, Species)  %>%
mutate(Treatment = case_when(Tank == "1" ~ "Untreated",
Tank == "2" ~ "Treated",
Tank == "3" ~ "Treated",
Tank == "4" ~ "Untreated",
Tank == "5" ~ "Treated",
Tank == "6" ~ "Untreated",
Tank == "7" ~ "Untreated",
Tank == "8" ~ "tank_8")) %>%
dplyr::filter(Date <= "2022-04-20") %>% #pre-CBASS time points
pivot_wider(names_from = Date, values_from = fvfm) %>%
mutate(fvfm_loss = case_when(Species == "Acervicornis" ~ `2022-03-16` - `2022-04-20`,
Species == "Pclivosa" ~ `2022-03-21` - `2022-04-20`)) %>%
mutate(fvfm_loss_norm = case_when(Species == "Acervicornis" ~ fvfm_loss/`2022-03-16`,
Species == "Pclivosa" ~ fvfm_loss/`2022-03-21`))
treatment_time_bothspecies %>%
dplyr::select(!c(`2022-04-06`:`2022-04-20`)) %>%
mutate(numDays = as.factor(numDays)) %>%
ggplot(., aes(x=numDays, y=fvfm, fill = Treatment, color = Treatment)) +
geom_boxplot(color = "black", outlier.shape = NA, alpha=0.3) + #not removing outliers, just removing the black dots because they are already represented in the geom_point() line
geom_point(position = position_jitterdodge(), alpha=0.3) +
stat_summary(fun=mean, geom="line", aes(group=Treatment, color = Treatment), position = position_dodge(width = 0.5)) +
facet_wrap(~Species) +
theme_classic() +
labs(y = "Fv/Fm", x = "Days in Treatment") +
scale_fill_manual(labels=c("Untreated", "Treated"), values = c( "#60DBDB", "#F54A34"))  +
scale_color_manual(labels=c("Untreated", "Treated"), values = c( "#60DBDB", "#F54A34")) +
theme(text = element_text(size = 14))
treatment_time_bothspecies %>%
dplyr::select(!c(`2022-04-06`:`2022-04-20`)) %>%
mutate(numDays = as.factor(numDays)) %>%
ggplot(., aes(x=numDays, y=fvfm, fill = Treatment, color = Treatment)) +
geom_boxplot(color = "black", outlier.shape = NA, alpha=0.3) + #not removing outliers, just removing the black dots because they are already represented in the geom_point() line
geom_point(position = position_jitterdodge(), alpha=0.3) +
stat_summary(fun=mean, geom="line", aes(group=Treatment, color = Treatment), position = position_dodge(width = 0.5)) +
facet_wrap(~Species) +
theme_classic() +
labs(y = "Fv/Fm", x = "Days in Treatment") +
scale_fill_manual(labels=c("Untreated", "Treated", "Tank 8"), values = c( "#60DBDB", "#F54A34", "grey"))  +
scale_color_manual(labels=c("Untreated", "Treated", "Tank 8"), values = c( "#60DBDB", "#F54A34", "grey")) +
theme(text = element_text(size = 14))
treatment_time_bothspecies %>%
dplyr::select(!c(`2022-04-06`:`2022-04-20`)) %>%
mutate(numDays = as.factor(numDays)) %>%
ggplot(., aes(x=numDays, y=fvfm, fill = Treatment, color = Treatment)) +
geom_boxplot(color = "black", outlier.shape = NA, alpha=0.3) + #not removing outliers, just removing the black dots because they are already represented in the geom_point() line
geom_point(position = position_jitterdodge(), alpha=0.3) +
stat_summary(fun=mean, geom="line", aes(group=Treatment, color = Treatment), position = position_dodge(width = 0.5)) +
facet_wrap(~Species) +
theme_classic() +
labs(y = "Fv/Fm", x = "Days in Treatment") +
scale_fill_manual(labels=c("Tank 8", "Treated", "Untreated"), values = c("grey", "#F54A34", "#60DBDB"))  +
scale_color_manual(labels=c("Tank 8", "Treated", "Untreated"), values = c("grey", "#F54A34", "#60DBDB")) +
theme(text = element_text(size = 14))
ggsave("treatment_bothspecies_overtimeboxplots.pdf")
treatment_time_bothspecies%>%
dplyr::select(!c(`2022-04-06`:`2022-04-20`)) %>%
mutate(numDays = as.factor(numDays)) %>%
ggplot(., aes(x=numDays, y=fvfm, fill = Treatment, color = Treatment)) +
geom_boxplot(color = "black", outlier.shape = NA,  alpha=0.3) + #not removing outliers, just removing the black dots because they are already represented in the geom_point() line
geom_point(position = position_jitterdodge(), alpha=0.3) +
stat_summary(fun=mean, geom="line", aes(group=Treatment, color = Treatment), position = position_dodge(width = 0.5)) +
facet_wrap(~Species + Colony) +
theme_classic() +
labs(y = "Fv/Fm", x = "Days in Treatment") +
scale_fill_manual(labels=c("Tank 8", "Treated", "Untreated"), values = c("grey", "#F54A34", "#60DBDB"))  +
scale_color_manual(labels=c("Tank 8", "Treated", "Untreated"), values = c("grey", "#F54A34", "#60DBDB")) +
theme(text = element_text(size = 14))
treatment_normalized_bothspecies%>%
ggplot(., aes(x=Treatment, y= fvfm_loss_norm, color= Treatment)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitterdodge(), alpha=0.3) +
theme_classic() +
labs(y = "Normalized Reduction of Fv/Fm", x="Treatment") +
scale_fill_manual(labels=c("Tank 8", "Treated", "Untreated"), values = c("grey", "#F54A34", "#60DBDB"))  +
scale_color_manual(labels=c("Tank 8", "Treated", "Untreated"), values = c("grey", "#F54A34", "#60DBDB")) +
theme(text = element_text(size = 12)) +
facet_wrap(~Species, scales = "free_x")
treatment_normalized_bothspecies%>%
ggplot(., aes(x=Treatment, y= fvfm_loss_norm, color= Treatment)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitterdodge(), alpha=0.3) +
theme_classic() +
labs(y = "Normalized Reduction of Fv/Fm", x="Tank") +
scale_fill_manual(labels=c("Tank 8", "Treated", "Untreated"), values = c("grey", "#F54A34", "#60DBDB"))  +
scale_color_manual(labels=c("Tank 8", "Treated", "Untreated"), values = c("grey", "#F54A34", "#60DBDB")) +
theme(text = element_text(size = 12)) +
facet_wrap(~Species, scales = "free_x")
treatment_normalized_bothspecies%>%
ggplot(., aes(x=Treatment, y= fvfm_loss_norm, color= Treatment)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitterdodge(), alpha=0.3) +
theme_classic() +
labs(y = "Normalized Reduction of Fv/Fm", x="Treatment") +
scale_fill_manual(labels=c("Tank 8", "Treated", "Untreated"), values = c("grey", "#F54A34", "#60DBDB"))  +
scale_color_manual(labels=c("Tank 8", "Treated", "Untreated"), values = c("grey", "#F54A34", "#60DBDB")) +
theme(text = element_text(size = 12)) +
facet_wrap(~Species, scales = "free_x")
str(treatment_normalized_bothspecies)
treatment_normalized_bothspecies %>%
mutate_at(vars(Colony, Puck, Tank, Treatment, Species), factor) -> treatment_normalized_bothspecies
treatment_normalized_bothspecies %>%
drop_na(fvfm_loss_norm) %>%
anova_test(
fvfm_loss_norm ~ Treatment + Species + Colony+
Treatment*Species + Treatment*Colony +
Treatment*Species*Colony
)
treat_model <- lm(fvfm_loss_norm ~ Treatment*Species + Tank + Colony, data = treatment_normalized_bothspecies)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #not significant
treat_model_metrics %>%
filter(abs(.std.resid) > 3)
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3) -> treat_outliers
#remove outliers
treatment_normalized_bothspecies <- treatment_normalized_bothspecies[!rownames(treatment_normalized_bothspecies) %in% treat_outliers$.rownames,]
treatment_normalized_bothspecies
treat_outliers
full_model <- lme4::lmer(fvfm_loss_norm ~ Treatment*Species + (1|Tank) + (1|Colony), data = treatment_normalized_bothspecies, na.action=na.exclude)
AIC(full_model) #-832.9644
full_model <- lme4::lmer(fvfm_loss_norm ~ Treatment*Species + (1|Tank) + (1|Colony), data = treatment_normalized_bothspecies, na.action=na.exclude)
AIC(full_model) #-832.9644
logLik(full_model) #423.4822
summary(full_model) # to get variance of random effects
treatment_normalized_bothspecies%>%
ggplot(., aes(x=Colony, y= fvfm_loss_norm, color= Treatment)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitterdodge(), alpha=0.3) +
theme_classic() + labs(y = "Normalized Reduction of Fv/Fm", x="Genotype") +
scale_fill_manual(labels=c("Tank 8", "Treated", "Untreated"), values = c("grey", "#F54A34", "#60DBDB"))  +
scale_color_manual(labels=c("Tank 8", "Treated", "Untreated"), values = c("grey", "#F54A34", "#60DBDB")) +
theme(text = element_text(size = 12)) +
facet_wrap(~Species, scales = "free_x")
treatment_time_bothspecies %>%
dplyr::select(!c(`2022-04-06`:`2022-04-20`)) %>%
mutate(numDays = as.factor(numDays)) %>%
ggplot(., aes(x=numDays, y=fvfm, fill = Treatment, color = Treatment)) +
geom_boxplot(color = "black", outlier.shape = NA, alpha=0.3) + #not removing outliers, just removing the black dots because they are already represented in the geom_point() line
geom_point(position = position_jitterdodge(), alpha=0.3) +
stat_summary(fun=mean, geom="line", aes(group=Treatment, color = Treatment), position = position_dodge(width = 0.5)) +
facet_wrap(~Species) +
theme_classic() +
labs(y = "Fv/Fm", x = "Days in Treatment") +
scale_fill_manual(labels=c("Tank 8", "Treated", "Untreated"), values = c("grey", "#F54A34", "#60DBDB"))  +
scale_color_manual(labels=c("Tank 8", "Treated", "Untreated"), values = c("grey", "#F54A34", "#60DBDB")) +
theme(text = element_text(size = 14))
ggscatter(
treatment_normalized_bothspecies, x = "Colony", y = "fvfm_loss_norm",
facet.by  = c("Treatment", "Species")) +
geom_smooth(formula = y ~ x, method = "loess", span = 0.9)
treatment_normalized_bothspecies
ipam_tidy_data <- read.csv("ipam_tidy_data.csv")
treatment_time_bothspecies <- ipam_tidy_data %>%
dplyr::filter(!Treatment_period == "CBASS") %>%
drop_na(Colony) %>% #this is because there are some corals that never matched up to IPAM values so they're just NA
dplyr::select(Date, Colony, Puck, Tank, fvfm, Treatment, Species) %>%
dplyr::filter(Date <= "2022-04-20") %>%
mutate(Treatment = case_when(Tank == "1" ~ "Untreated",
Tank == "2" ~ "Treated",
Tank == "3" ~ "Treated",
Tank == "4" ~ "Untreated",
Tank == "5" ~ "Treated",
Tank == "6" ~ "Untreated",
Tank == "7" ~ "Untreated",
Tank == "8" ~ "tank_8")) %>%
pivot_wider(names_from = Date, values_from = fvfm) %>%
mutate(fvfm_t0 = case_when(Species == "Acervicornis" ~ `2022-03-16`,
Species == "Pclivosa" ~ `2022-03-21`)) %>%
mutate(fvfm_t1 = case_when(Species == "Acervicornis" ~ `2022-04-06`,
Species == "Pclivosa" ~ `2022-04-06`)) %>%
mutate(fvfm_t2 = case_when(Species == "Acervicornis" ~ `2022-04-20`,
Species == "Pclivosa" ~ `2022-04-20`)) %>%
pivot_longer(fvfm_t0:fvfm_t2, names_to = "fvfm_timepoint", values_to = "fvfm") %>%
mutate(numDays = case_when(fvfm_timepoint == "fvfm_t0" ~ 0,
Species == "Pclivosa" & fvfm_timepoint == "fvfm_t1" ~ 16,
Species == "Acervicornis" & fvfm_timepoint == "fvfm_t1" ~ 21,
Species == "Pclivosa" & fvfm_timepoint == "fvfm_t2" ~ 30,
Species == "Acervicornis" & fvfm_timepoint == "fvfm_t2" ~ 35,
Species == "Pclivosa" & fvfm_timepoint == "fvfm_t3" ~ 65,
Species == "Acervicornis" & fvfm_timepoint == "fvfm_t3" ~ 70))
treatment_normalized_bothspecies <- ipam_tidy_data %>%
dplyr::filter(!Treatment_period == "CBASS") %>%
drop_na(Colony) %>% #this is because there are some corals that never matched up to IPAM values so they're just NA
dplyr::select(Date, Colony, Puck, Tank, fvfm, Treatment, Species)  %>%
mutate(Treatment = case_when(Tank == "1" ~ "Untreated",
Tank == "2" ~ "Treated",
Tank == "3" ~ "Treated",
Tank == "4" ~ "Untreated",
Tank == "5" ~ "Treated",
Tank == "6" ~ "Untreated",
Tank == "7" ~ "Untreated",
Tank == "8" ~ "tank_8")) %>%
dplyr::filter(Date <= "2022-04-20") %>% #pre-CBASS time points
pivot_wider(names_from = Date, values_from = fvfm) %>%
mutate(fvfm_loss = case_when(Species == "Acervicornis" ~ `2022-03-16` - `2022-04-20`,
Species == "Pclivosa" ~ `2022-03-21` - `2022-04-20`)) %>%
mutate(fvfm_loss_norm = case_when(Species == "Acervicornis" ~ fvfm_loss/`2022-03-16`,
Species == "Pclivosa" ~ fvfm_loss/`2022-03-21`))
treatment_normalized_bothspecies
str(treatment_normalized_bothspecies)
#make factors: Colony, Puck, Tank, Treatment, Species
treatment_normalized_bothspecies %>%
mutate_at(vars(Colony, Puck, Tank, Treatment, Species), factor) -> treatment_normalized_bothspecies
treat_model <- lm(fvfm_loss_norm ~ Treatment*Species + Tank + Colony, data = treatment_normalized_bothspecies)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #not significant
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3) -> treat_outliers
# 2 outliers
#remove outliers
treatment_normalized_bothspecies <- treatment_normalized_bothspecies[!rownames(treatment_normalized_bothspecies) %in% treat_outliers$.rownames,]
treatment_normalized_bothspecies
treat_model <- lm(fvfm_loss_norm ~ Treatment*Species*Colony + Tank, data = treatment_normalized_bothspecies)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #not significant
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3) -> treat_outliers
treat_outliers
aov(fvfm_loss_norm ~ Treatment*Species*Colony, data = treatment_normalized_bothspecies)
summary(aov(fvfm_loss_norm ~ Treatment*Species*Colony, data = treatment_normalized_bothspecies))
TukeyHSD(aov(fvfm_loss_norm ~ Treatment*Species*Colony, data = treatment_normalized_bothspecies))
summary(aov(fvfm_loss_norm ~ Treatment*Species*Colony, data = treatment_normalized_bothspecies))
aov(fvfm_loss_norm ~ Treatment*Species*Colony, data = treatment_normalized_bothspecies)
summary(aov(fvfm_loss_norm ~ Treatment*Species*Colony, data = treatment_normalized_bothspecies))
aov(fvfm_loss_norm ~ Treatment*Species= data = treatment_normalized_bothspecies)
aov(fvfm_loss_norm ~ Treatment*Species, data = treatment_normalized_bothspecies)
summary(aov(fvfm_loss_norm ~ Treatment*Species, data = treatment_normalized_bothspecies))
TukeyHSD(aov(fvfm_loss_norm ~ Treatment*Species, data = treatment_normalized_bothspecies))
ggsave("treatment_normalized_bothspecies_boxplot.pdf")
treatment_normalized_bothspecies%>%
ggplot(., aes(x=Treatment, y= fvfm_loss_norm, color= Treatment)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitterdodge(), alpha=0.3) +
theme_classic() +
labs(y = "Normalized Reduction of Fv/Fm", x="Treatment") +
scale_fill_manual(labels=c("Tank 8", "Treated", "Untreated"), values = c("grey", "#F54A34", "#60DBDB"))  +
scale_color_manual(labels=c("Tank 8", "Treated", "Untreated"), values = c("grey", "#F54A34", "#60DBDB")) +
theme(text = element_text(size = 12)) +
facet_wrap(~Species, scales = "free_x")
ggsave("treatment_normalized_bothspecies_boxplot.pdf")
treatment_normalized_bothspecies%>%
ggplot(., aes(x=Treatment, y= fvfm_loss_norm, color= Treatment)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitterdodge(), alpha=0.3) +
theme_classic() +
labs(y = "Decline in Fv/Fm", x="Treatment") +
scale_fill_manual(labels=c("Tank 8", "Treated", "Untreated"), values = c("grey", "#F54A34", "#60DBDB"))  +
scale_color_manual(labels=c("Tank 8", "Treated", "Untreated"), values = c("grey", "#F54A34", "#60DBDB")) +
theme(text = element_text(size = 12)) +
facet_wrap(~Species, scales = "free_x")
ggsave("treatment_normalized_bothspecies_boxplot.pdf")
capture.output(TukeyHSD(aov(fvfm_loss_norm ~ Treatment*Species*Colony, data = treatment_normalized_bothspecies)), file = "fvfm_loss_norm_bothspecies_anova_tukey.csv")
capture.output(summary(aov(fvfm_loss_norm ~ Treatment*Species*Colony, data = treatment_normalized_bothspecies)), file = "fvfm_loss_norm_bothspecies_anova_table.csv")
capture.output(summary(aov(fvfm_loss_norm ~ Treatment*Species*Colony, data = treatment_normalized_bothspecies)), file = "fvfm_loss_norm_bothspeciesgenet_anova_table.csv")
capture.output(TukeyHSD(aov(fvfm_loss_norm ~ Treatment*Species*Colony, data = treatment_normalized_bothspecies)), file = "fvfm_loss_norm_bothspeciesgenet_anova_tukey.csv")
capture.output(summary(aov(fvfm_loss_norm ~ Treatment*Species, data = treatment_normalized_bothspecies)), file = "fvfm_loss_norm_bothspecies_anova_table.csv")
capture.output(TukeyHSD(aov(fvfm_loss_norm ~ Treatment*Species, data = treatment_normalized_bothspecies)), file = "fvfm_loss_norm_bothspecies_anova_tukey.csv")
treat_model <- lm(fvfm_loss_norm ~ Treatment*Species + Colony + Tank, data = treatment_normalized_bothspecies)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #not significant
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3) -> treat_outliers
treat_outliers
