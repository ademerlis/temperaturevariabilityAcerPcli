plot(fitted(Pcli_model_2), x)
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
Anova(Pcli_model_2, type = "II", test.statistic = "F")
capture.output(Anova(Pcli_model_2, type = "II", test.statistic = "F"), file = "Pcli_colorscore_model_ANOVA.csv")
capture.output(Anova(Pcli_model_2, type = "II", test.statistic = "F"), file = "Pcli_fvfm_model_ANOVA.csv")
#treatment + timepoint
Acer_emms <- emmeans(Acer_model_2, pairwise ~ Treatment*fvfm_timepoint, weights = "proportional", adjust="none")
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
#colony + treatment + timepoint
Acer_emms <- emmeans(Acer_model_2, pairwise ~ Treatment*Colony*fvfm_timepoint, weights = "proportional", adjust="none")
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
capture.output(rbind(Acer_emms$contrasts), file = "Acer_Tukey_colonytreatmenttimepoint.csv")
#treatment + timepoint
Pcli_emms <- emmeans(Pcli_model_2, pairwise ~ Treatment*fvfm_timepoint, weights = "proportional", adjust="none")
# P.value adjustment of the Bonferroni
rbind(Pcli_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
#colony + treatment + timepoint
Pcli_emms <- emmeans(Pcli_model_2, pairwise ~ Treatment*Colony*fvfm_timepoint, weights = "proportional", adjust="none")
# P.value adjustment of the Bonferroni
rbind(Pcli_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
capture.output(rbind(Pcli_emms$contrasts), file = "Pcli_Tukey_colonytreatmenttimepoint.csv")
Acer_emms <- emmeans(Acer_model_2, pairwise ~ Treatment*fvfm_timepoint, weights = "proportional", adjust="none")
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts)
#no significant difference between treatments at either time point
capture.output(rbind(Acer_emms$contrasts), file = "Acer_Tukey_treatmenttimepoint.csv")
#treatment + timepoint
Pcli_emms <- emmeans(Pcli_model_2, pairwise ~ Treatment*fvfm_timepoint, weights = "proportional", adjust="none")
#no significant difference between treatments at either time point
capture.output(rbind(Pcli_emms$contrasts), file = "Pcli_Tukey_treatmenttimepoint.csv")
setwd("~/Library/CloudStorage/OneDrive-UniversityofMiami/GitHub/Ch1_temperaturevariability2023/physiology/Immune_cell_assay")
library(tidyverse)
library(plotrix)
library(ggpubr)
library(rstatix)
library(cowplot)
library(dunn.test)
library(Rmisc)
library(plyr)
library(dplyr)
library(lme4)
library(emmeans)
library(modelsummary)
library(car)
library(multcomp)
percent_cells_df <- read_csv("immunecellsdata.csv")
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, Genotype, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent)) %>%
ungroup() %>%
select(Species:ID, Tank:num_days, mean_replicate_percent_perID) -> immmunecells_meanreps
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, Genotype, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent)) %>%
ungroup() %>%
dplyr::select(Species:ID, Tank:num_days, mean_replicate_percent_perID) -> immmunecells_meanreps
#interaction term for post hoc pairwise comparisons
immmunecells_meanreps$days_Treatment <-interaction(immmunecells_meanreps$num_days,immmunecells_meanreps$Treatment)
immmunecells_meanreps %>%
filter(Species == "Acer") -> immmunecells_meanreps_Acer
immmunecells_meanreps %>%
filter(Species == "Pcli") -> immmunecells_meanreps_Pcli
immmunecells_meanreps
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, Genotype, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent)) %>%
ungroup() %>%
dplyr::select(Species:ID, Tank:num_days, mean_replicate_percent_perID) -> immmunecells_meanreps
immmunecells_meanreps
immmunecells_meanreps %>%
mutate(across(c(Species, Genotype, ID, Tank, Treatment, num_days), as.factor))
immmunecells_meanreps %>%
dplyr::mutate(across(c(Species, Genotype, ID, Tank, Treatment, num_days), as.factor))
immmunecells_meanreps %>%
dplyr::mutate(across(c(Species, Genotype, ID, Tank, Treatment, num_days), as.factor)) -> immmunecells_meanreps
immmunecells_meanreps %>%
filter(Species == "Acer") -> immmunecells_meanreps_Acer
immmunecells_meanreps %>%
filter(Species == "Pcli") -> immmunecells_meanreps_Pcli
ImmuneCells_lmer_Acer <- lmer(mean_replicate_percent_perID~Treatment*Genotype*num_days + (1|Tank) + (1|ID), data = immmunecells_meanreps_Acer)
num_days
immmunecells_meanreps
immmunecells_meanreps %>%
filter(Species == "Acer") %>%
distinct() -> immmunecells_meanreps_Acer
immmunecells_meanreps_Acer
immmunecells_meanreps %>%
filter(Species == "Pcli") %>%
distinct() -> immmunecells_meanreps_Pcli
ImmuneCells_lmer_Acer <- lmer(mean_replicate_percent_perID~Treatment*Genotype*num_days + (1|Tank) + (1|ID), data = immmunecells_meanreps_Acer)
immmunecells_meanreps_Acer
ImmuneCells_lmer_Acer <- lmer(mean_replicate_percent_perID~Treatment*Genotype*num_days + (1|Tank), data = immmunecells_meanreps_Acer)
#although this was measured over time, it is not repeated measures because different corals were measured at each time point. so coral ID is not included in this formula
Acer_model <- lmer(mean_replicate_percent_perID~Treatment*Genotype*num_days + (1|Tank), data = immmunecells_meanreps_Acer)
summary(Acer_model)
Anova(Acer_model, type = "II", test.statistic = "F")
Pcli_model <- lmer(mean_replicate_percent_perID~Treatment*Genotype*num_days + (1|Tank), data = immmunecells_meanreps_Pcli)
summary(Pcli_model)
Anova(Pcli_model, type = "II", test.statistic = "F")
x = residuals(Acer_model)
plot(fitted(Acer_model), x)
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
car::outlierTest(Acer_model) #row 317
Acer_tidydata[-48, ] -> Acer_noout
immmunecells_meanreps_Acer[-48, ] -> Acer_noout
Acer_model_2 <- lmer(fvfm ~ Treatment*Colony*fvfm_timepoint + (1|Tank) + (1|Puck), data = Acer_noout)
Acer_model_2 <- lmer(mean_replicate_percent_perID~Treatment*Genotype*num_days + (1|Tank), data = Acer_noout)
x = residuals(Acer_model_2)
plot(fitted(Acer_model_2), x)
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
Anova(Acer_model, type = "II", test.statistic = "F")
qqnorm(x); qqline(x)
hist(x) # histogram of residuals to check for normal distribution of residuals
capture.output(Anova(Acer_model, type = "II", test.statistic = "F"), file = "Acer_immunecells_model_ANOVA.csv")
x = residuals(Pcli_model)
plot(fitted(Pcli_model), x)
qqnorm(x); qqline(x) # qq plot to check for normal distribution of residuals
hist(x) # histogram of residuals to check for normal distribution of residuals
Anova(Pcli_model, type = "II", test.statistic = "F")
capture.output(Anova(Pcli_model, type = "II", test.statistic = "F"), file = "Pcli_fvfm_model_ANOVA.csv")
capture.output(Anova(Pcli_model, type = "II", test.statistic = "F"), file = "Pcli_immunecells_model_ANOVA.csv")
#treatment + timepoint
Acer_emms <- emmeans(Acer_model, pairwise ~ Treatment*num_days, weights = "proportional", adjust="none")
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
#no significant difference between treatments at either time point
capture.output(rbind(Acer_emms$contrasts), file = "Acer_Tukey_treatmenttimepoint.csv")
#colony + treatment + timepoint
Acer_emms <- emmeans(Acer_model, pairwise ~ Treatment*Genotype*num_days, weights = "proportional", adjust="none")
# P.value adjustment of the Bonferroni
rbind(Acer_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
capture.output(rbind(Acer_emms$contrasts), file = "Acer_Tukey_colonytreatmenttimepoint.csv")
#treatment + timepoint
Pcli_emms <- emmeans(Pcli_model, pairwise ~ Treatment*num_days, weights = "proportional", adjust="none")
# P.value adjustment of the Bonferroni
rbind(Pcli_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
#no significant difference between treatments at either time point
capture.output(rbind(Pcli_emms$contrasts), file = "Pcli_Tukey_treatmenttimepoint.csv")
#colony + treatment + timepoint
Pcli_emms <- emmeans(Pcli_model, pairwise ~ Treatment*Genotype*num_days, weights = "proportional", adjust="none")
# P.value adjustment of the Bonferroni
rbind(Pcli_emms$contrasts) # Tukey HSD with Bonferroni P value adjustment, and kenward-roger degrees of freedom method
capture.output(rbind(Pcli_emms$contrasts), file = "Pcli_Tukey_colonytreatmenttimepoint.csv")
setwd("~/Library/CloudStorage/OneDrive-UniversityofMiami/GitHub/Ch1_temperaturevariability2023/physiology/Photosynthetic_efficiency")
library(tidyverse)
library(plotrix)
library(lme4)
library(ggpubr)
library(drc) #for the function "drm" dose-response model
library(broom) #for the tidy function needed for dose response model
library(car)
library(rstatix)
library(rcompanion)
library(cowplot)
library(dunn.test)
ipam_tidy_data <- read.csv("ipam_tidy_data.csv")
ipam_tidy_data %>%
dplyr::filter(Treatment_period == "CBASS") %>%
dplyr::select(!Treatment) -> ipam_tidy_CBASS
ipam_tidy_data %>%
dplyr::filter(!Treatment_period == "CBASS") %>%
dplyr::select(Tank, Puck, Colony, Treatment, Species) %>%
distinct() %>% #283 rows = one coral ID per treatment, no repeats
mutate(Treatment = case_when(Tank == "1" ~ "Untreated",
Tank == "2" ~ "Treated",
Tank == "3" ~ "Treated",
Tank == "4" ~ "Untreated",
Tank == "5" ~ "Treated",
Tank == "6" ~ "Untreated",
Tank == "7" ~ "Untreated",
Tank == "8" ~ "Treated")) %>%
full_join(ipam_tidy_CBASS, by = c("Puck", "Colony", "Species")) %>%
drop_na() %>%
dplyr::rename(Treatment_Tank = Tank.x, CBASS_Tank = Tank.y) %>%
dplyr::select(-c("X", "AOI", "Ft", "Fm", "file")) -> ipam_tidy_CBASS_treatments
ipam_tidy_CBASS_treatments %>%
mutate_at(vars(Colony, Puck, Treatment, Species), factor) -> ipam_tidy_CBASS_treatments
ipam_tidy_CBASS_treatments %>%
mutate(CBASS_temp = as.factor(CBASS_temp)) %>%
ggplot(., aes(x=CBASS_temp, y= fvfm, fill = Treatment)) +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
geom_boxplot() +
facet_wrap(~Species) +
theme_classic()
ipam_tidy_CBASS_treatments %>%
filter(Species == "Acervicornis") %>%
mutate(CBASS_temp = as.factor(CBASS_temp)) -> Acer_CBASS
str(Acer_CBASS)
Acer_CBASS
ipam_tidy_CBASS_treatments %>%
mutate(CBASS_temp = as.factor(CBASS_temp)) %>%
ggplot(., aes(x=CBASS_temp, y= fvfm, fill = Treatment)) +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
geom_boxplot() +
facet_wrap(~Species+Colony) +
theme_classic()
#before running this section, re-import ipam_tidy_data and remake Acer_CBASS because the of the outlier removal step
AcerCBASS_model <- lm(fvfm ~ Treatment*CBASS_temp + Colony + Treatment_Tank, data = Acer_CBASS)
AcerCBASS_model_metrics <- augment(AcerCBASS_model)
plot(AcerCBASS_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(AcerCBASS_model_metrics$.resid) # significant
#manually remove outlier
Acer_CBASS %>%
filter(!(fvfm==0.262 & Treatment == "Untreated" & CBASS_temp == "37" & Colony == "SI-C")) -> Acer_CBASS
AcerCBASS_model <- lm(fvfm ~ Treatment*CBASS_temp + Colony + Treatment_Tank, data = Acer_CBASS)
AcerCBASS_model_metrics <- augment(AcerCBASS_model)
plot(AcerCBASS_model)
#before running this section, re-import ipam_tidy_data and remake Acer_CBASS because the of the outlier removal step
AcerCBASS_model <- lm(fvfm ~ Treatment*CBASS_temp*Colony + Treatment_Tank, data = Acer_CBASS)
AcerCBASS_model <- lm(fvfm ~ Treatment*CBASS_temp + Colony + Treatment_Tank, data = Acer_CBASS)
AcerCBASS_model_metrics <- augment(AcerCBASS_model)
plot(AcerCBASS_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(AcerCBASS_model_metrics$.resid) # significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*CBASS_temp, data = AcerCBASS_model_metrics) #not significant
# identifying outliers
AcerCBASS_model_metrics %>%
filter(abs(.std.resid) > 3)
# 1 outlier
#manually remove outlier
Acer_CBASS %>%
filter(!(fvfm==0.262 & Treatment == "Untreated" & CBASS_temp == "37" & Colony == "SI-C")) -> Acer_CBASS
#rerun and see if data becomes more normal
AcerCBASS_model <- lm(fvfm ~ Treatment*CBASS_temp + Colony + Treatment_Tank, data = Acer_CBASS)
AcerCBASS_model_metrics <- augment(AcerCBASS_model)
plot(AcerCBASS_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(AcerCBASS_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*CBASS_temp, data = AcerCBASS_model_metrics) #not significant
aov(fvfm ~ Treatment*CBASS_temp, data = Acer_CBASS)
summary(aov(fvfm ~ Treatment*CBASS_temp, data = Acer_CBASS))
TukeyHSD(aov(fvfm ~ Treatment*CBASS_temp, data = Acer_CBASS))
ipam_tidy_CBASS_treatments %>%
filter(Species == "Pclivosa") %>%
mutate(CBASS_temp = as.factor(CBASS_temp)) -> Pcli_CBASS
str(Pcli_CBASS)
#before running this section, re-import ipam_tidy_data and remake Acer_CBASS because the of the outlier removal step
PcliCBASS_model <- lm(fvfm ~ Treatment*CBASS_temp + Colony + Treatment_Tank, data = Pcli_CBASS)
PcliCBASS_model_metrics <- augment(PcliCBASS_model)
plot(PcliCBASS_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(PcliCBASS_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*CBASS_temp, data = PcliCBASS_model_metrics) #not significant
# identifying outliers
PcliCBASS_model_metrics %>%
filter(abs(.std.resid) > 3)
# 1 outlier
#manually remove outlier
Pcli_CBASS %>%
filter(!(fvfm==0.277 & Treatment == "Treated" & CBASS_temp == "35" & Colony == "A")) -> Pcli_CBASS
aov(fvfm ~ Treatment*CBASS_temp, data = Pcli_CBASS)
summary(aov(fvfm ~ Treatment*CBASS_temp, data = Pcli_CBASS))
TukeyHSD(aov(fvfm ~ Treatment*CBASS_temp, data = Pcli_CBASS))
AcerCBASS_model <- lm(fvfm ~ Treatment*CBASS_temp*Colony + Treatment_Tank, data = Acer_CBASS)
AcerCBASS_model_metrics <- augment(AcerCBASS_model)
plot(AcerCBASS_model)
ipam_tidy_data <- read.csv("ipam_tidy_data.csv")
ipam_tidy_data %>%
dplyr::filter(Treatment_period == "CBASS") %>%
dplyr::select(!Treatment) -> ipam_tidy_CBASS
ipam_tidy_data %>%
dplyr::filter(!Treatment_period == "CBASS") %>%
dplyr::select(Tank, Puck, Colony, Treatment, Species) %>%
distinct() %>% #283 rows = one coral ID per treatment, no repeats
mutate(Treatment = case_when(Tank == "1" ~ "Untreated",
Tank == "2" ~ "Treated",
Tank == "3" ~ "Treated",
Tank == "4" ~ "Untreated",
Tank == "5" ~ "Treated",
Tank == "6" ~ "Untreated",
Tank == "7" ~ "Untreated",
Tank == "8" ~ "Treated")) %>%
full_join(ipam_tidy_CBASS, by = c("Puck", "Colony", "Species")) %>%
drop_na() %>%
dplyr::rename(Treatment_Tank = Tank.x, CBASS_Tank = Tank.y) %>%
dplyr::select(-c("X", "AOI", "Ft", "Fm", "file")) -> ipam_tidy_CBASS_treatments
ipam_tidy_CBASS_treatments %>%
mutate_at(vars(Colony, Puck, Treatment, Species), factor) -> ipam_tidy_CBASS_treatments
ipam_tidy_CBASS_treatments %>%
filter(Species == "Acervicornis") %>%
mutate(CBASS_temp = as.factor(CBASS_temp)) -> Acer_CBASS
str(Acer_CBASS)
AcerCBASS_model <- lm(fvfm ~ Treatment*CBASS_temp + Colony + Treatment_Tank, data = Acer_CBASS)
AcerCBASS_model_metrics <- augment(AcerCBASS_model)
plot(AcerCBASS_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(AcerCBASS_model_metrics$.resid) # significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*CBASS_temp, data = AcerCBASS_model_metrics) #not significant
# identifying outliers
AcerCBASS_model_metrics %>%
filter(abs(.std.resid) > 3)
# 1 outlier
#manually remove outlier
Acer_CBASS %>%
filter(!(fvfm==0.262 & Treatment == "Untreated" & CBASS_temp == "37" & Colony == "SI-C")) -> Acer_CBASS
#rerun and see if data becomes more normal
AcerCBASS_model <- lm(fvfm ~ Treatment*CBASS_temp + Colony + Treatment_Tank, data = Acer_CBASS)
AcerCBASS_model_metrics <- augment(AcerCBASS_model)
plot(AcerCBASS_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(AcerCBASS_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*CBASS_temp, data = AcerCBASS_model_metrics) #not significant
aov(fvfm ~ Treatment*CBASS_temp, data = Acer_CBASS)
summary(aov(fvfm ~ Treatment*CBASS_temp, data = Acer_CBASS))
#capture.output(summary(aov(fvfm ~ Treatment*CBASS_temp, data = Acer_CBASS)), file = "fvfm_CBASStemps_Acer_anova_table.csv")
TukeyHSD(aov(fvfm ~ Treatment*CBASS_temp, data = Acer_CBASS))
TukeyHSD(aov(fvfm ~ Treatment*CBASS_temp, data = Acer_CBASS))
ipam_tidy_CBASS_treatments %>%
filter(Species == "Pclivosa") %>%
mutate(CBASS_temp = as.factor(CBASS_temp)) -> Pcli_CBASS
str(Pcli_CBASS)
PcliCBASS_model <- lm(fvfm ~ Treatment*CBASS_temp + Colony + Treatment_Tank, data = Pcli_CBASS)
PcliCBASS_model_metrics <- augment(PcliCBASS_model)
plot(PcliCBASS_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(PcliCBASS_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*CBASS_temp, data = PcliCBASS_model_metrics) #not significant
# identifying outliers
PcliCBASS_model_metrics %>%
filter(abs(.std.resid) > 3)
# 1 outlier
#manually remove outlier
Pcli_CBASS %>%
filter(!(fvfm==0.277 & Treatment == "Treated" & CBASS_temp == "35" & Colony == "A")) -> Pcli_CBASS
aov(fvfm ~ Treatment*CBASS_temp, data = Pcli_CBASS)
summary(aov(fvfm ~ Treatment*CBASS_temp, data = Pcli_CBASS))
#capture.output(summary(aov(fvfm ~ Treatment*CBASS_temp, data = Pcli_CBASS)), file = "fvfm_CBASStemps_Pcli_anova_table.csv")
TukeyHSD(aov(fvfm ~ Treatment*CBASS_temp, data = Pcli_CBASS))
TukeyHSD(aov(fvfm ~ Treatment*CBASS_temp, data = Pcli_CBASS))
str(ipam_tidy_CBASS_treatments)
#make factors: Colony, Puck, Treatment, Species
ipam_tidy_CBASS_treatments %>%
mutate_at(vars(Colony, Puck, Treatment, Species), factor) -> ipam_tidy_CBASS_treatments
#check
str(ipam_tidy_CBASS_treatments)
ipam_tidy_CBASS_treatments$Species_Treatment <- interaction(ipam_tidy_CBASS_treatments$Species, ipam_tidy_CBASS_treatments$Treatment)
ipam_tidy_CBASS_treatments$CBASS_temp <- as.numeric(ipam_tidy_CBASS_treatments$CBASS_temp)
DRC_species_treatment = drm(fvfm ~ CBASS_temp, data = ipam_tidy_CBASS_treatments, curveid = Species_Treatment,
fct = LL.3(names = c('hill', 'max', 'ed50')))
summary(DRC_species_treatment)
#compParm compares the selected coefficient by means of a z-test
compParm(DRC_species_treatment, 'ed50')
DRC_species_treatment_Ed25 = drm(fvfm ~ CBASS_temp, data = ipam_tidy_CBASS_treatments, curveid = Species_Treatment,
fct = LL.3())
summary(DRC_species_treatment_Ed25)
plot(DRC_species_treatment_Ed25)
EDcomp(DRC_species_treatment_Ed25, c(25,25))
compParm(DRC_species_treatment_Ed25, 'ed25')
data.frame(ED(DRC_species_treatment_Ed25, c(25)))
EDcomp(DRC_species_treatment_Ed25, c(25,25))
AcerCBASS_model <- lm(fvfm ~ Treatment*CBASS_temp*Colony + Treatment_Tank, data = Acer_CBASS)
AcerCBASS_model_metrics <- augment(AcerCBASS_model)
plot(AcerCBASS_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(AcerCBASS_model_metrics$.resid) # significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Colony*CBASS_temp, data = AcerCBASS_model_metrics) #not significant
# identifying outliers
AcerCBASS_model_metrics %>%
filter(abs(.std.resid) > 3)
# 2 outliers
#manually remove outliers
Acer_CBASS %>%
filter(!(fvfm==0.262 & Treatment == "Untreated" & CBASS_temp == "37" & Colony == "SI-C")) -> Acer_CBASS
Acer_CBASS %>%
filter(!(fvfm==0.000 & Treatment == "Untreated" & CBASS_temp == "37" & Colony == "SI-C")) -> Acer_CBASS
#rerun and see if data becomes more normal
AcerCBASS_model <- lm(fvfm ~ Treatment*CBASS_temp*Colony + Treatment_Tank, data = Acer_CBASS)
AcerCBASS_model_metrics <- augment(AcerCBASS_model)
plot(AcerCBASS_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(AcerCBASS_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*CBASS_temp*Colony, data = AcerCBASS_model_metrics) #not significant
aov(fvfm ~ Treatment*CBASS_temp*Colony, data = Acer_CBASS)
summary(aov(fvfm ~ Treatment*CBASS_temp*Colony, data = Acer_CBASS))
TukeyHSD(aov(fvfm ~ Treatment*CBASS_temp*Colony, data = Acer_CBASS))
ipam_tidy_CBASS_treatments %>%
filter(Species == "Pclivosa") %>%
mutate(CBASS_temp = as.factor(CBASS_temp)) -> Pcli_CBASS
Pcli_CBASS_model <- lm(fvfm ~ Treatment*CBASS_temp*Colony + Treatment_Tank, data = Pcli_CBASS)
Pcli_CBASS_model_metrics <- augment(Pcli_CBASS_model)
plot(Pcli_CBASS_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Pcli_CBASS_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Colony*CBASS_temp, data = Pcli_CBASS_model_metrics) #not significant
# identifying outliers
Pcli_CBASS_model_metrics %>%
filter(abs(.std.resid) > 3)
# 2 outliers
#manually remove outliers
Pcli_CBASS %>%
filter(!(fvfm==0.517 & Treatment == "Treated" & CBASS_temp == "34" & Colony == "A")) -> Pcli_CBASS
Pcli_CBASS %>%
filter(!(fvfm==0.277 & Treatment == "Treated" & CBASS_temp == "35" & Colony == "A")) -> Pcli_CBASS
aov(fvfm ~ Treatment*CBASS_temp*Colony, data = Pcli_CBASS)
summary(aov(fvfm ~ Treatment*CBASS_temp*Colony, data = Pcli_CBASS))
TukeyHSD(aov(fvfm ~ Treatment*CBASS_temp*Colony, data = Pcli_CBASS))
ipam_tidy_CBASS_treatments %>%
filter(Species == "Acervicornis") -> Acer_CBASS
Acer_CBASS$Colony_Treatment <- interaction(Acer_CBASS$Colony, Acer_CBASS$Treatment)
str(Acer_CBASS)
DRC_Acer_colony_treatment = drm(fvfm ~ CBASS_temp, data = Acer_CBASS, curveid = Colony_Treatment,
fct = LL.3(names = c('hill', 'max', 'ed50')))
summary(DRC_Acer_colony_treatment)
plot(DRC_Acer_colony_treatment)
compParm(DRC_Acer_colony_treatment, 'ed50')
compParm(DRC_Acer_colony_treatment, 'ed50', "-")
ipam_tidy_CBASS_treatments %>%
filter(Species == "Pclivosa") -> Pcli_CBASS
Pcli_CBASS$Colony_Treatment <- interaction(Pcli_CBASS$Colony, Pcli_CBASS$Treatment)
str(Pcli_CBASS)
DRC_Pcli_colony_treatment = drm(fvfm ~ CBASS_temp, data = Pcli_CBASS, curveid = Colony_Treatment,
fct = LL.3(names = c('hill', 'max', 'ed50')))
summary(DRC_Pcli_colony_treatment)
plot(DRC_Pcli_colony_treatment)
compParm(DRC_Pcli_colony_treatment, 'ed50')
compParm(DRC_Pcli_colony_treatment, 'ed50', "-")
#let's calculate hours above 32ºC because that's the high-temp setpoint in the slow-burn
CBASS_temp_logs <- readxl::read_xlsx("../../tank parameters/Data from LabVIEW/CBASS_labview.xlsx")
CBASS_temp_logs %>%
dplyr::select(Time:`8`) %>%
pivot_longer(`1`:`8`, names_to="Tank", values_to ="Temp") %>%
ggplot(data = .,
aes(x = Time, y = Temp, color = Tank)) +
geom_point() +
theme_classic() +
facet_wrap(~Tank) +
labs(title = "Tank Temperatures",
y = "Temperature (°C)",
x = "Date")
CBASS_temp_logs %>%
dplyr::select(Time:`8`) %>%
pivot_longer(`1`:`8`, names_to="Tank", values_to ="Temp") -> CBASS_temp
above_32 <- filter(CBASS_temp, Temp > 32)
min_above_32 <- above_32 %>%
group_by(Tank) %>%
summarise(count = n()) %>%
mutate(min_above_32 = count * 5) %>%  #because each data point was recorded at 5-min intervals
select(Tank, min_above_32) %>%
rename(CBASS_Tank = Tank) %>%
mutate(CBASS_Tank = as.integer(CBASS_Tank))
min_above_32 <- above_32 %>%
group_by(Tank) %>%
summarise(count = n()) %>%
mutate(min_above_32 = count * 5) %>%  #because each data point was recorded at 5-min intervals
dplyr::select(Tank, min_above_32) %>%
rename(CBASS_Tank = Tank) %>%
mutate(CBASS_Tank = as.integer(CBASS_Tank))
above_32
min_above_32 <- above_32 %>%
group_by(Tank) %>%
summarise(count = n()) %>%
mutate(min_above_32 = count * 5) %>%  #because each data point was recorded at 5-min intervals
dplyr::select(Tank, min_above_32) %>%
dplyr::rename(CBASS_Tank = Tank) %>%
mutate(CBASS_Tank = as.integer(CBASS_Tank))
above_32 %>%
group_by(Tank) %>%
summarise(count = n()) %>%
mutate(min_above_32 = count * 5) %>%  #because each data point was recorded at 5-min intervals
dplyr::select(Tank, min_above_32)
above_32 %>%
group_by(Tank) %>%
summarise(count = n())
above_32 %>%
group_by(Tank) %>%
dplyr::summarise(count = n())
above_32 %>%
group_by(Tank) %>%
dplyr::summarise(count = n()) %>%
mutate(min_above_32 = count * 5)
min_above_32 <- above_32 %>%
group_by(Tank) %>%
dplyr::summarise(count = n()) %>%
mutate(min_above_32 = count * 5) %>%  #because each data point was recorded at 5-min intervals
dplyr::select(Tank, min_above_32) %>%
dplyr::rename(CBASS_Tank = Tank) %>%
mutate(CBASS_Tank = as.integer(CBASS_Tank))
min_above_32
species_Treatment_DHM <- ipam_tidy_CBASS_treatments %>%
select(Puck:CBASS_Tank, CBASS_temp, Species_Treatment) %>%
full_join(., min_above_32) %>%
drop_na() #removes control tank that was set to 28ºC
species_Treatment_DHM <- ipam_tidy_CBASS_treatments %>%
dplyr::select(Puck:CBASS_Tank, CBASS_temp, Species_Treatment) %>%
full_join(., min_above_32) %>%
drop_na() #removes control tank that was set to 28ºC
DRC_species_treatment_DHM = drm(fvfm ~ min_above_32, data = species_Treatment_DHM, curveid = Species_Treatment,
fct = LL.3(names = c('hill', 'max', 'ed50')))
summary(DRC_species_treatment_DHM)
plot(DRC_species_treatment_DHM)
#compParm compares the selected coefficient by means of a t-test
compParm(DRC_species_treatment_DHM, 'ed50')
plot(DRC_species_treatment_DHM)
EDcomp(DRC_species_treatment_DHM, c(25,25))
