rename(ID = `Puck ID`) -> allRscores #821 rows
full_join(allRscores, coral_metadata, by = c("Species", "ID")) %>%
drop_na(`Photo ID`)  -> allmetadata #821 rows
full_join(allmetadata, Rscoredata, by = c("Date", "Photo ID", "Coral Position")) -> Rintensity_withmetadata
Rintensity_withmetadata %>%
dplyr::select(!Genotype) -> Rintensity_withmetadata
Rintensity_withmetadata$month <- format(Rintensity_withmetadata$Date, "%m")
Rintensity_withmetadata$Date <- as.factor(Rintensity_withmetadata$Date)
Rintensity_withmetadata$month <- as.factor(Rintensity_withmetadata$month)
Rintensity_withmetadata %>%
group_by(ID, Species, Colony, Treatment, month) %>%
mutate(mean_Rintensity_percoral = mean(Mean)) -> Rintensity_withmetadata
# Rintensity_withmetadata %>%
#   filter(is.na(Species)) #photo 4709 is a duplicate from photo 4711 so I already have these values in the spreadsheet
Rintensity_withmetadata %>%
drop_na(ID) -> Rintensity_withmetadata
Rintensity_withmetadata
ggplot(Rintensity_withmetadata,aes(x = month, y= mean_Rintensity_percoral, fill = Treatment)) +
geom_boxplot() +
theme_classic() +
facet_wrap(~Species, scales = "free") +
ylim(0, 255) +
labs(y = "R Intensity") +
theme(text = element_text(size = 13)) +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))
Rintensity_withmetadata %>%
ungroup() %>%
filter(month == "03" | month == "04") %>%
dplyr::select(ID, Species, Colony, Treatment, Treatment_Tank, month, mean_Rintensity_percoral) %>%
distinct() %>%
pivot_wider(names_from = "month", values_from = "mean_Rintensity_percoral") %>%
mutate(percent_change = ((`04`-`03`)/`03`)*100) -> percentchange
percentchange
str(percentchange) #275 rows
percentchange %>%
drop_na() -> percentchange #7 corals were not measured in the second time point
percentchange
percentchange %>%
mutate_at(vars(Colony, Treatment, Species), factor) -> percentchange
treat_model_1 <- lm(percent_change ~ Treatment*Species + Colony + Treatment_Tank, data = percentchange)
treat_model_metrics_1 <- augment(treat_model_1)
plot(treat_model_1)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics_1$.resid) #significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics_1) #significant
# identifying outliers
treat_model_metrics_1 %>%
filter(abs(.std.resid) > 3)
#remove outliers
percentchange  %>%
filter(percent_change < 180) -> percentchange
#rerun
treat_model_1 <- lm(percent_change ~ Treatment*Species + Colony + Treatment_Tank, data = percentchange)
treat_model_metrics_1 <- augment(treat_model_1)
shapiro_test(treat_model_metrics_1$.resid) #still significant
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics_1) #still significant
#make interaction term
percentchange$Treatment_Species <- interaction(percentchange$Treatment, percentchange$Species)
kruskal_test(percent_change ~ Treatment_Species, data = percentchange) #significant
#posthoc test
as.data.frame(dunn.test(percentchange$percent_change, percentchange$Treatment_Species, method = "bonferroni")) #%>%
percentchange %>%
filter(Species == "Pseudodiploria clivosa") -> Pcli_R_percentchange
Pcli_Rtreat_model <- lm(percent_change ~ Treatment*Colony + Treatment_Tank, data = Pcli_R_percentchange)
Pcli_Rtreat_model_metrics <- augment(Pcli_Rtreat_model)
plot(Pcli_Rtreat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Pcli_Rtreat_model_metrics$.resid) #not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Colony, data = Pcli_Rtreat_model_metrics) #not significant
# two-way anova
summary(aov(percent_change ~ Treatment*Colony, data = Pcli_R_percentchange)) #significant
TukeyHSD(aov(percent_change ~ Treatment*Colony, data = Pcli_R_percentchange))
# two-way anova
summary(aov(percent_change ~ Treatment*Colony, data = Pcli_R_percentchange)) #significant
str(slowburn_Rintensity) #99 rows
Rintensity_withmetadata %>%
ungroup() %>%
filter(month == "06" | month == "07") %>%
dplyr::select(ID, Species, Colony, Treatment, Treatment_Tank, month, mean_Rintensity_percoral) %>%
distinct() %>%
pivot_wider(names_from = "month", values_from = "mean_Rintensity_percoral") %>%
mutate(percent_change = ((`07`-`06`)/`06`)*100) -> slowburn_Rintensity
slowburn_Rintensity %>%
drop_na() -> slowburn_Rintensity #~60 corals were not measured in the second time point
str(slowburn_Rintensity) #99 rows
slowburn_Rintensity %>%
mutate_at(vars(Colony, Treatment, Species), factor) -> slowburn_Rintensity
treat_model <- lm(percent_change ~ Treatment*Species + Colony + Treatment_Tank, data = slowburn_Rintensity)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) #not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #not significant
summary(aov(percent_change ~ Treatment*Species, data = slowburn_Rintensity)) #significant for species
slowburn_Rintensity %>%
filter(Species == "Acropora cervicornis") -> Acer_slowburn_Rintensity
Acer_R_model <- lm(percent_change ~ Treatment*Colony + Treatment_Tank, data = Acer_slowburn_Rintensity)
Acer_R_model_model_metrics <- augment(Acer_R_model)
plot(Acer_R_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Acer_R_model_model_metrics$.resid) #not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Colony, data = Acer_R_model_model_metrics) #not significant
summary(aov(percent_change ~ Treatment*Colony, data = Acer_slowburn_Rintensity)) #significant for species
slowburn_Rintensity %>%
filter(Species == "Pseudodiploria clivosa") -> Pcli_slowburn_Rintensity
Pcli_R_model <- lm(percent_change ~ Treatment*Colony + Treatment_Tank, data = Pcli_slowburn_Rintensity)
Pcli_R_model_metrics <- augment(Pcli_R_model)
plot(Pcli_R_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Pcli_R_model_metrics$.resid) #not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Colony, data = Pcli_R_model_metrics) #not significant
# two-way anova
summary(aov(percent_change ~ Treatment*Colony, data = Pcli_slowburn_Rintensity)) #significant
library(tidyverse)
library(plotrix)
library(lme4)
library(ggpubr)
library(drc) #for the function "drm" dose-response model
library(broom) #for the tidy function needed for dose response model
library(car)
library(rstatix)
library(rcompanion)
library(cowplot)
library(dunn.test)
ipam_tidy_data <- read.csv("ipam_tidy_data.csv")
ipam_tidy_data %>%
dplyr::filter(Treatment_period == "CBASS") %>%
dplyr::select(!Treatment) -> ipam_tidy_CBASS
ipam_tidy_data %>%
dplyr::filter(!Treatment_period == "CBASS") %>%
dplyr::select(Tank, Puck, Colony, Treatment, Species) %>%
distinct() %>% #283 rows = one coral ID per treatment, no repeats
mutate(Treatment = case_when(Tank == "1" ~ "Untreated",
Tank == "2" ~ "Treated",
Tank == "3" ~ "Treated",
Tank == "4" ~ "Untreated",
Tank == "5" ~ "Treated",
Tank == "6" ~ "Untreated",
Tank == "7" ~ "Untreated",
Tank == "8" ~ "Treated")) %>%
full_join(ipam_tidy_CBASS, by = c("Puck", "Colony", "Species")) %>%
drop_na() %>%
dplyr::rename(Treatment_Tank = Tank.x, CBASS_Tank = Tank.y) %>%
dplyr::select(-c("X", "AOI", "Ft", "Fm", "file")) -> ipam_tidy_CBASS_treatments
ipam_tidy_CBASS_treatments %>%
mutate_at(vars(Colony, Puck, Treatment, Species), factor) -> ipam_tidy_CBASS_treatments
ipam_tidy_CBASS_treatments %>%
filter(Species == "Acervicornis") %>%
mutate(CBASS_temp = as.factor(CBASS_temp)) -> Acer_CBASS
str(Acer_CBASS)
#before running this section, re-import ipam_tidy_data and remake Acer_CBASS because the of the outlier removal step
AcerCBASS_model <- lm(fvfm ~ Treatment*CBASS_temp + Colony + Treatment_Tank, data = Acer_CBASS)
AcerCBASS_model_metrics <- augment(AcerCBASS_model)
plot(AcerCBASS_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(AcerCBASS_model_metrics$.resid) # significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*CBASS_temp, data = AcerCBASS_model_metrics) #not significant
# identifying outliers
AcerCBASS_model_metrics %>%
filter(abs(.std.resid) > 3)
# 1 outlier
#manually remove outlier
Acer_CBASS %>%
filter(!(fvfm==0.262 & Treatment == "Untreated" & CBASS_temp == "37" & Colony == "SI-C")) -> Acer_CBASS
#rerun and see if data becomes more normal
AcerCBASS_model <- lm(fvfm ~ Treatment*CBASS_temp + Colony + Treatment_Tank, data = Acer_CBASS)
AcerCBASS_model_metrics <- augment(AcerCBASS_model)
plot(AcerCBASS_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(AcerCBASS_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*CBASS_temp, data = AcerCBASS_model_metrics) #not significant
summary(aov(fvfm ~ Treatment*CBASS_temp, data = Acer_CBASS))
setwd("~/Library/CloudStorage/OneDrive-UniversityofMiami/GitHub/Ch2_temperaturevariability2023/physiology/5_immune_cell_assay")
library(tidyverse)
library(plotrix)
library(ggpubr)
library(rstatix)
library(cowplot)
library(dunn.test)
library(Rmisc)
library(plyr)
library(dplyr)
percent_cells_df <- read_csv("Grace_percentcells_alldata.csv")
percent_cells_df%>%
mutate(Treatment = case_when(Treatment == "Control" ~ "Untreated",
Treatment == "Variable" ~ "Treated")) -> percent_cells_df
#there's one outlier to remove right off the bat: T1	Pcli	B	P9	r2	Percent=111.50	T1	Untreated
percent_cells_df %>%
filter(!(TimePoint=="T1" & Species == "Pcli" & Genotype == "B" & Treatment == "Untreated" & ID == "P9" & Replicate == "r2")) -> percent_cells_df
#replicates are technical replicates of the same coral fragment
#time points:
#T0 = initial pre-treatment (March 22)
#T1 = one week into treatment (March 30)
#T2 = end of treatment (April 20)
#follow-up = post CBASS and treatment follow-up (June 1)
percent_cells_df %>%
mutate(num_days = case_when(TimePoint == "T0" ~ "0",
TimePoint == "T1" ~ "7",
TimePoint == "T2" ~ "28",
TimePoint == "FollowUp" ~ "71")) %>%
mutate(num_days = as.factor(num_days)) %>%
mutate(num_days = fct_relevel(num_days, "0", "7", "28", "71")) -> percent_cells_df
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent)) %>%
ungroup() %>%
select(Species, Genotype, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
filter(num_days == "0" & Treatment == "Untreated") %>%
group_by(Species, Genotype) %>%
dplyr::summarise(mean_untreated_day0_genet = mean(mean_replicate_percent_perID)) -> untreated_day0_immunecells
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent)) %>%
ungroup() %>%
select(Species, Genotype, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
filter(num_days == "28") %>%
right_join(., untreated_day0_immunecells, by = c("Species", "Genotype")) %>%
mutate(relative_activity = ((mean_replicate_percent_perID-mean_untreated_day0_genet)/mean_untreated_day0_genet)*100) %>% #T1-T0/T0*100
ggplot(., aes(x=Species, y=relative_activity, fill= Treatment)) +
geom_boxplot() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Decline Immune Cell Activity")+
theme_classic() +
theme(text = element_text(size = 15))
#ggsave("normalized_percentchangeimmuneactivity_boxplot_species.pdf")
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
dplyr::select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
filter(num_days == "0" | num_days == "28") -> percent_cells_speciestreatments
str(percent_cells_speciestreatments)
percent_cells_speciestreatments %>%
dplyr::mutate_at(vars(Species, Treatment, num_days), factor) -> percent_cells_speciestreatments
percent_cells_speciestreatments %>%
filter(num_days == "0" & Treatment == "Untreated") %>%
group_by(Species, Genotype) %>%
dplyr::summarise(mean_untreated_day0_genet = mean(mean_replicate_percent_perID)) -> untreated_day0_immunecells
percent_cells_speciestreatments %>%
filter(num_days == "28") %>%
right_join(., untreated_day0_immunecells, by = c("Species", "Genotype")) %>%
mutate(relative_activity = ((mean_replicate_percent_perID-mean_untreated_day0_genet)/mean_untreated_day0_genet)*100) -> relative_activity_df
#save data frame for WGCNA
#write_csv(relative_activity_df, "relative_immune_activity.csv")
treat_model <- lm(relative_activity ~ Treatment*Species + Genotype + Tank, data = relative_activity_df)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #significant
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3)
# 1 outlier
relative_activity_df %>% filter(relative_activity < 43) -> relative_activity_df
#rerun tests
treat_model <- lm(relative_activity ~ Treatment*Species + Genotype + Tank, data = relative_activity_df)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #significant
#make interaction term
relative_activity_df$Treatment_Species <- interaction(relative_activity_df$Treatment, relative_activity_df$Species)
# kruskal wallis test
kruskal_test(relative_activity ~ Treatment_Species, data = relative_activity_df) #not significant
#posthoc test
as.data.frame(dunn.test(relative_activity_df$relative_activity, relative_activity_df$Treatment_Species, method = "bonferroni"))
write_csv("Acer_percent_cells_genet_posthoc.csv")
# kruskal wallis test
kruskal_test(relative_activity ~ Treatment_Species, data = relative_activity_df) #not significant
#posthoc test
as.data.frame(dunn.test(relative_activity_df$relative_activity, relative_activity_df$Treatment_Species, method = "bonferroni"))
setwd("~/Library/CloudStorage/OneDrive-UniversityofMiami/GitHub/Ch2_temperaturevariability2023/physiology/3_photosynthetic_efficiency")
library(tidyverse)
library(plotrix)
library(ggpubr)
library(rstatix)
library(cowplot)
ipam_tidy_data <- read.csv("ipam_tidy_data.csv")
treatment_time_bothspecies <- ipam_tidy_data %>%
dplyr::filter(!Treatment_period == "CBASS") %>%
drop_na(Colony) %>% #this is because there are some corals that never matched up to IPAM values so they're just NA
dplyr::select(Date, Colony, Puck, Tank, fvfm, Treatment, Species) %>%
mutate(Date = mdy(Date)) %>%
dplyr::filter(Date <= "2022-04-20") %>%
pivot_wider(names_from = Date, values_from = fvfm) %>%
mutate(fvfm_t0 = case_when(Species == "Acervicornis" ~ `2022-03-16`,
Species == "Pclivosa" ~ `2022-03-21`)) %>%
mutate(fvfm_t1 = case_when(Species == "Acervicornis" ~ `2022-04-06`,
Species == "Pclivosa" ~ `2022-04-06`)) %>%
mutate(fvfm_t2 = case_when(Species == "Acervicornis" ~ `2022-04-20`,
Species == "Pclivosa" ~ `2022-04-20`)) %>%
pivot_longer(fvfm_t0:fvfm_t2, names_to = "fvfm_timepoint", values_to = "fvfm") %>%
mutate(numDays = case_when(fvfm_timepoint == "fvfm_t0" ~ 0,
Species == "Pclivosa" & fvfm_timepoint == "fvfm_t1" ~ 16,
Species == "Acervicornis" & fvfm_timepoint == "fvfm_t1" ~ 21,
Species == "Pclivosa" & fvfm_timepoint == "fvfm_t2" ~ 30,
Species == "Acervicornis" & fvfm_timepoint == "fvfm_t2" ~ 35,
Species == "Pclivosa" & fvfm_timepoint == "fvfm_t3" ~ 65,
Species == "Acervicornis" & fvfm_timepoint == "fvfm_t3" ~ 70))
treatment_normalized_bothspecies <- ipam_tidy_data %>%
dplyr::filter(!Treatment_period == "CBASS") %>%
drop_na(Colony) %>% #this is because there are some corals that never matched up to IPAM values so they're just NA
dplyr::select(Date, Colony, Puck, Tank, fvfm, Treatment, Species)  %>%
mutate(Date = mdy(Date)) %>%
dplyr::filter(Date <= "2022-04-20") %>% #pre-CBASS time points
pivot_wider(names_from = Date, values_from = fvfm) %>%
mutate(fvfm_loss = case_when(Species == "Acervicornis" ~ `2022-04-20` - `2022-03-16`,
Species == "Pclivosa" ~ `2022-04-20` - `2022-03-21`)) %>%
mutate(fvfm_loss_norm = case_when(Species == "Acervicornis" ~ (fvfm_loss/`2022-03-16`)*100,
Species == "Pclivosa" ~ (fvfm_loss/`2022-03-21`)*100))
#save data for WGCNA
treatment_normalized_bothspecies %>%
select(Colony, Puck, Treatment, Species, fvfm_loss, fvfm_loss_norm) %>%
write_csv("treatment_fvfm.csv")
treatment_time_bothspecies %>%
select(Colony:Species, fvfm_timepoint, fvfm) %>%
filter(fvfm_timepoint == "fvfm_t2") %>% #282 corals
group_by(Species, Colony, Treatment) %>%
summarise(count = n())
View(treatment_time_bothspecies)
View(treatment_normalized_bothspecies)
treatment_time_bothspecies %>%
select(Colony:Species, fvfm_timepoint, fvfm) %>%
filter(fvfm_timepoint == "fvfm_t2") %>% #282 corals
group_by(Species, Colony, Treatment) %>%
dplyr::summarise(count = n())
ipam_tidy_data <- read.csv("ipam_tidy_data.csv")
ipam_tidy_data %>%
dplyr::filter(Treatment_period == "CBASS") %>%
dplyr::select(!Treatment) -> ipam_tidy_CBASS
ipam_tidy_data %>%
dplyr::filter(!Treatment_period == "CBASS") %>%
dplyr::select(Tank, Puck, Colony, Treatment, Species) %>%
distinct() %>% #283 rows = one coral ID per treatment, no repeats
mutate(Treatment = case_when(Tank == "1" ~ "Untreated",
Tank == "2" ~ "Treated",
Tank == "3" ~ "Treated",
Tank == "4" ~ "Untreated",
Tank == "5" ~ "Treated",
Tank == "6" ~ "Untreated",
Tank == "7" ~ "Untreated",
Tank == "8" ~ "Treated")) %>%
full_join(ipam_tidy_CBASS, by = c("Puck", "Colony", "Species")) %>%
drop_na() %>%
dplyr::rename(Treatment_Tank = Tank.x, CBASS_Tank = Tank.y) %>%
dplyr::select(-c("X", "AOI", "Ft", "Fm", "file")) -> ipam_tidy_CBASS_treatments
ipam_tidy_CBASS_treatments %>%
mutate_at(vars(Colony, Puck, Treatment, Species), factor) -> ipam_tidy_CBASS_treatments
ipam_tidy_CBASS_treatments %>%
filter(Species == "Acervicornis") %>%
mutate(CBASS_temp = as.factor(CBASS_temp)) -> Acer_CBASS
str(Acer_CBASS)
Acer_CBASS
ipam_tidy_CBASS_treatments %>%
filter(Species == "Pclivosa") %>%
mutate(CBASS_temp = as.factor(CBASS_temp)) -> Pcli_CBASS
str(Pcli_CBASS)
setwd("~/Library/CloudStorage/OneDrive-UniversityofMiami/GitHub/Ch2_temperaturevariability2023/physiology/6_recovery")
library(tidyverse)
library(readxl)
library(rstatix)
library(plotrix)
library(ggpubr)
library(cowplot)
library(dunn.test)
coral_metadata <- readxl::read_xlsx("../metadata.xlsx")
fvfm <- read.csv("../3_photosynthetic_efficiency/ipam_tidy_data.csv")
Rscoredata <- read_xlsx("../4_R_intensity//data_rscores.xlsx")
april18 <- read_xlsx("../4_R_intensity/photo_metadata.xlsx", sheet = "april 18")
june21 <- read_xlsx("../4_R_intensity/photo_metadata.xlsx", sheet = "june 21")
percent_cells_df <- read_csv("../5_immune_cell_assay/Grace_percentcells_alldata.csv")
percent_cells_df%>%
mutate(Treatment = case_when(Treatment == "Control" ~ "Untreated",
Treatment == "Variable" ~ "Treated")) -> percent_cells_df
#there's one outlier to remove right off the bat: T1	Pcli	B	P9	r2	Percent=111.50	T1	Untreated
percent_cells_df %>%
filter(!(TimePoint=="T1" & Species == "Pcli" & Genotype == "B" & Treatment == "Untreated" & ID == "P9" & Replicate == "r2")) -> percent_cells_df
#replicates are technical replicates of the same coral fragment
#time points:
#T0 = initial pre-treatment (March 22)
#T1 = one week into treatment (March 30)
#T2 = end of treatment (April 20)
#follow-up = post CBASS and treatment follow-up (June 1)
percent_cells_df %>%
filter(TimePoint == "T2" | TimePoint == "FollowUp") %>%
mutate(num_days = case_when(TimePoint == "T2" ~ "0",
TimePoint == "FollowUp" ~ "43")) %>%
mutate(num_days = as.factor(num_days)) %>%
mutate(num_days = fct_relevel(num_days, "0", "43")) -> percent_cells_df
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent)) %>%
ungroup() %>%
select(Species, Genotype, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
filter(num_days == "0" & Treatment == "Untreated") %>%
group_by(Species, Genotype) %>%
dplyr::summarise(mean_untreated_day0_genet = mean(mean_replicate_percent_perID)) -> untreated_day0_immunecells
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent)) %>%
ungroup() %>%
select(Species, Genotype, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
filter(num_days == "43") %>%
right_join(., untreated_day0_immunecells, by = c("Species", "Genotype")) %>%
mutate(relative_activity = ((mean_replicate_percent_perID-mean_untreated_day0_genet)/mean_untreated_day0_genet)*100) %>% #T1-T0/T0*100
ggplot(., aes(x=Species, y=relative_activity, fill= Treatment)) +
geom_boxplot() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Change Immune Cell Activity")+
theme_classic() +
theme(text = element_text(size = 15))
ggsave("normalized_percentchangeimmuneactivity_boxplot_species.pdf")
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
dplyr::select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
filter(num_days == "0" | num_days == "43") -> percent_cells_speciestreatments
str(percent_cells_speciestreatments)
percent_cells_speciestreatments %>%
dplyr::mutate_at(vars(Species, Treatment, num_days), factor) -> percent_cells_speciestreatments
percent_cells_speciestreatments %>%
filter(num_days == "0" & Treatment == "Untreated") %>%
group_by(Species, Genotype) %>%
dplyr::summarise(mean_untreated_day0_genet = mean(mean_replicate_percent_perID)) -> untreated_day0_immunecells
percent_cells_speciestreatments %>%
filter(num_days == "43") %>%
right_join(., untreated_day0_immunecells, by = c("Species", "Genotype")) %>%
mutate(relative_activity = ((mean_replicate_percent_perID-mean_untreated_day0_genet)/mean_untreated_day0_genet)*100) -> relative_activity_df
#save data frame for WGCNA
#write_csv(relative_activity_df, "relative_immune_activity.csv")
treat_model <- lm(relative_activity ~ Treatment*Species + Genotype + Tank, data = relative_activity_df)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #not significant
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3)
# 0 outliers
summary(aov(relative_activity ~ Treatment*Species, data = relative_activity_df)) #not significant
TukeyHSD(aov(relative_activity ~ Treatment*Species, data = relative_activity_df)) #no significant pairwise
relative_activity
View(relative_activity_df)
Rscoredata %>%
select(`Date (Folder Name)`) %>%
distinct() #Dates with scores: 3/8-3/18 (Initial), 4/18, 6/21, 7/8
Rscoredata %>%
rename(`Photo ID` = `Image #`) %>%
rename(Date = `Date (Folder Name)`) -> Rscoredata
View(Rscoredata)
Rscoredata %>%
select(`Date (Folder Name)`) %>%
distinct() #Dates with scores: 3/8-3/18 (Initial), 4/18, 6/21, 7/8
Rscoredata %>%
dplyr::rename(`Photo ID` = `Image #`) %>%
dplyr::rename(Date = `Date (Folder Name)`) -> Rscoredata
april18 %>%
dplyr::select(`Photo ID`:`Coral Position`) -> april18
june21%>%
dplyr::select(`Photo ID`:`Coral Position`) -> june21
full_join(april18, june21) %>%
dplyr::mutate(Species = case_when(Species == "Acer" ~ "Acropora cervicornis",
Species == "Pcli" ~ "Pseudodiploria clivosa")) %>%
dplyr::rename(ID = `Puck ID`) -> allRscores
full_join(allRscores, coral_metadata, by = c("Species", "ID")) %>%
drop_na(`Photo ID`)  -> R_metadata #821 rows
full_join(R_metadata, Rscoredata, by = c("Date", "Photo ID", "Coral Position")) %>%
dplyr::select(!Genotype) -> Rintensity_withmetadata
Rintensity_withmetadata$month <- format(Rintensity_withmetadata$Date, "%m")
Rintensity_withmetadata$Date <- as.factor(Rintensity_withmetadata$Date)
Rintensity_withmetadata$month <- as.factor(Rintensity_withmetadata$month)
Rintensity_withmetadata %>%
dplyr::group_by(ID, Species, Colony, Treatment, month) %>%
dplyr::mutate(mean_Rintensity_percoral = mean(Mean)) %>%
drop_na(ID) -> Rintensity_withmetadata
Rintensity_withmetadata %>%
ungroup() %>%
filter(month == "04" | month == "06") %>%
dplyr::select(ID, Species, Colony, Treatment, Treatment_Tank, month, mean_Rintensity_percoral) %>%
distinct() %>%
pivot_wider(names_from = "month", values_from = "mean_Rintensity_percoral") %>%
dplyr::mutate(percent_change = ((`06`-`04`)/`04`)*100) %>%
drop_na() -> percentchange
percentchange
