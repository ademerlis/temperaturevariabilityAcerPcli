summarise(count = n())
View(treatment_time_bothspecies)
View(treatment_normalized_bothspecies)
treatment_time_bothspecies %>%
select(Colony:Species, fvfm_timepoint, fvfm) %>%
filter(fvfm_timepoint == "fvfm_t2") %>% #282 corals
group_by(Species, Colony, Treatment) %>%
dplyr::summarise(count = n())
ipam_tidy_data <- read.csv("ipam_tidy_data.csv")
ipam_tidy_data %>%
dplyr::filter(Treatment_period == "CBASS") %>%
dplyr::select(!Treatment) -> ipam_tidy_CBASS
ipam_tidy_data %>%
dplyr::filter(!Treatment_period == "CBASS") %>%
dplyr::select(Tank, Puck, Colony, Treatment, Species) %>%
distinct() %>% #283 rows = one coral ID per treatment, no repeats
mutate(Treatment = case_when(Tank == "1" ~ "Untreated",
Tank == "2" ~ "Treated",
Tank == "3" ~ "Treated",
Tank == "4" ~ "Untreated",
Tank == "5" ~ "Treated",
Tank == "6" ~ "Untreated",
Tank == "7" ~ "Untreated",
Tank == "8" ~ "Treated")) %>%
full_join(ipam_tidy_CBASS, by = c("Puck", "Colony", "Species")) %>%
drop_na() %>%
dplyr::rename(Treatment_Tank = Tank.x, CBASS_Tank = Tank.y) %>%
dplyr::select(-c("X", "AOI", "Ft", "Fm", "file")) -> ipam_tidy_CBASS_treatments
ipam_tidy_CBASS_treatments %>%
mutate_at(vars(Colony, Puck, Treatment, Species), factor) -> ipam_tidy_CBASS_treatments
ipam_tidy_CBASS_treatments %>%
filter(Species == "Acervicornis") %>%
mutate(CBASS_temp = as.factor(CBASS_temp)) -> Acer_CBASS
str(Acer_CBASS)
Acer_CBASS
ipam_tidy_CBASS_treatments %>%
filter(Species == "Pclivosa") %>%
mutate(CBASS_temp = as.factor(CBASS_temp)) -> Pcli_CBASS
str(Pcli_CBASS)
setwd("~/Library/CloudStorage/OneDrive-UniversityofMiami/GitHub/Ch2_temperaturevariability2023/physiology/6_recovery")
library(tidyverse)
library(readxl)
library(rstatix)
library(plotrix)
library(ggpubr)
library(cowplot)
library(dunn.test)
coral_metadata <- readxl::read_xlsx("../metadata.xlsx")
fvfm <- read.csv("../3_photosynthetic_efficiency/ipam_tidy_data.csv")
Rscoredata <- read_xlsx("../4_R_intensity//data_rscores.xlsx")
april18 <- read_xlsx("../4_R_intensity/photo_metadata.xlsx", sheet = "april 18")
june21 <- read_xlsx("../4_R_intensity/photo_metadata.xlsx", sheet = "june 21")
percent_cells_df <- read_csv("../5_immune_cell_assay/Grace_percentcells_alldata.csv")
percent_cells_df%>%
mutate(Treatment = case_when(Treatment == "Control" ~ "Untreated",
Treatment == "Variable" ~ "Treated")) -> percent_cells_df
#there's one outlier to remove right off the bat: T1	Pcli	B	P9	r2	Percent=111.50	T1	Untreated
percent_cells_df %>%
filter(!(TimePoint=="T1" & Species == "Pcli" & Genotype == "B" & Treatment == "Untreated" & ID == "P9" & Replicate == "r2")) -> percent_cells_df
#replicates are technical replicates of the same coral fragment
#time points:
#T0 = initial pre-treatment (March 22)
#T1 = one week into treatment (March 30)
#T2 = end of treatment (April 20)
#follow-up = post CBASS and treatment follow-up (June 1)
percent_cells_df %>%
filter(TimePoint == "T2" | TimePoint == "FollowUp") %>%
mutate(num_days = case_when(TimePoint == "T2" ~ "0",
TimePoint == "FollowUp" ~ "43")) %>%
mutate(num_days = as.factor(num_days)) %>%
mutate(num_days = fct_relevel(num_days, "0", "43")) -> percent_cells_df
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent)) %>%
ungroup() %>%
select(Species, Genotype, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
filter(num_days == "0" & Treatment == "Untreated") %>%
group_by(Species, Genotype) %>%
dplyr::summarise(mean_untreated_day0_genet = mean(mean_replicate_percent_perID)) -> untreated_day0_immunecells
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent)) %>%
ungroup() %>%
select(Species, Genotype, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
filter(num_days == "43") %>%
right_join(., untreated_day0_immunecells, by = c("Species", "Genotype")) %>%
mutate(relative_activity = ((mean_replicate_percent_perID-mean_untreated_day0_genet)/mean_untreated_day0_genet)*100) %>% #T1-T0/T0*100
ggplot(., aes(x=Species, y=relative_activity, fill= Treatment)) +
geom_boxplot() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Change Immune Cell Activity")+
theme_classic() +
theme(text = element_text(size = 15))
ggsave("normalized_percentchangeimmuneactivity_boxplot_species.pdf")
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
dplyr::select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
filter(num_days == "0" | num_days == "43") -> percent_cells_speciestreatments
str(percent_cells_speciestreatments)
percent_cells_speciestreatments %>%
dplyr::mutate_at(vars(Species, Treatment, num_days), factor) -> percent_cells_speciestreatments
percent_cells_speciestreatments %>%
filter(num_days == "0" & Treatment == "Untreated") %>%
group_by(Species, Genotype) %>%
dplyr::summarise(mean_untreated_day0_genet = mean(mean_replicate_percent_perID)) -> untreated_day0_immunecells
percent_cells_speciestreatments %>%
filter(num_days == "43") %>%
right_join(., untreated_day0_immunecells, by = c("Species", "Genotype")) %>%
mutate(relative_activity = ((mean_replicate_percent_perID-mean_untreated_day0_genet)/mean_untreated_day0_genet)*100) -> relative_activity_df
#save data frame for WGCNA
#write_csv(relative_activity_df, "relative_immune_activity.csv")
treat_model <- lm(relative_activity ~ Treatment*Species + Genotype + Tank, data = relative_activity_df)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #not significant
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3)
# 0 outliers
summary(aov(relative_activity ~ Treatment*Species, data = relative_activity_df)) #not significant
TukeyHSD(aov(relative_activity ~ Treatment*Species, data = relative_activity_df)) #no significant pairwise
relative_activity
View(relative_activity_df)
Rscoredata %>%
select(`Date (Folder Name)`) %>%
distinct() #Dates with scores: 3/8-3/18 (Initial), 4/18, 6/21, 7/8
Rscoredata %>%
rename(`Photo ID` = `Image #`) %>%
rename(Date = `Date (Folder Name)`) -> Rscoredata
View(Rscoredata)
Rscoredata %>%
select(`Date (Folder Name)`) %>%
distinct() #Dates with scores: 3/8-3/18 (Initial), 4/18, 6/21, 7/8
Rscoredata %>%
dplyr::rename(`Photo ID` = `Image #`) %>%
dplyr::rename(Date = `Date (Folder Name)`) -> Rscoredata
april18 %>%
dplyr::select(`Photo ID`:`Coral Position`) -> april18
june21%>%
dplyr::select(`Photo ID`:`Coral Position`) -> june21
full_join(april18, june21) %>%
dplyr::mutate(Species = case_when(Species == "Acer" ~ "Acropora cervicornis",
Species == "Pcli" ~ "Pseudodiploria clivosa")) %>%
dplyr::rename(ID = `Puck ID`) -> allRscores
full_join(allRscores, coral_metadata, by = c("Species", "ID")) %>%
drop_na(`Photo ID`)  -> R_metadata #821 rows
full_join(R_metadata, Rscoredata, by = c("Date", "Photo ID", "Coral Position")) %>%
dplyr::select(!Genotype) -> Rintensity_withmetadata
Rintensity_withmetadata$month <- format(Rintensity_withmetadata$Date, "%m")
Rintensity_withmetadata$Date <- as.factor(Rintensity_withmetadata$Date)
Rintensity_withmetadata$month <- as.factor(Rintensity_withmetadata$month)
Rintensity_withmetadata %>%
dplyr::group_by(ID, Species, Colony, Treatment, month) %>%
dplyr::mutate(mean_Rintensity_percoral = mean(Mean)) %>%
drop_na(ID) -> Rintensity_withmetadata
Rintensity_withmetadata %>%
ungroup() %>%
filter(month == "04" | month == "06") %>%
dplyr::select(ID, Species, Colony, Treatment, Treatment_Tank, month, mean_Rintensity_percoral) %>%
distinct() %>%
pivot_wider(names_from = "month", values_from = "mean_Rintensity_percoral") %>%
dplyr::mutate(percent_change = ((`06`-`04`)/`04`)*100) %>%
drop_na() -> percentchange
percentchange
library(tidyverse)
library(readxl)
library(rstatix)
library(plotrix)
library(ggpubr)
library(cowplot)
library(dunn.test)
coral_metadata <- readxl::read_xlsx("../metadata.xlsx")
fvfm <- read.csv("../3_photosynthetic_efficiency/ipam_tidy_data.csv")
fvfm <- read.csv("../Photosynthetic_efficiency/ipam_tidy_data.csv")
Rscoredata <- read_xlsx("../R_intensity//data_rscores.xlsx")
april18 <- read_xlsx("../R_intensity/photo_metadata.xlsx", sheet = "april 18")
june21 <- read_xlsx("../R_intensity/photo_metadata.xlsx", sheet = "june 21")
percent_cells_df <- read_csv("../Immune_cell_assay/Grace_percentcells_alldata.csv")
treatment_metadata<-fvfm %>%
select(Puck, Treatment) %>%
distinct() %>%
drop_na() #282 corals
fvfm %>%
drop_na(Colony) %>% #this is because there are some corals that never matched up to IPAM values so they're just NA
select(fvfm, Puck, Colony, Date, Species) %>%
filter(Date == "4/20/22" | Date == "4/22/22" | Date == "5/25/22") %>%
full_join(., treatment_metadata, by = "Puck") %>%
pivot_wider(names_from = Date, values_from = fvfm) %>%
select(!"NA") %>%
drop_na() %>%
mutate(change=(`5/25/22`-`4/22/22`)/`4/22/22`*100) -> fvfm_recovery_change
fvfm_recovery_change %>%
arrange(change) #there is one outlier
fvfm_recovery_change %>%
filter(change > -39) -> fvfm_recovery_change
fvfm_recovery_change %>%
ggplot(., aes(x = Species, y = change, fill = Treatment)) +
theme_classic()+
geom_boxplot() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Decline in Fv/Fm")+
theme(text = element_text(size = 15))
fvfm_recovery_change %>%
select(Puck:Treatment, change) %>%
mutate_at(vars(Colony, Puck, Treatment, Species), factor) -> fvfm_recovery_stats
fvfm_recovery_stats
fvfm_recovery_stats %>%
filter(Species == "Acervicornis")
fvfm_recovery_stats %>%
filter(Species == "Acervicornis") -> Acer_fvfm
recovery_model_Acer <- lm(change ~ Treatment + Colony, data = Acer_fvfm)
recovery_model_Acer_metrics <- augment(recovery_model_Acer)
plot(recovery_model_Acer)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(recovery_model_Acer_metrics$.resid) # significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment, data = recovery_model_Acer_metrics) #not significant
aov(change ~ Treatment, data = Acer_fvfm)
summary(aov(change ~ Treatment, data = Acer_fvfm))
recovery_model_Acer <- lm(change ~ Treatment*Colony, data = Acer_fvfm)
recovery_model_Acer_metrics <- augment(recovery_model_Acer)
plot(recovery_model_Acer)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(recovery_model_Acer_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Colony, data = recovery_model_Acer_metrics) #not significant
Acer_fvfm
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Colony, data = recovery_model_Acer_metrics) #not significant
aov(change ~ Treatment*Colony, data = Acer_fvfm)
summary(aov(change ~ Treatment*Colony, data = Acer_fvfm)) #p<0.001
Acer_fvfm
fvfm_recovery_change %>%
group_by(Species, Treatment) %>%
mutate(mean_fvfmlossnorm = mean(change), se_fvfmlossnorm = std.error(change)) %>%
ggplot(., aes(x = Treatment, y = mean_fvfmlossnorm)) +
theme_classic()+
geom_jitter(aes(y=change, color = Treatment, fill = Treatment),
position=position_dodge(width=0.8),
alpha=0.1, pch = 21,
color = "black") +
geom_errorbar(aes(x = Treatment, ymax = mean_fvfmlossnorm+se_fvfmlossnorm, ymin = mean_fvfmlossnorm-se_fvfmlossnorm, color = Treatment), width = .1, position = position_dodge(width=0.8)) +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
geom_point(mapping = aes(x = Treatment, fill = Treatment), size = 2.5, pch = 21, color = "black", position = position_dodge(width=0.8))+
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
xlab("Treatment")+
ylab("% Decline in Fv/Fm")+
facet_wrap(~Species, scales = "free_x") +
theme(text = element_text(size = 15)) +
theme(legend.position="none")
fvfm_recovery_change %>%
ggplot(., aes(x = Colony, y = change, fill = Treatment)) +
theme_classic()+
geom_boxplot() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Decline in Fv/Fm")+
facet_wrap(~Species) +
theme(text = element_text(size = 15))
fvfm_recovery_change %>%
ggplot(., aes(x = Colony, y = change, fill = Treatment)) +
theme_classic()+
geom_boxplot() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Decline in Fv/Fm")+
facet_wrap(~Species, scales = "free_x") +
theme(text = element_text(size = 15))
fvfm_recovery_change %>%
ggplot(., aes(x = Colony, y = change, fill = Treatment)) +
theme_classic()+
geom_boxplot() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Change in Fv/Fm")+
facet_wrap(~Species, scales = "free_x") +
theme(text = element_text(size = 15))
fvfm_recovery_change %>%
ggplot(., aes(x = Species, y = change, fill = Treatment)) +
theme_classic()+
geom_boxplot() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Decline in Fv/Fm")+
theme(text = element_text(size = 15))+
theme(legend.position="none")
p1<-fvfm_recovery_change %>%
ggplot(., aes(x = Species, y = change, fill = Treatment)) +
theme_classic()+
geom_boxplot() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Decline in Fv/Fm")+
theme(text = element_text(size = 15))+
theme(legend.position="none")
p2<-fvfm_recovery_change %>%
ggplot(., aes(x = Colony, y = change, fill = Treatment)) +
theme_classic()+
geom_boxplot() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Change in Fv/Fm")+
facet_wrap(~Species, scales = "free_x") +
theme(text = element_text(size = 15))
plot_grid(p1, p2, rel_widths = c(1.5,2))
ggsave("recoveryperiod_percentfvfmloss_boxplot.pdf", width = 12, height = 5)
capture.output(summary(aov(change ~ Treatment*Colony, data = Acer_fvfm)), file = "fvfm_recovery_Acer_anova.csv")
fvfm_recovery_stats %>%
filter(Species == "Pclivosa") -> Pcli_fvfm
recovery_model_Acer <- lm(change ~ Treatment + Colony, data = Pcli_fvfm)
recovery_model_Pcli <- lm(change ~ Treatment + Colony, data = Pcli_fvfm)
recovery_model_Pcli_metrics <- augment(recovery_model_Pcli)
plot(recovery_model_Pcli)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(recovery_model_Pcli_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment, data = recovery_model_Pcli_metrics) #not significant
# identifying outliers
recovery_model_Pcli_metrics %>%
filter(abs(.std.resid) > 3)
Pcli_fvfm %>%
filter(!(change > 39))
Pcli_fvfm
Pcli_fvfm %>%
filter(!(change > 39)) -> Pcli_fvfm
recovery_model_Pcli <- lm(change ~ Treatment + Colony, data = Pcli_fvfm)
recovery_model_Pcli_metrics <- augment(recovery_model_Pcli)
plot(recovery_model_Pcli)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(recovery_model_Pcli_metrics$.resid) # very significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment, data = recovery_model_Pcli_metrics) #not significant
aov(change ~ Treatment, data = Pcli_fvfm)
summary(aov(change ~ Treatment, data = Pcli_fvfm)) #p<0.001
summary(aov(change ~ Treatment*Colony, data = Acer_fvfm))
recovery_model_Pcli <- lm(change ~ Treatment*Colony, data = Pcli_fvfm)
recovery_model_Pcli_metrics <- augment(recovery_model_Pcli)
plot(recovery_model_Pcli)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(recovery_model_Pcli_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Colony, data = recovery_model_Pcli_metrics) #not significant
aov(change ~ Treatment*Colony, data = Pcli_fvfm)
summary(aov(change ~ Treatment*Colony, data = Pcli_fvfm))
capture.output(summary(aov(change ~ Treatment*Colony, data = Pcli_fvfm)), file = "fvfm_recovery_Pcli_anova.csv")
TukeyHSD(aov(change ~ Treatment*Colony, data = Pcli_fvfm))
TukeyHSD(aov(change ~ Treatment*Colony, data = Pcli_fvfm))
percent_cells_df%>%
mutate(Treatment = case_when(Treatment == "Control" ~ "Untreated",
Treatment == "Variable" ~ "Treated")) -> percent_cells_df
#there's one outlier to remove right off the bat: T1	Pcli	B	P9	r2	Percent=111.50	T1	Untreated
percent_cells_df %>%
filter(!(TimePoint=="T1" & Species == "Pcli" & Genotype == "B" & Treatment == "Untreated" & ID == "P9" & Replicate == "r2")) -> percent_cells_df
#replicates are technical replicates of the same coral fragment
#time points:
#T0 = initial pre-treatment (March 22)
#T1 = one week into treatment (March 30)
#T2 = end of treatment (April 20)
#follow-up = post CBASS and treatment follow-up (June 1)
percent_cells_df %>%
filter(TimePoint == "T2" | TimePoint == "FollowUp") %>%
mutate(num_days = case_when(TimePoint == "T2" ~ "0",
TimePoint == "FollowUp" ~ "43")) %>%
mutate(num_days = as.factor(num_days)) %>%
mutate(num_days = fct_relevel(num_days, "0", "43")) -> percent_cells_df
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, Genotype, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent)) %>%
ungroup() %>%
group_by(num_days, Tank, Species, Genotype, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perGenet = mean(Percent)) %>%
select(Species, Genotype, Tank, Treatment, num_days, mean_replicate_percent_perGenet) %>%
distinct() %>%
pivot_wider(names_from = "num_days", values_from = "mean_replicate_percent_perGenet") %>%
mutate(relative_activity = ((`43`-`0`)/`0`)*100) -> percent_cells_speciestreatments
ggplot(percent_cells_speciestreatments, aes(x=Species, y=relative_activity, fill= Treatment)) +
geom_boxplot() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Decline Immune Cell Activity")+
theme_classic() +
theme(text = element_text(size = 15))
ggplot(percent_cells_speciestreatments, aes(x=Species, y=relative_activity, fill= Treatment)) +
geom_boxplot() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Change Immune Cell Activity")+
theme_classic() +
theme(text = element_text(size = 15))
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
dplyr::group_by(num_days, Species, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
dplyr::group_by(num_days, Species, Treatment) %>%
dplyr::mutate(avg_percent_per_genet = mean(mean_replicate_percent_perID), se_percent_per_genet = std.error(mean_replicate_percent_perID)) %>%
ungroup() %>%
ggplot(., aes(x = num_days, y = avg_percent_per_genet))+
theme_classic()+
geom_jitter(aes(y=mean_replicate_percent_perID, color = Treatment, fill = Treatment),
position=position_dodge(width=0.8),
alpha=0.2, pch = 21,
color = "black") +
geom_errorbar(aes(x = num_days, ymax = avg_percent_per_genet+se_percent_per_genet, ymin = avg_percent_per_genet-se_percent_per_genet, color = Treatment), width = .3, position = position_dodge(width=0.8)) +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
geom_point(mapping = aes(x = num_days, fill = Treatment), size = 2, pch = 21, color = "black", position = position_dodge(width=0.8))+
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
xlab("Day")+
ylab("% Phagocytic Activity")+
facet_wrap(~Species, scales = "free_x", dir = "v") +
theme(text = element_text(size = 15)) +
theme(legend.position="none")
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, Genotype, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
group_by(num_days, Species, Genotype, Treatment) %>%
dplyr::mutate(avg_percent_per_genet = mean(mean_replicate_percent_perID), se_percent_per_genet = std.error(mean_replicate_percent_perID)) %>%
ungroup() %>%
ggplot(., aes(x = num_days, y = avg_percent_per_genet))+
theme_classic()+
geom_jitter(aes(y=mean_replicate_percent_perID, color = Treatment, fill = Treatment),
position=position_dodge(width=0.8),
alpha=0.2, pch = 21,
color = "black") +
geom_errorbar(aes(x = num_days, ymax = avg_percent_per_genet+se_percent_per_genet, ymin = avg_percent_per_genet-se_percent_per_genet, color = Treatment), width = .3, position = position_dodge(width=0.8)) +
scale_color_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
geom_point(mapping = aes(x = num_days, fill = Treatment), size = 2, pch = 21, color = "black", position = position_dodge(width=0.8))+
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
xlab("Day")+
ylab("% Phagocytic Activity")+
facet_wrap(~Species+Genotype, scales = "free_x") +
theme(text = element_text(size = 15))
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, Genotype, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent)) %>%
ungroup() %>%
group_by(num_days, Tank, Species, Genotype, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perGenet = mean(Percent)) %>%
select(Species, Genotype, Tank, Treatment, num_days, mean_replicate_percent_perGenet) %>%
distinct() %>%
pivot_wider(names_from = "num_days", values_from = "mean_replicate_percent_perGenet") %>%
mutate(relative_activity = ((`43`-`0`)/`0`)*100) -> percent_cells_speciestreatments
ggplot(percent_cells_speciestreatments, aes(x=Species, y=relative_activity, fill= Treatment)) +
geom_boxplot() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Change Immune Cell Activity")+
theme_classic() +
theme(text = element_text(size = 15))
ggsave("percentchange_immunecellactivity_treatment.pdf")
ggsave("percentchange_immunecellactivity_treatment.pdf", width = 12, height = 5)
ggplot(percent_cells_speciestreatments, aes(x=Species, y=relative_activity, fill= Treatment)) +
geom_boxplot() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Change Immune Cell Activity")+
theme_classic() +
theme(text = element_text(size = 15))
ggsave("percentchange_immunecellactivity_treatment.pdf", width = 12, height = 5)
ggplot(percent_cells_speciestreatments, aes(x=Species, y=relative_activity, fill= Treatment)) +
geom_boxplot() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Change Immune Cell Activity")+
theme_classic() +
theme(text = element_text(size = 15))
ggsave("percentchange_immunecellactivity_treatment.pdf", width = 8, height = 5)
percent_cells_speciestreatments %>%
dplyr::mutate_at(vars(Species, Genotype, Treatment), factor) -> percent_cells_speciestreatments
percent_cells_speciestreatments %>%
ungroup() -> percent_cells_speciestreatments
percent_cells_speciestreatments %>%
filter(Species == "Acer")
percent_cells_speciestreatments %>%
filter(Species == "Acer") -> Acer_immunecells
Acer_model <- lm(relative_activity ~ Treatment + Genotype + Tank, data = Acer_immunecells)
Acer_model_metrics <- augment(Acer_model)
plot(Acer_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Acer_model_metrics$.resid) #significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment, data = Acer_model_metrics) #significant
View(Acer_model_metrics)
View(Acer_model)
View(Acer_immunecells)
# identifying outliers
Acer_model_metrics %>%
filter(abs(.std.resid) > 3)
# do kruskal wallis test
# kruskal wallis test
kruskal_test(relative_activity ~ Treatment, data = Acer_immunecells)# not significant
Pcli_model <- lm(relative_activity ~ Treatment + Genotype + Tank, data = Pcli_immunecells)
percent_cells_speciestreatments %>%
filter(Species == "Pcli") -> Pcli_immunecells
Pcli_model <- lm(relative_activity ~ Treatment + Genotype + Tank, data = Pcli_immunecells)
Pcli_model_metrics <- augment(Pcli_model)
plot(Pcli_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Pcli_model_metrics$.resid) #significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment, data = Pcli_model_metrics) #not significant
# identifying outliers
Pcli_model_metrics %>%
filter(abs(.std.resid) > 3)  # no outliers, sample size too small and variable
# do kruskal wallis test
# kruskal wallis test
kruskal_test(relative_activity ~ Treatment, data = Pcli_immunecells)# not significant
