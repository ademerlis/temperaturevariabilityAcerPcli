filter(Removed_Date >= "2022-06-25") %>%
mutate(start_date="2022-06-25") %>%
mutate(start_date = ymd(start_date)) %>%
mutate(Removed_Date = ymd(Removed_Date)) %>%
mutate(days_to_removed = Removed_Date - start_date) %>%
mutate(days_to_removed = as.numeric(days_to_removed)) %>%
group_by(Species, Treatment) %>%
summarise(mean=mean(days_to_removed), sd = sd(days_to_removed)) %>%
as.data.frame()
treat_model <- lm(days_to_removed ~ Treatment*Species*Colony, data = slowburn_summary_data)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #not significant
#make interaction term
slowburn_summary_data$Species_Treatment_Colony <- interaction(slowburn_summary_data$Species, slowburn_summary_data$Treatment, slowburn_summary_data$Colony)
#run Welch's anova
oneway.test(days_to_removed ~ Species_Treatment_Colony, data = slowburn_summary_data, var.equal = FALSE) #significant
slowburn_summary_data
slowburn_summary_data
#what are the sample sizes?
slowburn_summary_data %>%
group_by(Species, Colony, Treatment, slowburn) %>%
summarise(count = n())
#what are the sample sizes?
slowburn_summary_data %>%
drop_na() %>%
group_by(Species, Colony, Treatment, slowburn) %>%
summarise(count = n())
#what are the sample sizes?
slowburn_summary_data %>%
drop_na() %>%
group_by(Species, Colony, Treatment) %>%
summarise(count = n())
slowburn_summary_data
#run Welch's anova
oneway.test(days_to_removed ~ Species_Treatment_Colony, data = slowburn_summary_data, var.equal = FALSE) #significant
library(tidyverse)
library(janitor)
library(rstatix)
library(cowplot)
library(plotrix)
metadata <- readxl::read_xlsx("../metadata.xlsx", sheet = "tidy_data")
str(metadata) #295 corals
# metadata %>%
#   filter(!Removed_Date == "unknown") -> metadata #244 corals...
metadata$Removed_Date <- as.numeric(metadata$Removed_Date)
metadata$Removed_Date <- as.Date(metadata$Removed_Date, origin = "1899-12-30")
metadata$mortality_date <- as.numeric(metadata$mortality_date)
metadata$mortality_date <- as.Date(metadata$mortality_date, origin = "1899-12-30")
metadata %>%
mutate(CBASS_temp = case_when(CBASS_tank == "1" ~ "36",
CBASS_tank == "2" ~ "37",
CBASS_tank == "3" ~ "32",
CBASS_tank == "4" ~ "33",
CBASS_tank == "5" ~ "35",
CBASS_tank == "6" ~ "30",
CBASS_tank == "7" ~ "34",
CBASS_tank == "8" ~ "28")) -> tidy_metadata
tidy_metadata %>%
filter(Removed_Date < "2022-05-20") %>%
arrange(desc(Removed_Date))
#April 26 was the last coral reported with a mortality date until the slow burn heat stress started. So have April 26 be the cut-off point for CBASS mortality plots.
ggplot(tidy_metadata, aes(x=Removed_Date, fill = Treatment)) +
geom_bar() +
facet_wrap(~Species)
ggplot(tidy_metadata, aes(x=mortality_date, fill = Treatment)) +
geom_bar() +
facet_wrap(~Species)
CBASS_mortality <- tidy_metadata %>%
dplyr::filter(Removed_Date >= "2022-04-20" & Removed_Date <= "2022-04-26")
#for this time period, Removed_Date and mortality_date match up so there's no need to use the coalesce function
CBASS_mortality %>%
mutate(Reason_removed = case_when(Reason_removed == "dead" ~ "RTL",
Reason_removed == "post-CBASS RTL" ~ "RTL",
Reason_removed == "RTL" ~ "RTL")) %>%
drop_na(Species, Treatment) %>%
group_by(Species, Treatment) %>%
summarize(count_RTL = n()) -> RTL_species_treatment_count
CBASS_mortality %>%
mutate(Reason_removed = case_when(Reason_removed == "dead" ~ "RTL",
Reason_removed == "post-CBASS RTL" ~ "RTL",
Reason_removed == "RTL" ~ "RTL")) %>%
drop_na(Species, Treatment) %>%
group_by(Species, Treatment, CBASS_temp) %>%
summarize(count_RTL = n()) -> RTL_species_treatment_CBASStemps
tidy_metadata %>%
dplyr::filter(!Removed_Date <= "2022-04-20" | is.na(Removed_Date)) %>% #remove everything that was removed before CBASS so you only account for RTL due to CBASS
group_by(Species, Treatment) %>%
summarize(count_total = n()) %>%
full_join(., RTL_species_treatment_count) %>%
mutate(count_survived = count_total-count_RTL) %>%
mutate(proportion_survived = count_survived/count_total) %>%
mutate(proportion_RTL = 1-proportion_survived)
install.packages("goseq")
BiocManager::install("goseq")
#BiocManager::install("goseq")
library(goseq)
library(tidyverse)
library(tidyverse)
library(plotrix)
library(ggplot2)
library(tidyr)
goslim <- read.csv("GO-GOslim.csv")
goslim <- goslim %>% dplyr::select(-term)
View(goslim)
TreatedvUntreated_DGEs <- read.csv("results_csv/TreatedvsUntreated_annotatedDGEs.csv")
TreatedvUntreated_DGEs %>%
select(gene, annot)
#BiocManager::install("goseq")
library(tidyverse)
TreatedvUntreated_DGEs %>%
dplyr::select(gene, annot)
TreatedvUntreated_DGEs %>%
dplyr::select(gene, annot) -> TreatedvUntreated_DGEs
TreatedvInitial_DGEs <- read.csv("results_csv/TreatedvsInitial_annotatedDGEs.csv")
TreatedvInitial_DGEs %>%
dplyr::select(gene, annot) -> TreatedvInitial_DGEs
TreatedvUntreated_DGEs
Treated_vs_Initial_lpv <- read_csv("../results_csv/Treated_vs_Initial_lpv.csv")
setwd("~/OneDrive - University of Miami/GitHub/Ch2_temperaturevariability2023/gene_expression/Acervicornis/GO MWU")
Treated_vs_Initial_lpv <- read_csv("../results_csv/Treated_vs_Initial_lpv.csv")
Treated_vs_Initial_lpv %>%
mutate(
text_part = str_extract(gene, "[A-Za-z]+"),
numeric_part = str_extract(gene, "[0-9]+"))
#### update gene names so they match the GO Annotations file (Acropora000001 -> Acropora1) ####
library(tidyverse)
Treated_vs_Initial_lpv %>%
mutate(
text_part = str_extract(gene, "[A-Za-z]+"),
numeric_part = str_extract(gene, "[0-9]+"))
source("gomwu.functions.R")
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goAnnotations="Acropora_iso2go.tab" # two-column, tab-delimited, one line per gene,
# Edit these to match your data file names:
input="Treated_vs_Initial_lpv.csv" # two columns of comma-separated values: gene id, continuous measure of significance.
goDivision="MF" # either MF, or BP, or CC
# Calculating stats. It might take ~3 min for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs,
#go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
# absValue=1,
#absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
# level1=0.1,
level1=0.05,
# level2=0.1, # FDR cutoff to print in regular (not italic) font.
# level2=0.05,
level2=0.01,
# level3=0.05, # FDR cutoff to print in large bold font.
# level3=0.01,
level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# text representation of results, with actual adjusted p-values
results
write.csv(results, file = "Treated_vs_Initial_lpv_MF_05.csv")
goDivision="BP" # either MF, or BP, or CC
# Calculating stats. It might take ~3 min for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs,
#go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
setwd("~/Library/CloudStorage/OneDrive-UniversityofMiami/GitHub/Ch2_temperaturevariability2023/gene_expression/Pclivosa/GO-MWU")
cc_TreatedvInitial <- read_csv("CC_Treated_vs_Initial_fc.csv")
library(tidyverse)
cc_TreatedvInitial <- read_csv("CC_Treated_vs_Initial_fc.csv")
View(cc_TreatedvInitial)
cc_TreatedvInitial <- read.delim("CC_Treated_vs_Initial_fc.csv", sep = " ")
View(cc_TreatedvInitial)
cc_TreatedvInitial <- read.table("CC_Treated_vs_Initial_fc.csv", sep = " ")
View(cc_TreatedvInitial)
cc_TreatedvInitial <- read.csv("CC_Treated_vs_Initial_fc.csv", sep = " ")
cc_TreatedvInitial <- read.csv("CC_Treated_vs_Initial_fc.csv", sep = "")
View(cc_TreatedvInitial)
MWU_result_CC_TreatedvInitial <- read.csv("MWU_CC_Treated_vs_Initial_fc.csv")
View(MWU_result_CC_TreatedvInitial)
MWU_result_CC_TreatedvInitial <- read.csv("MWU_CC_Treated_vs_Initial_fc.csv", sep = "")
View(MWU_result_CC_TreatedvInitial)
cc_TreatedvInitial %>%
rename(lfc = value)
cc_TreatedvInitial %>%
rename(lfc = value) -> cc_TreatedvInitial
full_join(cc_TreatedvInitial, MWU_result_CC_TreatedvInitial, by = c("level", "term", "name"))
cc_TreatedvInitial %>%
rename(lfc = value) %>%
rename (level = lev) -> cc_TreatedvInitial
cc_TreatedvInitial <- read.csv("CC_Treated_vs_Initial_fc.csv", sep = "")
cc_TreatedvInitial %>%
rename(lfc = value) %>%
rename (level = lev) -> cc_TreatedvInitial
full_join(cc_TreatedvInitial, MWU_result_CC_TreatedvInitial, by = c("level", "term", "name"))
full_join(cc_TreatedvInitial, MWU_result_CC_TreatedvInitial, by = c("level", "term", "name")) %>%
filter(padj < 0.1)
full_join(cc_TreatedvInitial, MWU_result_CC_TreatedvInitial, by = c("level", "term", "name"))
full_join(cc_TreatedvInitial, MWU_result_CC_TreatedvInitial, by = c("level", "term", "name")) %>%
filter(p.adj < 0.1)
full_join(cc_TreatedvInitial, MWU_result_CC_TreatedvInitial, by = c("level", "term", "name")) %>%
filter(p.adj < 0.1) %>%
distinct(name)
full_join(cc_TreatedvInitial, MWU_result_CC_TreatedvInitial, by = c("level", "term", "name")) %>%
filter(p.adj < 0.1)
full_join(cc_TreatedvInitial, MWU_result_CC_TreatedvInitial, by = c("level", "term", "name")) %>%
filter(p.adj < 0.1) %>%
distinct(level)
full_join(cc_TreatedvInitial, MWU_result_CC_TreatedvInitial, by = c("level", "term", "name")) %>%
filter(p.adj < 0.1) %>%
filter(level == "1") %>%
distinct(name)
full_join(cc_TreatedvInitial, MWU_result_CC_TreatedvInitial, by = c("level", "term", "name")) %>%
filter(p.adj < 0.1) %>%
filter(level == "7") %>%
distinct(name)
full_join(cc_TreatedvInitial, MWU_result_CC_TreatedvInitial, by = c("level", "term", "name")) %>%
filter(p.adj < 0.1) %>%
filter(level == "3") %>%
distinct(name)
full_join(cc_TreatedvInitial, MWU_result_CC_TreatedvInitial, by = c("level", "term", "name")) %>%
filter(p.adj < 0.1) %>%
filter(level == "5") %>%
distinct(name)
full_join(cc_TreatedvInitial, MWU_result_CC_TreatedvInitial, by = c("level", "term", "name")) %>%
filter(p.adj < 0.1) %>%
filter(level == "6") %>%
distinct(name)
5
full_join(cc_TreatedvInitial, MWU_result_CC_TreatedvInitial, by = c("level", "term", "name")) %>%
filter(p.adj < 0.1) %>%
filter(level == "5") %>%
distinct(name)
full_join(cc_TreatedvInitial, MWU_result_CC_TreatedvInitial, by = c("level", "term", "name")) %>%
filter(p.adj < 0.1) %>%
distinct(name)
full_join(cc_TreatedvInitial, MWU_result_CC_TreatedvInitial, by = c("level", "term", "name")) %>%
filter(p.adj < 0.1) %>%
distinct(term)
full_join(cc_TreatedvInitial, MWU_result_CC_TreatedvInitial, by = c("level", "term", "name"))
full_join(cc_TreatedvInitial, MWU_result_CC_TreatedvInitial, by = c("level", "term", "name")) %>%
filter(p.adj < 0.1) %>%
distinct(seq)
full_join(cc_TreatedvInitial, MWU_result_CC_TreatedvInitial, by = c("level", "term", "name")) %>%
filter(p.adj < 0.05) %>%
distinct(seq)
full_join(cc_TreatedvInitial, MWU_result_CC_TreatedvInitial, by = c("level", "term", "name")) %>% view()
input="Treated_vs_Initial_lpv.csv"
library(tidyverse)
treated_vs_initial=read.csv("Treated_vs_Initial_lpv.csv")
View(treated_vs_initial)
treated_vs_initial %>%
mutate(lpv = case_when(abs(lpv) > 1.3 ~ "1",
else ~ 0))
treated_vs_initial %>%
mutate(lpv = case_when(abs(lpv) > 1.3 ~ "1",
TRUE ~ 0))
treated_vs_initial %>%
mutate(lpv = case_when(abs(lpv) > 1.3 ~ "1",
FALSE ~ 0))
treated_vs_initial %>%
mutate(lpv = case_when(abs(lpv) > 1.3 ~ "1",
abs(lpv) <= 1.3 ~ 0))
treated_vs_initial %>%
mutate(lpv = case_when(abs(lpv) > 1.3 ~ 1,
abs(lpv) <= 1.3 ~ 0))
treated_vs_initial %>%
mutate(lpv = case_when(abs(lpv) > 1.3 ~ 1,
abs(lpv) <= 1.3 ~ 0)) -> treated_vs_initial
treated_vs_initial %>%
group_by(lpv) %>%
summarise(count = n())
setwd("~/Library/CloudStorage/OneDrive-UniversityofMiami/GitHub/Ch2_temperaturevariability2023/gene_expression/Acervicornis/GO-MWU")
treated_vs_initial=read.csv("Treated_vs_Initial_lpv.csv")
setwd("~/Library/CloudStorage/OneDrive-UniversityofMiami/GitHub/Ch2_temperaturevariability2023/gene_expression/Acervicornis/GO-MWU/lpv")
treated_vs_initial=read.csv("Treated_vs_Initial_lpv.csv")
treated_vs_initial %>%
mutate(lpv = case_when(abs(lpv) > 1.3 ~ 1,
abs(lpv) <= 1.3 ~ 0)) -> treated_vs_initial
treated_vs_initial %>%
group_by(lpv) %>%
summarise(count = n())
treated_vs_initial %>%
write.csv("Treated_vs_Initial_lpv_fisher.csv")
treated_vs_initial %>%
write.csv("../Treated_vs_Initial_lpv_fisher.csv")
setwd("~/Library/CloudStorage/OneDrive-UniversityofMiami/GitHub/Ch2_temperaturevariability2023/gene_expression/Acervicornis/GO-MWU")
source("gomwu.functions.R")
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goAnnotations="Acropora_iso2go.tab"
input="Treated_vs_Initial_lpv_fisher.csv"
goDivision="MF" # either MF, or BP, or CC
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
treated_vs_initial %>%
write_csv("../Treated_vs_Initial_lpv_fisher.csv")
treated_vs_initial %>%
write_csv("Treated_vs_Initial_lpv_fisher.csv")
input="Treated_vs_Initial_lpv_fisher.csv"
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
#absValue=1,
absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
# level1=0.1,
level1=0.05,
# level2=0.1, # FDR cutoff to print in regular (not italic) font.
# level2=0.05,
level2=0.01,
# level3=0.05, # FDR cutoff to print in large bold font.
# level3=0.01,
level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5 # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
#absValue=1,
absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level1=0.1,
#level1=0.05,
level2=0.1, # FDR cutoff to print in regular (not italic) font.
# level2=0.05,
#level2=0.01,
level3=0.05, # FDR cutoff to print in large bold font.
# level3=0.01,
#level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5 # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
goDivision="BP" # either MF, or BP, or CC
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
setwd("~/Library/CloudStorage/OneDrive-UniversityofMiami/GitHub/Ch2_temperaturevariability2023/gene_expression/Pclivosa/GO-MWU")
source("gomwu.functions.R")
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goAnnotations="Pclivosa_iso2go.tab"
input="Treated_vs_Initial_fc.csv" # two columns of comma-separated values: gene id, continuous measure of significance.
goDivision="CC" # either MF, or BP, or CC
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
absValue=1,
#absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level1=0.1,
#level1=0.05,
# level2=0.1, # FDR cutoff to print in regular (not italic) font.
level2=0.05,
#level2=0.01,
# level3=0.05, # FDR cutoff to print in large bold font.
level3=0.01,
#level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
write.csv(results, file = "Treated_vs_Initial_CC_fc.csv")
input="Treated_vs_Untreated_fc.csv"
goDivision="MF" # either MF, or BP, or CC
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
absValue=1,
#absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level1=0.1,
#level1=0.05,
# level2=0.1, # FDR cutoff to print in regular (not italic) font.
level2=0.05,
#level2=0.01,
# level3=0.05, # FDR cutoff to print in large bold font.
level3=0.01,
#level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
#absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
absValue=1,
#absValue=0.001,
level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
#level1=0.1,
#level1=0.05,
# level2=0.1, # FDR cutoff to print in regular (not italic) font.
level2=0.05,
#level2=0.01,
# level3=0.05, # FDR cutoff to print in large bold font.
level3=0.01,
#level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
View(results)
