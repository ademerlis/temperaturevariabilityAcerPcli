yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1, 1),
main = paste("Module-trait relationships")
)
# Display the correlation values within a heatmap plot
labeledHeatmap(
Matrix = moduleTraitCor,
xLabels = names(traits_withphysio),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1, 1),
main = paste("Module-trait relationships")
)
quartz()
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(
Matrix = moduleTraitCor,
xLabels = names(traits_withphysio),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1, 1),
main = paste("Module-trait relationships")
)
table(moduleColors) # gives numbers of genes in each module
ibrary(RColorBrewer)
library(RColorBrewer)
modLabels=sub("ME","",names(MEs))
ps=signif(moduleTraitPvalue,1)
cors=signif(moduleTraitCor,2)
textMatrix = cors;
textMatrix[ps>0.05]="-"
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(traits),
ySymbols = modLabels,
yLabels = modLabels,
colorLabels = FALSE,
colors = colorRampPalette(c("blue","lightblue","white","coral","red"))(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-0.7,0.7),
main = paste("A.cervicornis Module-Trait correlations"))
textMatrix = cors;
# paste(cors, "\n(",ps, ")", sep = "");
textMatrix[ps>0.05]="-"
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(traits_withphysio),
ySymbols = modLabels,
yLabels = modLabels,
colorLabels = FALSE,
colors = colorRampPalette(c("blue","lightblue","white","coral","red"))(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-0.7,0.7),
main = paste("A.cervicornis Module-Trait correlations"))
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(traits_withphysio),
ySymbols = modLabels,
yLabels = modLabels,
colorLabels = FALSE,
colors = colorRampPalette(c("blue","lightblue","white","coral","red"))(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-0.7,0.7),
main = paste("A.cervicornis Module-Trait correlations"))
quartz()
library(RColorBrewer)
modLabels=sub("ME","",names(MEs))
ps=signif(moduleTraitPvalue,1)
cors=signif(moduleTraitCor,2)
textMatrix = cors;
# paste(cors, "\n(",ps, ")", sep = "");
textMatrix[ps>0.05]="-"
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(traits_withphysio),
ySymbols = modLabels,
yLabels = modLabels,
colorLabels = FALSE,
colors = colorRampPalette(c("blue","lightblue","white","coral","red"))(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-0.7,0.7),
main = paste("A.cervicornis Module-Trait correlations"))
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(traits_withphysio),
ySymbols = modLabels,
yLabels = modLabels,
colorLabels = FALSE,
colors = colorRampPalette(c("blue","lightblue","white","coral","red"))(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-0.7,0.7),
main = paste("A.cervicornis Module-Trait correlations"))
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(traits_withphysio),
ySymbols = modLabels,
yLabels = modLabels,
colorLabels = FALSE,
colors = colorRampPalette(c("blue","lightblue","white","coral","red"))(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-0.7,0.7),
main = paste("P.clivosa Module-Trait correlations"))
quartz()
labelShift=750 # increase to move module size labels to the right
par(mar = c(6, 8.5, 3, 3));
mct=table(moduleColors)
mct[modLabels]
x=barplot(mct[rev(modLabels)],horiz=T,las=1,xlim=c(0,16000),col=rev(modLabels))
text(mct[rev(modLabels)]+labelShift,y=x,mct[rev(modLabels)],cex=0.9)
barplot(mct[rev(modLabels)],horiz=T,las=1,xlim=c(0,16000),col=rev(modLabels))
text(mct[rev(modLabels)]+labelShift,y=x,mct[rev(modLabels)],cex=0.9)
# run for each of these statements individually
whichTrait="Initial"
nGenes = ncol(datt);
nSamples = nrow(datt);
selTrait = as.data.frame(traits[,whichTrait]);
selTrait = as.data.frame(traits_withphysio[,whichTrait]);
names(selTrait) = whichTrait
modNames = substring(names(MEs), 3)
geneModuleMembership = as.data.frame(signedKME(datt, MEs));
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));
names(geneModuleMembership) = paste("MM", modNames, sep="");
names(MMPvalue) = paste("p.MM", modNames, sep="");
geneTraitSignificance = as.data.frame(cor(datt, selTrait, use = "p"));
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples));
names(geneTraitSignificance) = paste("GS.", names(selTrait), sep="");
names(GSPvalue) = paste("p.GS.", names(selTrait), sep="");
# selecting specific modules to plot (change depending on which trait you're looking at)
moduleCols=c("lightgreen", "blue","salmon", "royalblue") # for Initial
counter=0
# shows correlations for all modules
for(module in modNames[1:length(modNames)]){
counter=counter+1}
quartz()
par(mfrow=c(3,3))
# shows correlations for significant modules only as specified above
for (module in moduleCols) {
column = match(module, modNames);
moduleGenes = moduleColors==module;
column = match(module, modNames);
moduleGenes = moduleColors==module;
#trr="heat resistance"
verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),
abs(geneTraitSignificance[moduleGenes, 1]),
xlab = paste(module,"module membership"),
ylab = paste("GS for", whichTrait),
col = "grey50",mgp=c(2.3,1,0))
}
# run for each of these statements individually
#whichTrait="Initial"
whichTrait="Treated"
nGenes = ncol(datt);
nSamples = nrow(datt);
selTrait = as.data.frame(traits_withphysio[,whichTrait]);
names(selTrait) = whichTrait
# names (colors) of the modules
modNames = substring(names(MEs), 3)
geneModuleMembership = as.data.frame(signedKME(datt, MEs));
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));
names(geneModuleMembership) = paste("MM", modNames, sep="");
names(MMPvalue) = paste("p.MM", modNames, sep="");
geneTraitSignificance = as.data.frame(cor(datt, selTrait, use = "p"));
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples));
names(geneTraitSignificance) = paste("GS.", names(selTrait), sep="");
names(GSPvalue) = paste("p.GS.", names(selTrait), sep="");
# selecting specific modules to plot (change depending on which trait you're looking at)
#moduleCols=c("lightgreen", "blue","salmon", "royalblue") # for Initial
moduleCols=c("lightgreen", "royalblue") # for Treated
counter=0
# shows correlations for all modules
for(module in modNames[1:length(modNames)]){
counter=counter+1}
quartz()
par(mfrow=c(3,3))
# shows correlations for significant modules only as specified above
for (module in moduleCols) {
column = match(module, modNames);
moduleGenes = moduleColors==module;
column = match(module, modNames);
moduleGenes = moduleColors==module;
#trr="heat resistance"
verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),
abs(geneTraitSignificance[moduleGenes, 1]),
xlab = paste(module,"module membership"),
ylab = paste("GS for", whichTrait),
col = "grey50",mgp=c(2.3,1,0))
}
# run for each of these statements individually
#whichTrait="Initial"
#whichTrait="Treated"
whichTrait="Untreated"
nGenes = ncol(datt);
nSamples = nrow(datt);
selTrait = as.data.frame(traits_withphysio[,whichTrait]);
names(selTrait) = whichTrait
# names (colors) of the modules
modNames = substring(names(MEs), 3)
geneModuleMembership = as.data.frame(signedKME(datt, MEs));
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));
names(geneModuleMembership) = paste("MM", modNames, sep="");
names(MMPvalue) = paste("p.MM", modNames, sep="");
geneTraitSignificance = as.data.frame(cor(datt, selTrait, use = "p"));
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples));
names(geneTraitSignificance) = paste("GS.", names(selTrait), sep="");
names(GSPvalue) = paste("p.GS.", names(selTrait), sep="");
# selecting specific modules to plot (change depending on which trait you're looking at)
#moduleCols=c("lightgreen", "blue","salmon", "royalblue") # for Initial
#moduleCols=c("lightgreen", "royalblue") # for Treated
moduleCols=c("blue","salmon", "royalblue") # for Untreated
counter=0
# shows correlations for all modules
for(module in modNames[1:length(modNames)]){
counter=counter+1}
quartz()
par(mfrow=c(3,3))
# shows correlations for significant modules only as specified above
for (module in moduleCols) {
column = match(module, modNames);
moduleGenes = moduleColors==module;
column = match(module, modNames);
moduleGenes = moduleColors==module;
#trr="heat resistance"
verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),
abs(geneTraitSignificance[moduleGenes, 1]),
xlab = paste(module,"module membership"),
ylab = paste("GS for", whichTrait),
col = "grey50",mgp=c(2.3,1,0))
}
# run for each of these statements individually
which.module="lightgreen"
datME=MEs
datExpr=datt
quartz()
ME=datME[, paste("ME",which.module, sep="")]
par(mfrow=c(2,1), mar=c(0.3, 5.5, 3, 2))
plotMat(t(scale(datExpr[,moduleColors==which.module ]) ),
nrgcols=30,rlabels=F,rcols=which.module,
main=which.module, cex.main=2)
par(mar=c(5, 4.2, 0, 0.7))
barplot(ME, col=which.module, main="", cex.main=2,
ylab="eigengene expression",xlab="sample")
length(datExpr[1,moduleColors==which.module ]) # number of genes in chosen module
# run for each of these statements individually
#which.module="lightgreen"
which.module="blue"
datME=MEs
datExpr=datt
quartz()
ME=datME[, paste("ME",which.module, sep="")]
par(mfrow=c(2,1), mar=c(0.3, 5.5, 3, 2))
plotMat(t(scale(datExpr[,moduleColors==which.module ]) ),
nrgcols=30,rlabels=F,rcols=which.module,
main=which.module, cex.main=2)
par(mar=c(5, 4.2, 0, 0.7))
barplot(ME, col=which.module, main="", cex.main=2,
ylab="eigengene expression",xlab="sample")
length(datExpr[1,moduleColors==which.module ])
# run for each of these statements individually
#which.module="lightgreen"
#which.module="blue"
which.module="salmon"
datME=MEs
datExpr=datt
quartz()
ME=datME[, paste("ME",which.module, sep="")]
par(mfrow=c(2,1), mar=c(0.3, 5.5, 3, 2))
plotMat(t(scale(datExpr[,moduleColors==which.module ]) ),
nrgcols=30,rlabels=F,rcols=which.module,
main=which.module, cex.main=2)
par(mar=c(5, 4.2, 0, 0.7))
barplot(ME, col=which.module, main="", cex.main=2,
ylab="eigengene expression",xlab="sample")
length(datExpr[1,moduleColors==which.module ])
# run for each of these statements individually
#which.module="lightgreen"
#which.module="blue"
#which.module="salmon"
which.module="royalblue"
datME=MEs
datExpr=datt
quartz()
ME=datME[, paste("ME",which.module, sep="")]
par(mfrow=c(2,1), mar=c(0.3, 5.5, 3, 2))
plotMat(t(scale(datExpr[,moduleColors==which.module ]) ),
nrgcols=30,rlabels=F,rcols=which.module,
main=which.module, cex.main=2)
par(mar=c(5, 4.2, 0, 0.7))
barplot(ME, col=which.module, main="", cex.main=2,
ylab="eigengene expression",xlab="sample")
length(datExpr[1,moduleColors==which.module ])
# calculating module memberships for all genes for all modules
allkME =as.data.frame(signedKME(datt, MEs))
names(allkME)=gsub("kME","",names(allkME))
which.module="lightgreen"
inModuleBinary=as.numeric(moduleColors==which.module)
combo=data.frame("gene"=row.names(vsd.wg),"Fish_kME"=allkME[,which.module]*inModuleBinary)
write.csv(combo,file=paste(which.module,".csv",sep=""),row.names=F,quote=F)
#which.module="lightgreen"
which.module="blue"
inModuleBinary=as.numeric(moduleColors==which.module)
combo=data.frame("gene"=row.names(vsd.wg),"Fish_kME"=allkME[,which.module]*inModuleBinary)
write.csv(combo,file=paste(which.module,".csv",sep=""),row.names=F,quote=F)
#which.module="lightgreen"
#which.module="blue"
which.module="salmon"
inModuleBinary=as.numeric(moduleColors==which.module)
combo=data.frame("gene"=row.names(vsd.wg),"Fish_kME"=allkME[,which.module]*inModuleBinary)
write.csv(combo,file=paste(which.module,".csv",sep=""),row.names=F,quote=F)
#which.module="lightgreen"
#which.module="blue"
#which.module="salmon"
which.module="royalblue"
inModuleBinary=as.numeric(moduleColors==which.module)
combo=data.frame("gene"=row.names(vsd.wg),"Fish_kME"=allkME[,which.module]*inModuleBinary)
write.csv(combo,file=paste(which.module,".csv",sep=""),row.names=F,quote=F)
library(pheatmap)
allkME =signedKME(datt, MEs)
gg=read.delim(file="bioinformatics/Pclivosa_iso2geneName.tab",sep="\t")
which.module="lightgreen"
top=30 # number of named top-kME genes to plot
datME=MEs
datExpr=datt
modcol=paste("kME",which.module,sep="")
sorted=vsd.wg[order(allkME[,modcol],decreasing=T),]
# selection top N names genes, attaching gene names
gnames=c();counts=0;hubs=c()
for(i in 1:length(sorted[,1])) {
if (row.names(sorted)[i] %in% gg[,1]) {
counts=counts+1
gn=gg[gg[,1]==row.names(sorted)[i],2]
gn=paste(gn,row.names(sorted)[i],sep=".")
if (gn %in% gnames) {
gn=paste(gn,counts,sep=".")
}
gnames=append(gnames,gn)
hubs=data.frame(rbind(hubs,sorted[i,]))
if (counts==top) {break}
}
}
row.names(hubs)=gnames
colnames(hubs)
categories <- c("Initial", "Treated", "Untreated")
category_columns <- lapply(categories, function(cat) {
matching_columns <- grep(cat, names(hubs), value = TRUE)
hubs[, matching_columns, drop = FALSE]
})
# Bind the columns back together in the desired order
reordered_df <- do.call(cbind, category_columns)
contrasting = colorRampPalette(rev(c("chocolate1","#FEE090","grey10", "cyan3","cyan")))(100)
pheatmap(as.matrix(reordered_df),scale="row",col=contrasting,border_color=NA,treeheight_col=0,cex=0.9,cluster_rows = F, cluster_cols = F)
#which.module="lightgreen"
which.module="blue"
datME=MEs
datExpr=datt
modcol=paste("kME",which.module,sep="")
sorted=vsd.wg[order(allkME[,modcol],decreasing=T),]
# selection top N names genes, attaching gene names
gnames=c();counts=0;hubs=c()
for(i in 1:length(sorted[,1])) {
if (row.names(sorted)[i] %in% gg[,1]) {
counts=counts+1
gn=gg[gg[,1]==row.names(sorted)[i],2]
gn=paste(gn,row.names(sorted)[i],sep=".")
if (gn %in% gnames) {
gn=paste(gn,counts,sep=".")
}
gnames=append(gnames,gn)
hubs=data.frame(rbind(hubs,sorted[i,]))
if (counts==top) {break}
}
}
row.names(hubs)=gnames
categories <- c("Initial", "Treated", "Untreated")
category_columns <- lapply(categories, function(cat) {
matching_columns <- grep(cat, names(hubs), value = TRUE)
hubs[, matching_columns, drop = FALSE]
})
reordered_df <- do.call(cbind, category_columns)
contrasting = colorRampPalette(rev(c("chocolate1","#FEE090","grey10", "cyan3","cyan")))(100)
#contrasting2 = colorRampPalette(rev(c("chocolate1","chocolate1","#FEE090","grey10", "cyan3","cyan")))(100)
#contrasting3 = colorRampPalette(rev(c("chocolate1","#FEE090","grey10", "cyan3","cyan","cyan")))(100)
#pdf(file="heatmap_top30_royalblue.pdf")
pheatmap(as.matrix(reordered_df),scale="row",col=contrasting,border_color=NA,treeheight_col=0,cex=0.9,cluster_rows = F, cluster_cols = F)
#which.module="lightgreen"
#which.module="blue"
which.module="salmon"
datME=MEs
datExpr=datt
modcol=paste("kME",which.module,sep="")
sorted=vsd.wg[order(allkME[,modcol],decreasing=T),]
# selection top N names genes, attaching gene names
gnames=c();counts=0;hubs=c()
for(i in 1:length(sorted[,1])) {
if (row.names(sorted)[i] %in% gg[,1]) {
counts=counts+1
gn=gg[gg[,1]==row.names(sorted)[i],2]
gn=paste(gn,row.names(sorted)[i],sep=".")
if (gn %in% gnames) {
gn=paste(gn,counts,sep=".")
}
gnames=append(gnames,gn)
hubs=data.frame(rbind(hubs,sorted[i,]))
if (counts==top) {break}
}
}
row.names(hubs)=gnames
colnames(hubs)
categories <- c("Initial", "Treated", "Untreated")
# Extract and sort columns for each category
category_columns <- lapply(categories, function(cat) {
matching_columns <- grep(cat, names(hubs), value = TRUE)
hubs[, matching_columns, drop = FALSE]
})
# Bind the columns back together in the desired order
reordered_df <- do.call(cbind, category_columns)
contrasting = colorRampPalette(rev(c("chocolate1","#FEE090","grey10", "cyan3","cyan")))(100)
#contrasting2 = colorRampPalette(rev(c("chocolate1","chocolate1","#FEE090","grey10", "cyan3","cyan")))(100)
#contrasting3 = colorRampPalette(rev(c("chocolate1","#FEE090","grey10", "cyan3","cyan","cyan")))(100)
#pdf(file="heatmap_top30_royalblue.pdf")
pheatmap(as.matrix(reordered_df),scale="row",col=contrasting,border_color=NA,treeheight_col=0,cex=0.9,cluster_rows = F, cluster_cols = F)
#which.module="lightgreen"
#which.module="blue"
#which.module="salmon"
which.module="royalblue"
datME=MEs
datExpr=datt
modcol=paste("kME",which.module,sep="")
sorted=vsd.wg[order(allkME[,modcol],decreasing=T),]
# selection top N names genes, attaching gene names
gnames=c();counts=0;hubs=c()
for(i in 1:length(sorted[,1])) {
if (row.names(sorted)[i] %in% gg[,1]) {
counts=counts+1
gn=gg[gg[,1]==row.names(sorted)[i],2]
gn=paste(gn,row.names(sorted)[i],sep=".")
if (gn %in% gnames) {
gn=paste(gn,counts,sep=".")
}
gnames=append(gnames,gn)
hubs=data.frame(rbind(hubs,sorted[i,]))
if (counts==top) {break}
}
}
row.names(hubs)=gnames
colnames(hubs)
categories <- c("Initial", "Treated", "Untreated")
# Extract and sort columns for each category
category_columns <- lapply(categories, function(cat) {
matching_columns <- grep(cat, names(hubs), value = TRUE)
hubs[, matching_columns, drop = FALSE]
})
# Bind the columns back together in the desired order
reordered_df <- do.call(cbind, category_columns)
contrasting = colorRampPalette(rev(c("chocolate1","#FEE090","grey10", "cyan3","cyan")))(100)
#contrasting2 = colorRampPalette(rev(c("chocolate1","chocolate1","#FEE090","grey10", "cyan3","cyan")))(100)
#contrasting3 = colorRampPalette(rev(c("chocolate1","#FEE090","grey10", "cyan3","cyan","cyan")))(100)
#pdf(file="heatmap_top30_royalblue.pdf")
pheatmap(as.matrix(reordered_df),scale="row",col=contrasting,border_color=NA,treeheight_col=0,cex=0.9,cluster_rows = F, cluster_cols = F)
allkME =as.data.frame(signedKME(datt, MEs))
hubgenes <- chooseTopHubInEachModule(datt, moduleColors, omitColors = "grey",
power = 2,
type = "signed")
hubgenes <-data.frame(hubgenes)
hubgenes <- tibble::rownames_to_column(hubgenes, "module")
hubgenes
hubgenes %>%
rename("gene" =
hubgenes) %>%
left_join(read.table(file = "bioinformatics/Pclivosa_iso2geneName.tab",
sep = "\t",
quote="", fill=FALSE) %>%
mutate(gene = V1,
annot = V2) %>%
dplyr::select(-V1, -V2), by = "gene") -> hubgenes
write.csv(hubgenes, file="hubgenes.csv")
