qqnorm(resid(AcerCBASS_GLMM_Colony))
qqline(resid(AcerCBASS_GLMM_Colony))
boxplot(resid(AcerCBASS_GLMM_Colony)~Acer_ipam_CBASS$Treatment)
boxplot(resid(AcerCBASS_GLMM_Colony)~Acer_ipam_CBASS$CBASS_temp)
boxplot(resid(AcerCBASS_GLMM_Colony)~Acer_ipam_CBASS$Colony)
#model 3 = Treatment*Date + (1|Tank)
Acer_CBASS_GLMM_Tank <- glmmTMB::glmmTMB(fvfm ~ Treatment*CBASS_temp + (1|Tank), family=beta_family(link = "logit"), data=Acer_ipam_CBASS)
summary(Acer_CBASS_GLMM_Tank)
qqnorm(resid(Acer_CBASS_GLMM_Tank)) #looks great
qqline(resid(Acer_CBASS_GLMM_Tank))
boxplot(resid(Acer_CBASS_GLMM_Tank)~Acer_ipam_CBASS$Treatment)
boxplot(resid(Acer_CBASS_GLMM_Tank)~Acer_ipam_CBASS$CBASS_temp)
boxplot(resid(Acer_CBASS_GLMM_Tank)~Acer_ipam_CBASS$Tank)
lrt(AcerCBASS_GLMM_Colony, glmm_AcerCBASS_full)
lrt(Acer_CBASS_GLMM_Tank, glmm_AcerCBASS_full)
# GLMM Acer Full: AIC =  -428.5
# GLMM Acer Colony: AIC =  -430.5, LRT to full model p-value = 1
# GLMM Acer Tank: AIC =  -423.3, LRT to full model p-value = 0.007379927
#based on AIC and LRT p-values (lowest AIC is best, if p-value is significant that means there is a significant difference in the full model versus the reduced model) ...
#the model with just colony as a fixed effect is not significantly different than the full model. However, tank model is significantly different from full. If I'm interpreting this correctly, it means that the fixed effect of colony is not important to the model, but tank is important to the model. You don't want to have too many variables to try to explain variance.  But the AIC of the full model is better than the AIC of the tank model. I will move forward with the full model.
Anova(glmm_AcerCBASS_full, type = "II")
Acer_CBASS_emm <- emmeans(glmm_AcerCBASS_full, specs = ~ Treatment*CBASS_temp)
as.data.frame(pairs(Acer_CBASS_emm)) %>%
filter(p.value < 0.05)
ipam_tidy_data <- read.csv("ipam_tidy_data.csv")
library(tidyverse)
library(plotrix)
library(glmmTMB)
library(emmeans)
library(lme4)
library(ggpubr)
library(drc) #for the function "drm" dose-response model
library(broom) #for the tidy function needed for dose response model
ipam_tidy_data %>%
dplyr::filter(!Treatment_period == "CBASS") %>%
drop_na(Colony) %>% #this is because there are some corals that never matched up to IPAM values so they're just NA
dplyr::select(Date, Colony, Puck, Tank, fvfm, Treatment, Species) %>%
dplyr::filter(fvfm < 0.75) %>% #filter out the outliers, 0.75 was set in Cunning et al 2021
dplyr::filter(Date <= "2022-04-20") %>% #pre-CBASS time points
pivot_wider(names_from = Date, values_from = fvfm) %>%
mutate(normalized_fvfm = case_when(Species == "Acervicornis" ~ `2022-04-20`/`2022-03-16`,
Species == "Pclivosa" ~ `2022-04-20`/`2022-03-21`)) %>%
select(Colony:Species, normalized_fvfm) -> ipam_normalized_data
ipam_tidy_data %>%
dplyr::filter(!Treatment_period == "CBASS") %>%
drop_na(Colony) %>% #this is because there are some corals that never matched up to IPAM values so they're just NA
dplyr::select(Date, Colony, Puck, Tank, fvfm, Treatment, Species) %>%
dplyr::filter(fvfm < 0.75) %>% #filter out the outliers, 0.75 was set in Cunning et al 2021
dplyr::filter(Date <= "2022-04-20") %>% #pre-CBASS time points
pivot_wider(names_from = Date, values_from = fvfm) %>%
mutate(normalized_fvfm = case_when(Species == "Acervicornis" ~ `2022-04-20`/`2022-03-16`,
Species == "Pclivosa" ~ `2022-04-20`/`2022-03-21`)) %>%
dplyr::select(Colony:Species, normalized_fvfm) -> ipam_normalized_data
ipam_tidy_data %>%
dplyr::filter(!Treatment_period == "CBASS") %>%
drop_na(Colony) %>% #this is because there are some corals that never matched up to IPAM values so they're just NA
dplyr::select(Date, Colony, Puck, Tank, fvfm, Treatment, Species) %>%
dplyr::filter(fvfm < 0.75) %>% #filter out the outliers, 0.75 was set in Cunning et al 2021
dplyr::filter(Date <= "2022-04-20") %>% #pre-CBASS time points
pivot_wider(names_from = Date, values_from = fvfm) %>%
mutate(normalized_fvfm_start = case_when(Species == "Acervicornis" ~ `2022-03-16`/`2022-03-16`,
Species == "Pclivosa" ~ `2022-03-21`/`2022-03-21`)) %>%
mutate(normalized_fvfm_end = case_when(Species == "Acervicornis" ~ `2022-04-20`/`2022-03-16`,
Species == "Pclivosa" ~ `2022-04-20`/`2022-03-21`)) %>%
pivot_longer(normalized_fvfm_start:normalized_fvfm_end, names_to = "fvfm_timepoint", values_to = "normalized_fvfm") %>%
mutate(numDays = case_when(fvfm_timepoint == "normalized_fvfm_start" ~ 0,
Species == "Pclivosa" & fvfm_timepoint == "normalized_fvfm_end" ~ 30,
Species == "Acervicornis" & fvfm_timepoint == "normalized_fvfm_end" ~ 35)) %>%
drop_na(normalized_fvfm) %>%
dplyr::group_by(Treatment, Colony, Species, numDays) %>%
mutate(mean_fvfm = mean(normalized_fvfm)) %>%
mutate(stderr_fvfm = std.error(normalized_fvfm)) %>%
ggplot(., aes(x=numDays, y=mean_fvfm, color = Colony, lty = Treatment)) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = mean_fvfm - stderr_fvfm, ymax = mean_fvfm + stderr_fvfm), width =.5) +
theme_classic() +
facet_wrap(~Species) +
theme_classic() + labs(y = "Fv/Fm") +
labs(x= "Days in Treatment", y = "Normalized Fv/Fm")
## Model comparison function (from Dr. Kevin Wong: https://github.com/kevinhwong1/Thermal_Transplant_2017-2018/blob/master/scripts/Larval_2018_Statistics.R)
#two *nested* models as input, in this case obj1 is the model without the predictor variable and obj2 is the model with the predictor variable
lrt <- function (obj1, obj2) {
L0 <- logLik(obj1)
L1 <- logLik(obj2)
L01 <- as.vector(- 2 * (L0 - L1))
df <- attr(L1, "df") - attr(L0, "df")
list(L01 = L01, df = df,
"p-value" = pchisq(L01, df, lower.tail = FALSE))
}
ipam_normalized_data %>%
filter(Species == "Acervicornis") %>%
drop_na() -> ipam_data_28d_Acer
#model 1 = full model Treatment*time_point + (1|Colony) + (1|Tank)
glmm_Acer_full <- glmmTMB(normalized_fvfm ~ Treatment + (1|Colony) + (1|Tank), family=beta_family(link = "logit"), data=ipam_data_28d_Acer)
summary(glmm_Acer_full)
qqnorm(resid(glmm_Acer_full))
qqline(resid(glmm_Acer_full))
boxplot(resid(glmm_Acer_full)~ipam_data_28d_Acer$Treatment)
boxplot(resid(glmm_Acer_full)~ipam_data_28d_Acer$Colony)
boxplot(resid(glmm_Acer_full)~ipam_data_28d_Acer$Tank)
#model 2 = Treatment*time_point + (1|Colony)
Acer_fvfm_GLMM_Colony <- glmmTMB::glmmTMB(normalized_fvfm ~ Treatment + (1|Colony), family=beta_family(link = "logit"), data=ipam_data_28d_Acer)
summary(Acer_fvfm_GLMM_Colony)
#need to check normality and variance visually (boxplots of fixed effects only)
qqnorm(resid(Acer_fvfm_GLMM_Colony))
qqline(resid(Acer_fvfm_GLMM_Colony))
boxplot(resid(Acer_fvfm_GLMM_Colony)~ipam_data_28d_Acer$Treatment)
boxplot(resid(Acer_fvfm_GLMM_Colony)~ipam_data_28d_Acer$Colony)
#model 3 = Treatment*Date + (1|Tank)
Acer_fvfm_GLMM_Tank <- glmmTMB::glmmTMB(normalized_fvfm ~ Treatment + (1|Tank), family=beta_family(link = "logit"), data=ipam_data_28d_Acer)
summary(Acer_fvfm_GLMM_Tank)
qqnorm(resid(Acer_fvfm_GLMM_Tank)) #looks great
qqline(resid(Acer_fvfm_GLMM_Tank))
boxplot(resid(Acer_fvfm_GLMM_Tank)~ipam_data_28d_Acer$Treatment)
boxplot(resid(Acer_fvfm_GLMM_Tank)~ipam_data_28d_Acer$Tank)
lrt(Acer_fvfm_GLMM_Colony, glmm_Acer_full)
lrt(Acer_fvfm_GLMM_Tank, glmm_Acer_full)
# GLMM Acer Full: AIC =  -366.2
# GLMM Acer Colony: AIC =  -335.9, LRT to full model p-value = 1.345583e-08
# GLMM Acer Tank: AIC =  -358.2, LRT to full model p-value = 0.001634789
#based on AIC and LRT p-values (lowest AIC is best, if p-value is significant that means there is a significant difference in the full model versus the reduced model), the full model is the best model.
ipam_tidy_data %>%
dplyr::filter(Treatment_period == "CBASS") %>%
dplyr::select(!Treatment) -> ipam_tidy_CBASS
ipam_tidy_data %>%
dplyr::filter(!Treatment_period == "CBASS") %>%
dplyr::select(Puck, Colony, Treatment, Species) %>%
distinct() %>% #283 rows = one coral ID per treatment, no repeats
full_join(ipam_tidy_CBASS, by = c("Puck", "Colony", "Species")) %>%
drop_na() %>%
select(Puck:Species, fvfm, Tank:CBASS_temp) -> ipam_tidy_CBASS_treatments
ipam_tidy_data %>%
dplyr::filter(Treatment_period == "CBASS") %>%
dplyr::select(!Treatment) -> ipam_tidy_CBASS
ipam_tidy_data %>%
dplyr::filter(!Treatment_period == "CBASS") %>%
dplyr::select(Puck, Colony, Treatment, Species) %>%
distinct() %>% #283 rows = one coral ID per treatment, no repeats
full_join(ipam_tidy_CBASS, by = c("Puck", "Colony", "Species")) %>%
drop_na() %>%
dplyr::select(Puck:Species, fvfm, Tank:CBASS_temp) -> ipam_tidy_CBASS_treatments
ipam_tidy_CBASS_treatments %>%
ggplot(., aes(x=CBASS_temp, y= fvfm, fill = Treatment)) +
scale_fill_manual(labels=c("Control", "Variable"), values = c( "#60DBDB", "#F54A34")) +
geom_boxplot() +
facet_wrap(~Species) +
theme_classic()
ipam_tidy_CBASS_treatments %>%
mutate(CBASS_temp = as.factor(CBASS_temp)) %>%
ggplot(., aes(x=CBASS_temp, y= fvfm, fill = Treatment)) +
scale_fill_manual(labels=c("Control", "Variable"), values = c( "#60DBDB", "#F54A34")) +
geom_boxplot() +
facet_wrap(~Species) +
theme_classic()
ipam_tidy_CBASS_treatments %>%
dplyr::filter(fvfm < 0.75 & fvfm > 0.001) %>% #has to be in between 0 and 1
dplyr::filter(Species  == "Acervicornis") %>%
mutate(CBASS_temp=as.factor(CBASS_temp)) -> Acer_ipam_CBASS
#model 1 = full model Treatment*time_point + (1|Colony) + (1|Tank)
glmm_AcerCBASS_full <- glmmTMB(fvfm ~ Treatment*CBASS_temp + (1|Colony) + (1|Tank), family=beta_family(link = "logit"), data=Acer_ipam_CBASS)
summary(glmm_AcerCBASS_full)
qqnorm(resid(glmm_AcerCBASS_full))
qqline(resid(glmm_AcerCBASS_full))
boxplot(resid(glmm_AcerCBASS_full)~Acer_ipam_CBASS$Treatment)
boxplot(resid(glmm_AcerCBASS_full)~Acer_ipam_CBASS$CBASS_temp)
boxplot(resid(glmm_AcerCBASS_full)~Acer_ipam_CBASS$Colony)
boxplot(resid(glmm_AcerCBASS_full)~Acer_ipam_CBASS$Tank)
#model 2 = Treatment*time_point + (1|Colony)
AcerCBASS_GLMM_Colony <- glmmTMB::glmmTMB(fvfm ~ Treatment*CBASS_temp + (1|Colony), family=beta_family(link = "logit"), data=Acer_ipam_CBASS)
summary(AcerCBASS_GLMM_Colony)
#need to check normality and variance visually (boxplots of fixed effects only)
qqnorm(resid(AcerCBASS_GLMM_Colony))
qqline(resid(AcerCBASS_GLMM_Colony))
boxplot(resid(AcerCBASS_GLMM_Colony)~Acer_ipam_CBASS$Treatment)
boxplot(resid(AcerCBASS_GLMM_Colony)~Acer_ipam_CBASS$CBASS_temp)
boxplot(resid(AcerCBASS_GLMM_Colony)~Acer_ipam_CBASS$Colony)
#model 3 = Treatment*Date + (1|Tank)
Acer_CBASS_GLMM_Tank <- glmmTMB::glmmTMB(fvfm ~ Treatment*CBASS_temp + (1|Tank), family=beta_family(link = "logit"), data=Acer_ipam_CBASS)
summary(Acer_CBASS_GLMM_Tank)
qqnorm(resid(Acer_CBASS_GLMM_Tank)) #looks great
qqline(resid(Acer_CBASS_GLMM_Tank))
boxplot(resid(Acer_CBASS_GLMM_Tank)~Acer_ipam_CBASS$Treatment)
boxplot(resid(Acer_CBASS_GLMM_Tank)~Acer_ipam_CBASS$CBASS_temp)
boxplot(resid(Acer_CBASS_GLMM_Tank)~Acer_ipam_CBASS$Tank)
lrt(AcerCBASS_GLMM_Colony, glmm_AcerCBASS_full)
lrt(Acer_CBASS_GLMM_Tank, glmm_AcerCBASS_full)
# GLMM Acer Full: AIC =  -428.5
# GLMM Acer Colony: AIC =  -430.5, LRT to full model p-value = 1
# GLMM Acer Tank: AIC =  -423.3, LRT to full model p-value = 0.007379927
#based on AIC and LRT p-values (lowest AIC is best, if p-value is significant that means there is a significant difference in the full model versus the reduced model) ...
#the model with just colony as a fixed effect is not significantly different than the full model. However, tank model is significantly different from full. If I'm interpreting this correctly, it means that the fixed effect of colony is not important to the model, but tank is important to the model. You don't want to have too many variables to try to explain variance.  But the AIC of the full model is better than the AIC of the tank model. I will move forward with the full model.
Anova(glmm_AcerCBASS_full, type = "II")
library(car)
Anova(glmm_AcerCBASS_full, type = "II")
Acer_CBASS_emm <- emmeans(glmm_AcerCBASS_full, specs = ~ Treatment*CBASS_temp)
as.data.frame(pairs(Acer_CBASS_emm)) %>%
filter(p.value < 0.05)
Anova(glmm_AcerCBASS_full, type = "II")
ipam_CBASS_normalized %>%
filter(Species == "Acervicornis") -> Acer_ipam_CBASS
ipam_tidy_data %>%
filter(Date < "2022-03-22") %>%
select(fvfm, Puck, Colony, Date, Treatment,Species) %>%
mutate(fvfm_T0 = fvfm) %>%
select(!fvfm) -> preCBASSfvfm
ipam_tidy_data %>%
filter(Date < "2022-03-22") %>%
dplyr::select(fvfm, Puck, Colony, Date, Treatment,Species) %>%
mutate(fvfm_T0 = fvfm) %>%
dplyr::select(!fvfm) -> preCBASSfvfm
ipam_tidy_data %>%
dplyr::filter(Treatment_period == "CBASS") %>%
dplyr::select(fvfm, Puck:Date, CBASS_temp, Species) %>%
mutate(fvfm_T1 = fvfm) %>%
dplyr::select(!fvfm) %>%
left_join(preCBASSfvfm, by = c("Puck", "Colony", "Species")) %>%
dplyr::select(!Date.x) %>%
dplyr::select(!Date.y) %>%
filter(fvfm_T0 < 0.75) %>% #there were some weird outliers where the fvfm = 2.00
filter(fvfm_T1 < 0.75) %>%
mutate(CBASS_normalize_fvfm = fvfm_T1/fvfm_T0) %>%
filter(CBASS_normalize_fvfm > 0) %>%
filter(CBASS_normalize_fvfm < 1) -> ipam_CBASS_normalized
ggplot(ipam_CBASS_normalized, aes(x=CBASS_temp, y = CBASS_normalize_fvfm, fill=Treatment)) +
geom_boxplot() +
facet_wrap(~Species) +
scale_fill_manual(labels=c("Control", "Variable"), values = c( "#60DBDB", "#F54A34")) +
theme_classic()
ggplot(ipam_CBASS_normalized, aes(x=as.factor(CBASS_temp), y = CBASS_normalize_fvfm, fill=Treatment)) +
geom_boxplot() +
facet_wrap(~Species) +
scale_fill_manual(labels=c("Control", "Variable"), values = c( "#60DBDB", "#F54A34")) +
theme_classic()
ipam_CBASS_normalized %>%
filter(Species == "Acervicornis") -> Acer_ipam_CBASS
#model 1 = full model
glmm_AcerCBASS_full <- glmmTMB(CBASS_normalize_fvfm ~ Treatment*CBASS_temp + (1|Colony), family=beta_family(link = "logit"), data=Acer_ipam_CBASS)
summary(glmm_AcerCBASS_full)
qqnorm(resid(glmm_AcerCBASS_full))
qqline(resid(glmm_AcerCBASS_full))
boxplot(resid(glmm_AcerCBASS_full)~Acer_ipam_CBASS$Treatment)
boxplot(resid(glmm_AcerCBASS_full)~Acer_ipam_CBASS$CBASS_temp)
boxplot(resid(glmm_AcerCBASS_full)~Acer_ipam_CBASS$Colony)
#model 2
AcerCBASS_GLMM <- glmmTMB::glmmTMB(CBASS_normalize_fvfm ~ Treatment*CBASS_temp, family=beta_family(link = "logit"), data=Acer_ipam_CBASS)
summary(AcerCBASS_GLMM)
#need to check normality and variance visually (boxplots of fixed effects only)
qqnorm(resid(AcerCBASS_GLMM))
qqline(resid(AcerCBASS_GLMM))
boxplot(resid(AcerCBASS_GLMM)~Acer_ipam_CBASS$Treatment)
boxplot(resid(AcerCBASS_GLMM)~Acer_ipam_CBASS$CBASS_temp)
lrt(AcerCBASS_GLMM, glmm_AcerCBASS_full)
lrt(Acer_CBASS_GLMM_Tank, glmm_AcerCBASS_full)
# GLMM Acer Full: AIC =  -323.6
# GLMM Acer no Colony: AIC =  -324.1
# no colony is better based on AIC, and lrt p-value is not significant
Anova(AcerCBASS_GLMM, type = "II")
lrt(AcerCBASS_GLMM, glmm_AcerCBASS_full)
lrt(Acer_CBASS_GLMM_Tank, glmm_AcerCBASS_full)
ipam_CBASS_normalized %>%
filter(Species == "Acervicornis") -> Acer_ipam_CBASS
Acer_ipam_CBASS
ipam_tidy_data %>%
dplyr::filter(Treatment_period == "CBASS") %>%
dplyr::select(fvfm, Puck:Date, CBASS_temp, Species) %>%
mutate(fvfm_T1 = fvfm) %>%
dplyr::select(!fvfm) %>%
left_join(preCBASSfvfm, by = c("Puck", "Colony", "Species")) %>%
dplyr::select(!Date.x) %>%
dplyr::select(!Date.y) %>%
filter(fvfm_T0 < 0.75) %>% #there were some weird outliers where the fvfm = 2.00
filter(fvfm_T1 < 0.75) %>%
mutate(CBASS_normalize_fvfm = fvfm_T1/fvfm_T0) %>%
filter(CBASS_normalize_fvfm > 0) %>%
filter(CBASS_normalize_fvfm < 1) %>%
mutate(CBASS_normalize_fvfm = as.factor(CBASS_normalize_fvfm))-> ipam_CBASS_normalized
ipam_CBASS_normalized %>%
mutate(CBASS_temp=as.numeric(CBASS_temp)) %>%
ggplot(., aes(x=CBASS_temp, y = CBASS_normalize_fvfm, color = Treatment)) +
geom_point() +
scale_color_manual(labels=c("Control", "Variable"), values = c( "#60DBDB", "#F54A34")) +
geom_smooth(formula = y ~ x, method = "loess", span = 0.9)  +
facet_wrap(~Species) +
theme_classic() +
labs(x="Temperature (ºC)", y = "Normalized Fv/Fm")
ipam_tidy_data %>%
dplyr::filter(Treatment_period == "CBASS") %>%
dplyr::select(fvfm, Puck:Date, CBASS_temp, Species) %>%
mutate(fvfm_T1 = fvfm) %>%
dplyr::select(!fvfm) %>%
left_join(preCBASSfvfm, by = c("Puck", "Colony", "Species")) %>%
dplyr::select(!Date.x) %>%
dplyr::select(!Date.y) %>%
filter(fvfm_T0 < 0.75) %>% #there were some weird outliers where the fvfm = 2.00
filter(fvfm_T1 < 0.75) %>%
mutate(CBASS_normalize_fvfm = fvfm_T1/fvfm_T0) %>%
filter(CBASS_normalize_fvfm > 0) %>%
filter(CBASS_normalize_fvfm < 1) %>%
mutate(CBASS_temp = as.factor(CBASS_temp))-> ipam_CBASS_normalized
ggplot(ipam_CBASS_normalized, aes(x=CBASS_temp, y = CBASS_normalize_fvfm, fill=Treatment)) +
geom_boxplot() +
facet_wrap(~Species) +
scale_fill_manual(labels=c("Control", "Variable"), values = c( "#60DBDB", "#F54A34")) +
theme_classic()
ipam_CBASS_normalized %>%
mutate(CBASS_temp=as.numeric(CBASS_temp)) %>%
ggplot(., aes(x=CBASS_temp, y = CBASS_normalize_fvfm, color = Treatment)) +
geom_point() +
scale_color_manual(labels=c("Control", "Variable"), values = c( "#60DBDB", "#F54A34")) +
geom_smooth(formula = y ~ x, method = "loess", span = 0.9)  +
facet_wrap(~Species) +
theme_classic() +
labs(x="Temperature (ºC)", y = "Normalized Fv/Fm")
ipam_CBASS_normalized %>%
filter(Species == "Acervicornis") -> Acer_ipam_CBASS
#model 1 = full model
glmm_AcerCBASS_full <- glmmTMB(CBASS_normalize_fvfm ~ Treatment*CBASS_temp + (1|Colony), family=beta_family(link = "logit"), data=Acer_ipam_CBASS)
summary(glmm_AcerCBASS_full)
qqnorm(resid(glmm_AcerCBASS_full))
qqline(resid(glmm_AcerCBASS_full))
boxplot(resid(glmm_AcerCBASS_full)~Acer_ipam_CBASS$Treatment)
boxplot(resid(glmm_AcerCBASS_full)~Acer_ipam_CBASS$CBASS_temp)
boxplot(resid(glmm_AcerCBASS_full)~Acer_ipam_CBASS$Colony)
#model 2
AcerCBASS_GLMM <- glmmTMB::glmmTMB(CBASS_normalize_fvfm ~ Treatment*CBASS_temp, family=beta_family(link = "logit"), data=Acer_ipam_CBASS)
summary(AcerCBASS_GLMM)
#need to check normality and variance visually (boxplots of fixed effects only)
qqnorm(resid(AcerCBASS_GLMM))
qqline(resid(AcerCBASS_GLMM))
boxplot(resid(AcerCBASS_GLMM)~Acer_ipam_CBASS$Treatment)
boxplot(resid(AcerCBASS_GLMM)~Acer_ipam_CBASS$CBASS_temp)
lrt(AcerCBASS_GLMM, glmm_AcerCBASS_full)
lrt(Acer_CBASS_GLMM_Tank, glmm_AcerCBASS_full)
# GLMM Acer Full: AIC =  -323.6
# GLMM Acer no Colony: AIC =  -324.1
# no colony is better based on AIC, and lrt p-value is not significant
lrt(AcerCBASS_GLMM, glmm_AcerCBASS_full)
lrt(Acer_CBASS_GLMM_Tank, glmm_AcerCBASS_full)
lrt(AcerCBASS_GLMM, glmm_AcerCBASS_full)
lrt(Acer_CBASS_GLMM_Tank, glmm_AcerCBASS_full)
summary(AcerCBASS_GLMM)
summary(glmm_AcerCBASS_full)
Anova(AcerCBASS_GLMM, type = "II")
ipam_CBASS_normalized %>%
filter(Species == "Pclivosa") -> Pcli_ipam_CBASS
#model 1 = full model
glmm_PcliCBASS_full <- glmmTMB(CBASS_normalize_fvfm ~ Treatment*CBASS_temp + (1|Colony), family=beta_family(link = "logit"), data=Pcli_ipam_CBASS)
summary(glmm_PcliCBASS_full)
qqnorm(resid(glmm_PcliCBASS_full))
qqline(resid(glmm_PcliCBASS_full))
boxplot(resid(glmm_PcliCBASS_full)~Pcli_ipam_CBASS$Treatment)
boxplot(resid(glmm_PcliCBASS_full)~Pcli_ipam_CBASS$CBASS_temp)
boxplot(resid(glmm_PcliCBASS_full)~Pcli_ipam_CBASS$Colony)
#model 2
PcliCBASS_GLMM <- glmmTMB::glmmTMB(CBASS_normalize_fvfm ~ Treatment*CBASS_temp, family=beta_family(link = "logit"), data=Pcli_ipam_CBASS)
summary(PcliCBASS_GLMM)
#need to check normality and variance visually (boxplots of fixed effects only)
qqnorm(resid(PcliCBASS_GLMM))
qqline(resid(PcliCBASS_GLMM))
boxplot(resid(PcliCBASS_GLMM)~Pcli_ipam_CBASS$Treatment)
boxplot(resid(PcliCBASS_GLMM)~Pcli_ipam_CBASS$CBASS_temp)
lrt(PcliCBASS_GLMM, glmm_PcliCBASS_full)
# GLMM Pcli Full: AIC =  -355.8
# GLMM Pcli no Colony: AIC =  -344.3  , LRT p-value = 0.0002403821
# full model is better based on AIC and p-value
lrt(PcliCBASS_GLMM, glmm_PcliCBASS_full)
Anova(glmm_PcliCBASS_full, type = "II")
library(DESeq2)
library(tidyverse)
library(factoextra)
load("RData_files/initial_fullddsdesigncountsVsdcountsWGCNA.RData")
pca <- prcomp(t(assay(Vsd)))
summary(pca)
fviz_eig(pca)
plotPCA(Vsd, intgroup = c("Treatment"))
plotPCA(Vsd, intgroup = c("Genotype"))
plotPCA(Vsd, intgroup = c("time_point"))
plotPCA(Vsd, intgroup = c("Treatment", "Genotype", "time_point"))
vst_PCAdata <- plotPCA(Vsd, intgroup = c("Treatment", "Genotype", "time_point"), returnData = TRUE)
percentVar <- round(100*attr(vst_PCAdata, "percentVar"))
ggplot(vst_PCAdata, aes(PC1, PC2, color=Treatment, shape=Genotype)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("P. clivosa") +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) +
stat_ellipse(aes(PC1, PC2, group=time_point, lty = time_point), type = "norm")
plotPCA(Vsd, intgroup = c("Treatment","time_point"))
vst_nogeno_PCAdata <- plotPCA(Vsd, intgroup = c("Treatment","time_point"), returnData = TRUE)
percentVar <- round(100*attr(vst_nogeno_PCAdata, "percentVar"))
ggplot(vst_nogeno_PCAdata, aes(PC1, PC2, color=group, shape=Treatment)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("A. cervicornis") +
theme_bw() +
stat_ellipse(aes(PC1, PC2, group=group, lty = time_point), type = "norm") +
scale_color_manual(values = c("#00CCCC","#33CCCC", "#FF6633", "#FF3333"))
ggplot(vst_nogeno_PCAdata, aes(PC1, PC2, color=group, shape=Treatment)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("P. clivosa,") +
theme_bw() +
stat_ellipse(aes(PC1, PC2, group=group, lty = time_point), type = "norm") +
scale_color_manual(values = c("#00CCCC","#33CCCC", "#FF6633", "#FF3333"))
ggplot(vst_nogeno_PCAdata, aes(PC1, PC2, color=group, shape=Treatment)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("P. clivosa") +
theme_bw() +
stat_ellipse(aes(PC1, PC2, group=group, lty = time_point), type = "norm") +
scale_color_manual(values = c("#00CCCC","#33CCCC", "#FF6633", "#FF3333"))
ggplot(vst_nogeno_PCAdata, aes(PC1, PC2, color=group)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("P. clivosa") +
theme_bw() +
scale_color_manual(values = c("#00CCCC","#33CCCC", "#FF6633", "#FF3333"))
ggplot(vst_nogeno_PCAdata, aes(PC1, PC2, color=group, shape=Treatment)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("P. clivosa") +
theme_bw() +
stat_ellipse(aes(PC1, PC2, group=group, lty = time_point), type = "norm") +
scale_color_manual(values = c("#00CCCC","#33CCCC", "#FF6633", "#FF3333"))
library(WGCNA)
library(flashClust)
library(ape)
options(stringsAsFactors=FALSE)
allowWGCNAThreads()
load("wgcnaData.RData")
setwd("~/Library/CloudStorage/OneDrive-UniversityofMiami/GitHub/Ch2_temperaturevariability2023/gene_expression/MS_bioinformatics/Acer_Rmd/GO-MWU")
source("gomwu.functions.R")
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goAnnotations="Acervicornis_iso2go.tab"
input="control0_control29_lpv.csv" # two columns of comma-separated values: gene id, continuous measure of significance.
pdf("control0_control29_lpv_MF_0.05_plot.pdf")
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
# absValue=1,
#absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
# level1=0.1,
level1=0.05,
# level2=0.1, # FDR cutoff to print in regular (not italic) font.
# level2=0.05,
level2=0.01,
# level3=0.05, # FDR cutoff to print in large bold font.
# level3=0.01,
level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
goDivision="MF" # either MF, or BP, or CC
pdf("control0_control29_lpv_MF_0.05_plot.pdf")
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
# absValue=1,
#absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
# level1=0.1,
level1=0.05,
# level2=0.1, # FDR cutoff to print in regular (not italic) font.
# level2=0.05,
level2=0.01,
# level3=0.05, # FDR cutoff to print in large bold font.
# level3=0.01,
level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
# absValue=1,
#absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
# level1=0.1,
level1=0.05,
# level2=0.1, # FDR cutoff to print in regular (not italic) font.
# level2=0.05,
level2=0.01,
# level3=0.05, # FDR cutoff to print in large bold font.
# level3=0.01,
level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# importing data generated from DESeq2 script
lnames=load("RData_files/data4wgcna.RData")
