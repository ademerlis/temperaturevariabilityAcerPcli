dev.off()
dev.off()
pheatmap(hubs,scale="row",col=contrasting,border_color=NA,treeheight_col=0,cex=0.9,cluster_rows=F,cluster_cols=F)
View(allkME)
library(ComplexHeatmap)
allkME[modcol,]
allkME[modcol,]
modcol=paste("kME",which.module,sep="")
modcol
order(allkME[modcol,],decreasing=T)
allkME
head(sorted)
sorted
View(sorted)
allkME
allkME =signedKME(datt, MEs)
allkME
sorted=vsd.wg[order(allkME[modcol,],decreasing=T),] #Warning message:In xtfrm.data.frame(x) : cannot xtfrm data frames
allkME[modcol,]
vsd.wg[order(allkME[modcol,],decreasing=T),]
hubs
pheatmap(hubs,scale="row",col=contrasting,border_color=NA,treeheight_col=0,cex=0.9,cluster_within_group(Treatment))
pheatmap(as.matrix(hubs),scale="row",col=contrasting,border_color=NA,treeheight_col=0,cex=0.9,cluster_within_group(Treatment))
sorted=vsd.wg[order(allkME[,modcol],decreasing=T),] #Warning message:In xtfrm.data.frame(x) : cannot xtfrm data frames
top=30 # number of named top-kME genes to plot
datME=MEs
datExpr=datt
modcol=paste("kME",which.module,sep="")
sorted=vsd.wg[order(allkME[,modcol],decreasing=T),]
head(sorted)
# selection top N names genes, attaching gene names
gnames=c();counts=0;hubs=c()
for(i in 1:length(sorted[,1])) {
if (row.names(sorted)[i] %in% gg[,1]) {
counts=counts+1
gn=gg[gg[,1]==row.names(sorted)[i],2]
gn=paste(gn,row.names(sorted)[i],sep=".")
if (gn %in% gnames) {
gn=paste(gn,counts,sep=".")
}
gnames=append(gnames,gn)
hubs=data.frame(rbind(hubs,sorted[i,]))
if (counts==top) {break}
}
}
row.names(hubs)=gnames
pheatmap(as.matrix(hubs),scale="row",col=contrasting,border_color=NA,treeheight_col=0,cex=0.9,cluster_rows = F, cluster_cols = F)
detach("package:ComplexHeatmap", unload = TRUE)
pheatmap(as.matrix(hubs),scale="row",col=contrasting,border_color=NA,treeheight_col=0,cex=0.9,cluster_rows = F, cluster_cols = F)
datExpr
View(datt)
# heatmap and hierarchical clustering:
load("~/OneDrive - University of Miami/GitHub/Ch2_temperaturevariability2023/gene_expression/MS_bioinformatics/Acer_Rmd/RData_files/vsd.RData")
pheatmap(cor(vsd))
colnames(vsd)
head(vsd)
pheatmap(as.matrix(hubs),scale="row",col=contrasting,border_color=NA,treeheight_col=0,cex=0.9,cluster_rows = F, cluster_cols = F)
row.names(hubs)=gnames
View(hubs)
colnames(hubs)
search_strings <- c("variable", "control", "SI_C", "MB_B", "BC_8b", "Day_0", "Day_29")
matching_columns <- grep(paste(search_strings, collapse = "|"), names(hubs), value = TRUE)
matching_columns
search_strings <- c("variable", "control")
matching_columns <- grep(paste(search_strings, collapse = "|"), names(hubs), value = TRUE)
# Reorder columns based on matching column names
reordered_df <- hubs %>%
select(all_of(matching_columns))
reordered_df
View(reordered_df)
matching_columns
categories <- c("variable", "control")
sorted_columns <- names(hubs)[order(sapply(categories, function(cat) grepl(cat, names(hubs))))]
sorted_columns
reordered_df <- hubs %>%
select(all_of(sorted_columns))
reordered_df <- hubs %>%
dplyr::select(all_of(sorted_columns))
category_columns <- lapply(categories, function(cat) {
matching_columns <- grep(cat, names(hubs), value = TRUE)
hubs[, matching_columns, drop = FALSE]
})
# Bind the columns back together in the desired order
reordered_df <- do.call(cbind, category_columns)
reordered_df
View(reordered_df)
categories <- c("control_Day_0", "variable_Day_0", "control_Day_29", "variable_Day_29")
category_columns <- lapply(categories, function(cat) {
matching_columns <- grep(cat, names(hubs), value = TRUE)
hubs[, matching_columns, drop = FALSE]
})
# Bind the columns back together in the desired order
reordered_df <- do.call(cbind, category_columns)
View(reordered_df)
categories <- c("SI_C.control_Day_0", "MB_B.control_Day_0", "BC_8b.control_Day_0", "SI_C.variable_Day_0", "MB_B.variable_Day_0",
"BC_8b.variable_Day_0", "SI_C.control_Day_29", "MB_B.control_Day_29", "BC_8b.control_Day_29", "SI_C.variable_Day_29",
"MB_B.variable_Day_29", "BC_8b.variable_Day_29")
# Extract and sort columns for each category
category_columns <- lapply(categories, function(cat) {
matching_columns <- grep(cat, names(hubs), value = TRUE)
hubs[, matching_columns, drop = FALSE]
})
# Bind the columns back together in the desired order
reordered_df <- do.call(cbind, category_columns)
reordered_df
pheatmap(as.matrix(reordered_df),scale="row",col=contrasting,border_color=NA,treeheight_col=0,cex=0.9,cluster_rows = F, cluster_cols = F)
pdf(file="heatmap_top30_turquoise.pdf")
pheatmap(as.matrix(reordered_df),scale="row",col=contrasting,border_color=NA,treeheight_col=0,cex=0.9,cluster_rows = F, cluster_cols = F)
dev.off()
dev.off()
dev.off()
pdf(file="heatmap_top30_turquoise.pdf")
pheatmap(as.matrix(reordered_df),scale="row",col=contrasting,border_color=NA,treeheight_col=0,cex=0.9,cluster_rows = F, cluster_cols = F)
pheatmap(as.matrix(reordered_df),scale="row",col=contrasting,border_color=NA,treeheight_col=0,cex=0.9,cluster_rows = F, cluster_cols = F)
dev.off()
dev.off()
pheatmap(as.matrix(reordered_df),scale="row",col=contrasting,border_color=NA,treeheight_col=0,cex=0.9,cluster_rows = F, cluster_cols = F)
#which.module="turquoise"
which.module="darkturquoise"
datME=MEs
datExpr=datt
modcol=paste("kME",which.module,sep="")
sorted=vsd.wg[order(allkME[,modcol],decreasing=T),]
# selection top N names genes, attaching gene names
gnames=c();counts=0;hubs=c()
for(i in 1:length(sorted[,1])) {
if (row.names(sorted)[i] %in% gg[,1]) {
counts=counts+1
gn=gg[gg[,1]==row.names(sorted)[i],2]
gn=paste(gn,row.names(sorted)[i],sep=".")
if (gn %in% gnames) {
gn=paste(gn,counts,sep=".")
}
gnames=append(gnames,gn)
hubs=data.frame(rbind(hubs,sorted[i,]))
if (counts==top) {break}
}
}
row.names(hubs)=gnames
colnames(hubs)
categories <- c("SI_C.control_Day_0", "MB_B.control_Day_0", "BC_8b.control_Day_0", "SI_C.variable_Day_0", "MB_B.variable_Day_0",
"BC_8b.variable_Day_0", "SI_C.control_Day_29", "MB_B.control_Day_29", "BC_8b.control_Day_29", "SI_C.variable_Day_29",
"MB_B.variable_Day_29", "BC_8b.variable_Day_29")
# Extract and sort columns for each category
category_columns <- lapply(categories, function(cat) {
matching_columns <- grep(cat, names(hubs), value = TRUE)
hubs[, matching_columns, drop = FALSE]
})
# Bind the columns back together in the desired order
reordered_df <- do.call(cbind, category_columns)
reordered_df
View(reordered_df)
pheatmap(as.matrix(reordered_df),scale="row",col=contrasting,border_color=NA,treeheight_col=0,cex=0.9,cluster_rows = F, cluster_cols = F)
#which.module="turquoise"
#which.module="darkturquoise"
which.module="brown"
datME=MEs
datExpr=datt
modcol=paste("kME",which.module,sep="")
sorted=vsd.wg[order(allkME[,modcol],decreasing=T),]
# selection top N names genes, attaching gene names
gnames=c();counts=0;hubs=c()
for(i in 1:length(sorted[,1])) {
if (row.names(sorted)[i] %in% gg[,1]) {
counts=counts+1
gn=gg[gg[,1]==row.names(sorted)[i],2]
gn=paste(gn,row.names(sorted)[i],sep=".")
if (gn %in% gnames) {
gn=paste(gn,counts,sep=".")
}
gnames=append(gnames,gn)
hubs=data.frame(rbind(hubs,sorted[i,]))
if (counts==top) {break}
}
}
row.names(hubs)=gnames
colnames(hubs)
categories <- c("SI_C.control_Day_0", "MB_B.control_Day_0", "BC_8b.control_Day_0", "SI_C.variable_Day_0", "MB_B.variable_Day_0",
"BC_8b.variable_Day_0", "SI_C.control_Day_29", "MB_B.control_Day_29", "BC_8b.control_Day_29", "SI_C.variable_Day_29",
"MB_B.variable_Day_29", "BC_8b.variable_Day_29")
# Extract and sort columns for each category
category_columns <- lapply(categories, function(cat) {
matching_columns <- grep(cat, names(hubs), value = TRUE)
hubs[, matching_columns, drop = FALSE]
})
# Bind the columns back together in the desired order
reordered_df <- do.call(cbind, category_columns)
pheatmap(as.matrix(reordered_df),scale="row",col=contrasting,border_color=NA,treeheight_col=0,cex=0.9,cluster_rows = F, cluster_cols = F)
pheatmap(as.matrix(reordered_df),scale="row",col=contrasting,border_color=NA,treeheight_col=0,cex=0.9,cluster_rows = F, cluster_cols = F)
#which.module="turquoise"
#which.module="darkturquoise"
#which.module="brown"
which.module="blue"
datME=MEs
datExpr=datt
modcol=paste("kME",which.module,sep="")
sorted=vsd.wg[order(allkME[,modcol],decreasing=T),]
# selection top N names genes, attaching gene names
gnames=c();counts=0;hubs=c()
for(i in 1:length(sorted[,1])) {
if (row.names(sorted)[i] %in% gg[,1]) {
counts=counts+1
gn=gg[gg[,1]==row.names(sorted)[i],2]
gn=paste(gn,row.names(sorted)[i],sep=".")
if (gn %in% gnames) {
gn=paste(gn,counts,sep=".")
}
gnames=append(gnames,gn)
hubs=data.frame(rbind(hubs,sorted[i,]))
if (counts==top) {break}
}
}
row.names(hubs)=gnames
colnames(hubs)
categories <- c("SI_C.control_Day_0", "MB_B.control_Day_0", "BC_8b.control_Day_0", "SI_C.variable_Day_0", "MB_B.variable_Day_0",
"BC_8b.variable_Day_0", "SI_C.control_Day_29", "MB_B.control_Day_29", "BC_8b.control_Day_29", "SI_C.variable_Day_29",
"MB_B.variable_Day_29", "BC_8b.variable_Day_29")
# Extract and sort columns for each category
category_columns <- lapply(categories, function(cat) {
matching_columns <- grep(cat, names(hubs), value = TRUE)
hubs[, matching_columns, drop = FALSE]
})
# Bind the columns back together in the desired order
reordered_df <- do.call(cbind, category_columns)
pheatmap(as.matrix(reordered_df),scale="row",col=contrasting,border_color=NA,treeheight_col=0,cex=0.9,cluster_rows = F, cluster_cols = F)
#which.module="turquoise"
#which.module="darkturquoise"
#which.module="brown"
#which.module="blue"
which.module="darkorange"
datME=MEs
datExpr=datt
modcol=paste("kME",which.module,sep="")
sorted=vsd.wg[order(allkME[,modcol],decreasing=T),]
# selection top N names genes, attaching gene names
gnames=c();counts=0;hubs=c()
for(i in 1:length(sorted[,1])) {
if (row.names(sorted)[i] %in% gg[,1]) {
counts=counts+1
gn=gg[gg[,1]==row.names(sorted)[i],2]
gn=paste(gn,row.names(sorted)[i],sep=".")
if (gn %in% gnames) {
gn=paste(gn,counts,sep=".")
}
gnames=append(gnames,gn)
hubs=data.frame(rbind(hubs,sorted[i,]))
if (counts==top) {break}
}
}
row.names(hubs)=gnames
colnames(hubs)
categories <- c("SI_C.control_Day_0", "MB_B.control_Day_0", "BC_8b.control_Day_0", "SI_C.variable_Day_0", "MB_B.variable_Day_0",
"BC_8b.variable_Day_0", "SI_C.control_Day_29", "MB_B.control_Day_29", "BC_8b.control_Day_29", "SI_C.variable_Day_29",
"MB_B.variable_Day_29", "BC_8b.variable_Day_29")
# Extract and sort columns for each category
category_columns <- lapply(categories, function(cat) {
matching_columns <- grep(cat, names(hubs), value = TRUE)
hubs[, matching_columns, drop = FALSE]
})
# Bind the columns back together in the desired order
reordered_df <- do.call(cbind, category_columns)
pheatmap(as.matrix(reordered_df),scale="row",col=contrasting,border_color=NA,treeheight_col=0,cex=0.9,cluster_rows = F, cluster_cols = F)
#which.module="turquoise"
#which.module="darkturquoise"
#which.module="brown"
#which.module="blue"
#which.module="darkorange"
which.module="pink"
datME=MEs
datExpr=datt
modcol=paste("kME",which.module,sep="")
sorted=vsd.wg[order(allkME[,modcol],decreasing=T),]
# selection top N names genes, attaching gene names
gnames=c();counts=0;hubs=c()
for(i in 1:length(sorted[,1])) {
if (row.names(sorted)[i] %in% gg[,1]) {
counts=counts+1
gn=gg[gg[,1]==row.names(sorted)[i],2]
gn=paste(gn,row.names(sorted)[i],sep=".")
if (gn %in% gnames) {
gn=paste(gn,counts,sep=".")
}
gnames=append(gnames,gn)
hubs=data.frame(rbind(hubs,sorted[i,]))
if (counts==top) {break}
}
}
row.names(hubs)=gnames
colnames(hubs)
categories <- c("SI_C.control_Day_0", "MB_B.control_Day_0", "BC_8b.control_Day_0", "SI_C.variable_Day_0", "MB_B.variable_Day_0",
"BC_8b.variable_Day_0", "SI_C.control_Day_29", "MB_B.control_Day_29", "BC_8b.control_Day_29", "SI_C.variable_Day_29",
"MB_B.variable_Day_29", "BC_8b.variable_Day_29")
# Extract and sort columns for each category
category_columns <- lapply(categories, function(cat) {
matching_columns <- grep(cat, names(hubs), value = TRUE)
hubs[, matching_columns, drop = FALSE]
})
# Bind the columns back together in the desired order
reordered_df <- do.call(cbind, category_columns)
pheatmap(as.matrix(reordered_df),scale="row",col=contrasting,border_color=NA,treeheight_col=0,cex=0.9,cluster_rows = F, cluster_cols = F)
#which.module="turquoise"
#which.module="darkturquoise"
#which.module="brown"
#which.module="blue"
#which.module="darkorange"
#which.module="pink"
which.module="cyan"
datME=MEs
datExpr=datt
modcol=paste("kME",which.module,sep="")
sorted=vsd.wg[order(allkME[,modcol],decreasing=T),]
# selection top N names genes, attaching gene names
gnames=c();counts=0;hubs=c()
for(i in 1:length(sorted[,1])) {
if (row.names(sorted)[i] %in% gg[,1]) {
counts=counts+1
gn=gg[gg[,1]==row.names(sorted)[i],2]
gn=paste(gn,row.names(sorted)[i],sep=".")
if (gn %in% gnames) {
gn=paste(gn,counts,sep=".")
}
gnames=append(gnames,gn)
hubs=data.frame(rbind(hubs,sorted[i,]))
if (counts==top) {break}
}
}
row.names(hubs)=gnames
colnames(hubs)
categories <- c("SI_C.control_Day_0", "MB_B.control_Day_0", "BC_8b.control_Day_0", "SI_C.variable_Day_0", "MB_B.variable_Day_0",
"BC_8b.variable_Day_0", "SI_C.control_Day_29", "MB_B.control_Day_29", "BC_8b.control_Day_29", "SI_C.variable_Day_29",
"MB_B.variable_Day_29", "BC_8b.variable_Day_29")
# Extract and sort columns for each category
category_columns <- lapply(categories, function(cat) {
matching_columns <- grep(cat, names(hubs), value = TRUE)
hubs[, matching_columns, drop = FALSE]
})
# Bind the columns back together in the desired order
reordered_df <- do.call(cbind, category_columns)
pheatmap(as.matrix(reordered_df),scale="row",col=contrasting,border_color=NA,treeheight_col=0,cex=0.9,cluster_rows = F, cluster_cols = F)
#which.module="turquoise"
#which.module="darkturquoise"
#which.module="brown"
#which.module="blue"
#which.module="darkorange"
#which.module="pink"
#which.module="cyan"
which.module="grey"
datME=MEs
datExpr=datt
modcol=paste("kME",which.module,sep="")
sorted=vsd.wg[order(allkME[,modcol],decreasing=T),]
# selection top N names genes, attaching gene names
gnames=c();counts=0;hubs=c()
for(i in 1:length(sorted[,1])) {
if (row.names(sorted)[i] %in% gg[,1]) {
counts=counts+1
gn=gg[gg[,1]==row.names(sorted)[i],2]
gn=paste(gn,row.names(sorted)[i],sep=".")
if (gn %in% gnames) {
gn=paste(gn,counts,sep=".")
}
gnames=append(gnames,gn)
hubs=data.frame(rbind(hubs,sorted[i,]))
if (counts==top) {break}
}
}
row.names(hubs)=gnames
colnames(hubs)
categories <- c("SI_C.control_Day_0", "MB_B.control_Day_0", "BC_8b.control_Day_0", "SI_C.variable_Day_0", "MB_B.variable_Day_0",
"BC_8b.variable_Day_0", "SI_C.control_Day_29", "MB_B.control_Day_29", "BC_8b.control_Day_29", "SI_C.variable_Day_29",
"MB_B.variable_Day_29", "BC_8b.variable_Day_29")
# Extract and sort columns for each category
category_columns <- lapply(categories, function(cat) {
matching_columns <- grep(cat, names(hubs), value = TRUE)
hubs[, matching_columns, drop = FALSE]
})
# Bind the columns back together in the desired order
reordered_df <- do.call(cbind, category_columns)
pheatmap(as.matrix(reordered_df),scale="row",col=contrasting,border_color=NA,treeheight_col=0,cex=0.9,cluster_rows = F, cluster_cols = F)
#which.module="turquoise"
#which.module="darkturquoise"
#which.module="brown"
#which.module="blue"
#which.module="darkorange"
#which.module="pink"
#which.module="cyan"
#which.module="grey"
which.module="royalblue"
datME=MEs
datExpr=datt
modcol=paste("kME",which.module,sep="")
sorted=vsd.wg[order(allkME[,modcol],decreasing=T),]
# selection top N names genes, attaching gene names
gnames=c();counts=0;hubs=c()
for(i in 1:length(sorted[,1])) {
if (row.names(sorted)[i] %in% gg[,1]) {
counts=counts+1
gn=gg[gg[,1]==row.names(sorted)[i],2]
gn=paste(gn,row.names(sorted)[i],sep=".")
if (gn %in% gnames) {
gn=paste(gn,counts,sep=".")
}
gnames=append(gnames,gn)
hubs=data.frame(rbind(hubs,sorted[i,]))
if (counts==top) {break}
}
}
row.names(hubs)=gnames
colnames(hubs)
categories <- c("SI_C.control_Day_0", "MB_B.control_Day_0", "BC_8b.control_Day_0", "SI_C.variable_Day_0", "MB_B.variable_Day_0",
"BC_8b.variable_Day_0", "SI_C.control_Day_29", "MB_B.control_Day_29", "BC_8b.control_Day_29", "SI_C.variable_Day_29",
"MB_B.variable_Day_29", "BC_8b.variable_Day_29")
# Extract and sort columns for each category
category_columns <- lapply(categories, function(cat) {
matching_columns <- grep(cat, names(hubs), value = TRUE)
hubs[, matching_columns, drop = FALSE]
})
# Bind the columns back together in the desired order
reordered_df <- do.call(cbind, category_columns)
pheatmap(as.matrix(reordered_df),scale="row",col=contrasting,border_color=NA,treeheight_col=0,cex=0.9,cluster_rows = F, cluster_cols = F)
hubgenes <- chooseTopHubInEachModule(datt, moduleColors, omitColors = "grey",
power = 2,
type = "signed")
hubgenes <-data.frame(hubgenes)
hubgenes <- tibble::rownames_to_column(hubgenes, "module")
hubgenes
hubgenes %>%
rename("gene" =
hubgenes) %>%
left_join(read.table(file = "~/OneDrive - University of Miami/NOAA ERL/stress hardening 2022/gene expression/Acervicornis_annotatedTranscriptome/Acervicornis_iso2geneName.tab",
sep = "\t",
quote="", fill=FALSE) %>%
mutate(gene = V1,
annot = V2) %>%
dplyr::select(-V1, -V2), by = "gene") -> hubgenes
hubgenes
write.csv(hubgenes, file="hubgenes.csv")
library(WGCNA)
load(file = "RData_files/networkdata_signed.RData") # moduleColors, MEs
load(file = "RData_files/wgcnaData.RData") # vsd table
load(file = "RData_files/data4wgcna.RData")
allkME =as.data.frame(signedKME(datt, MEs))
names(allkME)=gsub("kME","",names(allkME))
# run for each of these statements individually
#which.module="turquoise"
which.module="darkturquoise"
inModuleBinary=as.numeric(moduleColors==which.module)
combo=data.frame("gene"=row.names(vsd.wg),"Fish_kME"=allkME[,which.module]*inModuleBinary)
write.csv(combo,file=paste(which.module,".csv",sep=""),row.names=F,quote=F)
#which.module="turquoise"
#which.module="darkturquoise"
which.module="brown"
inModuleBinary=as.numeric(moduleColors==which.module)
combo=data.frame("gene"=row.names(vsd.wg),"Fish_kME"=allkME[,which.module]*inModuleBinary)
write.csv(combo,file=paste(which.module,".csv",sep=""),row.names=F,quote=F)
#which.module="turquoise"
#which.module="darkturquoise"
#which.module="brown"
which.module="blue"
inModuleBinary=as.numeric(moduleColors==which.module)
combo=data.frame("gene"=row.names(vsd.wg),"Fish_kME"=allkME[,which.module]*inModuleBinary)
write.csv(combo,file=paste(which.module,".csv",sep=""),row.names=F,quote=F)
#which.module="turquoise"
#which.module="darkturquoise"
#which.module="brown"
#which.module="blue"
which.module="darkorange"
inModuleBinary=as.numeric(moduleColors==which.module)
combo=data.frame("gene"=row.names(vsd.wg),"Fish_kME"=allkME[,which.module]*inModuleBinary)
write.csv(combo,file=paste(which.module,".csv",sep=""),row.names=F,quote=F)
#which.module="turquoise"
#which.module="darkturquoise"
#which.module="brown"
#which.module="blue"
#which.module="darkorange"
which.module="pink"
inModuleBinary=as.numeric(moduleColors==which.module)
combo=data.frame("gene"=row.names(vsd.wg),"Fish_kME"=allkME[,which.module]*inModuleBinary)
write.csv(combo,file=paste(which.module,".csv",sep=""),row.names=F,quote=F)
#which.module="turquoise"
#which.module="darkturquoise"
#which.module="brown"
#which.module="blue"
#which.module="darkorange"
#which.module="pink"
which.module="cyan"
inModuleBinary=as.numeric(moduleColors==which.module)
combo=data.frame("gene"=row.names(vsd.wg),"Fish_kME"=allkME[,which.module]*inModuleBinary)
write.csv(combo,file=paste(which.module,".csv",sep=""),row.names=F,quote=F)
#which.module="turquoise"
#which.module="darkturquoise"
#which.module="brown"
#which.module="blue"
#which.module="darkorange"
#which.module="pink"
#which.module="cyan"
which.module="grey"
inModuleBinary=as.numeric(moduleColors==which.module)
combo=data.frame("gene"=row.names(vsd.wg),"Fish_kME"=allkME[,which.module]*inModuleBinary)
write.csv(combo,file=paste(which.module,".csv",sep=""),row.names=F,quote=F)
#which.module="turquoise"
#which.module="darkturquoise"
#which.module="brown"
#which.module="blue"
#which.module="darkorange"
#which.module="pink"
#which.module="cyan"
#which.module="grey"
which.module="royalblue"
inModuleBinary=as.numeric(moduleColors==which.module)
combo=data.frame("gene"=row.names(vsd.wg),"Fish_kME"=allkME[,which.module]*inModuleBinary)
write.csv(combo,file=paste(which.module,".csv",sep=""),row.names=F,quote=F)
