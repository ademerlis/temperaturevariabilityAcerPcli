library(DESeq2)
library(arrayQualityMetrics)
library(tidyverse)
counts = readxl::read_xlsx("Downloads/Bioinformatics/acer/libro/allcounts_acer.xlsx")
#read in counts
counts = readxl::read_xlsx("Bioinformatics/acer/libro/allcounts_acer.xlsx")
column_to_rownames(counts, var ="...1") -> counts
# how many genes we have total?
nrow(counts) #57358
keep <- rowSums(counts) >= 10
countData <- counts[keep,]
# importing a design .csv file
design = read.csv("OneDrive - University of Miami/GitHub/Ch2_temperaturevariability2023/gene_expression/RNA_extraction_sequencing_data.csv", head=TRUE)
# importing a design .csv file
design = read.csv("../RNA_extraction_sequencing_data.csv", head=TRUE)
design %>%
select(Species:Treatment) %>%
filter(Species == "Acer") -> design
design$Genotype <- as.factor(design$Genotype)
design$Treatment <- as.factor(design$Treatment)
design %>%
mutate(time_point = case_when(Experiment.phase == "Pre-treatment" ~ "Day_0",
Experiment.phase == "last day of treatment" ~ "Day_29")) -> design
column_to_rownames(design, var="Sample_ID") -> design
design$group <- factor(paste0(design$Treatment, "_", design$time_point))
# make big dataframe including all factors and interaction, getting normalized data for outlier detection
dds = DESeqDataSetFromMatrix(countData=countData, colData=design, design=~ group)
# reorders fate factor according to "control" vs "treatment" levels
dds$group <- factor(dds$group, levels = c("control_Day_0","control_Day_29","variable_Day_0","variable_Day_29"))
# for large datasets, rlog may take too much time, especially for an unfiltered dataframe
# vsd is much faster and still works for outlier detection
Vsd=varianceStabilizingTransformation(dds)
outs=c(20,22,28)
countData=countData[,-outs]
Vsd=Vsd[,-outs]
# for WCGNA: removing all genes with counts of <10 in more than 90 % of samples
counts4wgcna = counts[apply(counts,1,function(x) sum(x<10))<ncol(counts)*0.9,]
counts4wgcna=counts4wgcna[,-outs]
design=design[-outs,]
# remaking model with outliers removed from dataset
dds = DESeqDataSetFromMatrix(countData=countData, colData=design, design=~ group)
dds$group <- factor(dds$group, levels = c("control_Day_0","control_Day_29","variable_Day_0","variable_Day_29"))
# save all these dataframes as an Rdata package so you don't need to rerun each time
save(dds,design,countData,Vsd,counts4wgcna,file="initial.RData")
# generating normalized variance-stabilized data for PCoA, heatmaps, etc
vsd=assay(Vsd)
# takes the sample IDs and factor levels from the design to create new column names for the dataframe
snames=paste(colnames(countData),design[,4],design[,6],sep=".")
# renames the column names
colnames(vsd)=snames
save(vsd,design,file="vsd.RData")
# more reduced stabilized dataset for WGCNA
wg = DESeqDataSetFromMatrix(countData=counts4wgcna, colData=design, design=~ group)
vsd.wg=assay(varianceStabilizingTransformation(wg), blind=TRUE)
# vsd.wg=assay(rlog(wg), blind=TRUE)
head(vsd.wg)
colnames(vsd.wg)=snames
save(vsd.wg,design,file="data4wgcna.RData")
library(pheatmap)
pdf(file="heatmap.pdf", width=15, height=15)
pheatmap(cor(vsd))
dev.off()
# Principal coordinates analysis
library(vegan)
# library(rgl)
library(ape)
conditions=design
conditions$group <- factor(conditions$group, levels = c("control_Day_0","control_Day_29","variable_Day_0","variable_Day_29"))
# creating a PCoA eigenvalue matrix
dds.pcoa=pcoa(dist(t(vsd),method="manhattan")/1000)
scores=dds.pcoa$vectors
# copy this table for % variation explained by each axis (Relative_eig column)
dds.pcoa$values
# plotting PCoA eigenvalues
pdf(file="PCoA_Manhattan.pdf", width=6, height=6)
plot(dds.pcoa$values$Relative_eig)
points(dds.pcoa$values$Broken_stick,col="red",pch=3)
dev.off()
pdf(file="PCoA.pdf", width=12, height=6)
par(mfrow=c(1,2))
plot(scores[,1], scores[,2],col=c("red","blue")[as.numeric(as.factor(conditions$Treatment))],pch=c(1,19)[as.numeric(as.factor(conditions$time_point))], xlab="Coordinate 1", ylab="Coordinate 2", main="Treatment")
ordispider(scores, conditions$fate, label=F, col=c("red","green","orange"))
legend("topright", legend=c("Control", "Variable"), fill = c("red","blue"), bty="n")
legend("topleft", legend=c("t0","t1"), pch=c(1,19), bty="n")
plot(scores[,1], scores[,2],col=c("grey","black")[as.numeric(as.factor(conditions$time_point))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Treatment)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Time")
ordispider(scores, conditions$time, label=F, col=c("grey","black"))
legend("topleft", legend=c("Day_0", "Day_29"), fill = c("grey","black"), bty="n")
legend("topright", legend=c("Control", "Variable"), pch=c(15,17,25), bty="n")
dev.off()
pdf(file="PCoA.pdf", width=12, height=6)
par(mfrow=c(1,2))
plot(scores[,1], scores[,2],col=c("red","blue")[as.numeric(as.factor(conditions$Treatment))],pch=c(1,19)[as.numeric(as.factor(conditions$time_point))], xlab="Coordinate 1", ylab="Coordinate 2", main="Treatment")
ordispider(scores, conditions$fate, label=F, col=c("red","green","orange"))
legend("topright", legend=c("Control", "Variable"), fill = c("red","blue"), bty="n")
legend("topleft", legend=c("Day_0", "Day_29"), pch=c(1,19), bty="n")
plot(scores[,1], scores[,2],col=c("grey","black")[as.numeric(as.factor(conditions$time_point))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Treatment)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Time")
ordispider(scores, conditions$time, label=F, col=c("grey","black"))
legend("topleft", legend=c("Day_0", "Day_29"), fill = c("grey","black"), bty="n")
legend("topright", legend=c("Control", "Variable"), pch=c(15,17,25), bty="n")
dev.off()
pdf(file="PCoA_tree.pdf", width=10, height=10)
tre=nj(dist(scores[,1:4]))
plot(tre,cex=0.8)
dev.off()
ad=adonis2(t(vsd)~time_point*Treatment,data=conditions,method="manhattan",permutations=1e6)
ad
cols=c("blue","orange","lightblue","grey80")
pdf(file="ANOVA_pie.pdf", width=6, height=6)
pie(ad$aov.tab$R2[1:4],labels=row.names(ad$aov.tab)[1:4],col=cols,main="time vs treatment")
ad
ad$Df
# Running full model for contrast statements
dds=DESeq(dds, parallel=TRUE)
treatment_time=results(dds)
summary(treatment_time)
plotPCA(vsd, intgroup = c("Treatment"))
plotPCA(Vsd, intgroup = c("Treatment"))
plotPCA(Vsd, intgroup = c("time_point"))
plotPCA(Vsd, intgroup = c("group"))
plotPCA(Vsd, intgroup = c("Genotype"))
plotPCA(Vsd, intgroup = c("group"))
vst <- vst(dds, blind = FALSE)
plotPCA(vst, intgroup = c("Treatment"))
plotPCA(vst, intgroup = c("Genotype"))
plotPCA(vst, intgroup = c("time_point"))
plotPCA(Vsd, intgroup = c("time_point"))
snames
# takes the sample IDs and factor levels from the design to create new column names for the dataframe
snames=paste(colnames(countData),design[,7],design[,6],sep=".")
# generating normalized variance-stabilized data for PCoA, heatmaps, etc
vsd=assay(Vsd)
# takes the sample IDs and factor levels from the design to create new column names for the dataframe
snames=paste(colnames(countData),design[,7],design[,6],sep=".")
# renames the column names
colnames(vsd)=snames
save(vsd,design,file="vsd.RData")
snames
aov(ad)
ad
# formal analysis of variance in distance matricies:
ad=adonis2(t(vsd)~time_point*Treatment + Genotype,data=conditions,method="manhattan",permutations=1e6)
ad
# make big dataframe including all factors and interaction, getting normalized data for outlier detection
dds = DESeqDataSetFromMatrix(countData=countData, colData=design, design=~ group + Genotype)
# reorders fate factor according to "control" vs "treatment" levels
dds$group <- factor(dds$group, levels = c("control_Day_0","control_Day_29","variable_Day_0","variable_Day_29"))
# for large datasets, rlog may take too much time, especially for an unfiltered dataframe
# vsd is much faster and still works for outlier detection
Vsd=varianceStabilizingTransformation(dds)
e=ExpressionSet(assay(Vsd), AnnotatedDataFrame(as.data.frame(colData(Vsd))))
# running outlier detection
arrayQualityMetrics(e,intgroup=c("group", "Genotype"),force=T)
# make big dataframe including all factors and interaction, getting normalized data for outlier detection
dds = DESeqDataSetFromMatrix(countData=countData, colData=design, design=~ group + Genotype)
# for large datasets, rlog may take too much time, especially for an unfiltered dataframe
# vsd is much faster and still works for outlier detection
Vsd=varianceStabilizingTransformation(dds)
# if there were outliers:
outs=c(33) #these numbers were taken from the index.html report from arrayQualityMetrics Figure 2 "Outlier detection"
countData=countData[,-outs]
Vsd=Vsd[,-outs]
counts4wgcna=counts4wgcna[,-outs]
design=design[-outs,]
# remaking model with outliers removed from dataset
dds = DESeqDataSetFromMatrix(countData=countData, colData=design, design=~ group + Genotype)
dds$group <- factor(dds$group, levels = c("control_Day_0","control_Day_29","variable_Day_0","variable_Day_29"))
# generating normalized variance-stabilized data for PCoA, heatmaps, etc
vsd=assay(Vsd)
snames=paste(colnames(countData),design[,7],design[,6],sep=".")
# renames the column names
colnames(vsd)=snames
#need to use the capital Vsd, not lowercase vsd, because the lowercase one was converted to a matrix for PCoA, heatmaps
plotPCA(Vsd, intgroup = c("Treatment"))
plotPCA(Vsd, intgroup = c("time_point"))
plotPCA(Vsd, intgroup = c("group"))
plotPCA(Vsd, intgroup = c("Genotype"))
Vsd_fullmodel_PCAdata <- plotPCA(Vsd, intgroup = c("group", "Genotype"), returnData = TRUE)
percentVar <- round(100*attr(vst_combo_PCAdata, "percentVar"))
percentVar <- round(100*attr(Vsd_fullmodel_PCAdata, "percentVar"))
vst_combo_PCAdata
ggplot(Vsd_fullmodel_PCAdata, aes(PC1, PC2, color=Genotype, shape=group)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("A. cervicornis - all genes") +
theme_bw() +
stat_ellipse(aes(PC1, PC2, group=group, lty = time_point), type = "norm") +
scale_color_manual(values = c("#00CCCC","#33CCCC", "#FF6633", "#FF3333"))
ggplot(Vsd_fullmodel_PCAdata, aes(PC1, PC2, color=Genotype, shape=group)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("A. cervicornis - all genes") +
theme_bw()
ggplot(Vsd_fullmodel_PCAdata, aes(PC1, PC2, color=Genotype, shape=Treatment)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("A. cervicornis - all genes") +
theme_bw()
