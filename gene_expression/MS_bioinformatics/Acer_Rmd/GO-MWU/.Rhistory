if (gn %in% gnames) {
gn=paste(gn,counts,sep=".")
}
gnames=append(gnames,gn)
hubs=data.frame(rbind(hubs,sorted[i,]))
if (counts==top) {break}
}
}
row.names(hubs)=gnames
colnames(hubs)
categories <- c("SI_C.control_Day_0", "MB_B.control_Day_0", "BC_8b.control_Day_0", "SI_C.variable_Day_0", "MB_B.variable_Day_0",
"BC_8b.variable_Day_0", "SI_C.control_Day_29", "MB_B.control_Day_29", "BC_8b.control_Day_29", "SI_C.variable_Day_29",
"MB_B.variable_Day_29", "BC_8b.variable_Day_29")
# Extract and sort columns for each category
category_columns <- lapply(categories, function(cat) {
matching_columns <- grep(cat, names(hubs), value = TRUE)
hubs[, matching_columns, drop = FALSE]
})
# Bind the columns back together in the desired order
reordered_df <- do.call(cbind, category_columns)
pheatmap(as.matrix(reordered_df),scale="row",col=contrasting,border_color=NA,treeheight_col=0,cex=0.9,cluster_rows = F, cluster_cols = F)
#which.module="turquoise"
#which.module="darkturquoise"
#which.module="brown"
#which.module="blue"
#which.module="darkorange"
#which.module="pink"
#which.module="cyan"
which.module="grey"
datME=MEs
datExpr=datt
modcol=paste("kME",which.module,sep="")
sorted=vsd.wg[order(allkME[,modcol],decreasing=T),]
# selection top N names genes, attaching gene names
gnames=c();counts=0;hubs=c()
for(i in 1:length(sorted[,1])) {
if (row.names(sorted)[i] %in% gg[,1]) {
counts=counts+1
gn=gg[gg[,1]==row.names(sorted)[i],2]
gn=paste(gn,row.names(sorted)[i],sep=".")
if (gn %in% gnames) {
gn=paste(gn,counts,sep=".")
}
gnames=append(gnames,gn)
hubs=data.frame(rbind(hubs,sorted[i,]))
if (counts==top) {break}
}
}
row.names(hubs)=gnames
colnames(hubs)
categories <- c("SI_C.control_Day_0", "MB_B.control_Day_0", "BC_8b.control_Day_0", "SI_C.variable_Day_0", "MB_B.variable_Day_0",
"BC_8b.variable_Day_0", "SI_C.control_Day_29", "MB_B.control_Day_29", "BC_8b.control_Day_29", "SI_C.variable_Day_29",
"MB_B.variable_Day_29", "BC_8b.variable_Day_29")
# Extract and sort columns for each category
category_columns <- lapply(categories, function(cat) {
matching_columns <- grep(cat, names(hubs), value = TRUE)
hubs[, matching_columns, drop = FALSE]
})
# Bind the columns back together in the desired order
reordered_df <- do.call(cbind, category_columns)
pheatmap(as.matrix(reordered_df),scale="row",col=contrasting,border_color=NA,treeheight_col=0,cex=0.9,cluster_rows = F, cluster_cols = F)
#which.module="turquoise"
#which.module="darkturquoise"
#which.module="brown"
#which.module="blue"
#which.module="darkorange"
#which.module="pink"
#which.module="cyan"
#which.module="grey"
which.module="royalblue"
datME=MEs
datExpr=datt
modcol=paste("kME",which.module,sep="")
sorted=vsd.wg[order(allkME[,modcol],decreasing=T),]
# selection top N names genes, attaching gene names
gnames=c();counts=0;hubs=c()
for(i in 1:length(sorted[,1])) {
if (row.names(sorted)[i] %in% gg[,1]) {
counts=counts+1
gn=gg[gg[,1]==row.names(sorted)[i],2]
gn=paste(gn,row.names(sorted)[i],sep=".")
if (gn %in% gnames) {
gn=paste(gn,counts,sep=".")
}
gnames=append(gnames,gn)
hubs=data.frame(rbind(hubs,sorted[i,]))
if (counts==top) {break}
}
}
row.names(hubs)=gnames
colnames(hubs)
categories <- c("SI_C.control_Day_0", "MB_B.control_Day_0", "BC_8b.control_Day_0", "SI_C.variable_Day_0", "MB_B.variable_Day_0",
"BC_8b.variable_Day_0", "SI_C.control_Day_29", "MB_B.control_Day_29", "BC_8b.control_Day_29", "SI_C.variable_Day_29",
"MB_B.variable_Day_29", "BC_8b.variable_Day_29")
# Extract and sort columns for each category
category_columns <- lapply(categories, function(cat) {
matching_columns <- grep(cat, names(hubs), value = TRUE)
hubs[, matching_columns, drop = FALSE]
})
# Bind the columns back together in the desired order
reordered_df <- do.call(cbind, category_columns)
pheatmap(as.matrix(reordered_df),scale="row",col=contrasting,border_color=NA,treeheight_col=0,cex=0.9,cluster_rows = F, cluster_cols = F)
hubgenes <- chooseTopHubInEachModule(datt, moduleColors, omitColors = "grey",
power = 2,
type = "signed")
hubgenes <-data.frame(hubgenes)
hubgenes <- tibble::rownames_to_column(hubgenes, "module")
hubgenes
hubgenes %>%
rename("gene" =
hubgenes) %>%
left_join(read.table(file = "~/OneDrive - University of Miami/NOAA ERL/stress hardening 2022/gene expression/Acervicornis_annotatedTranscriptome/Acervicornis_iso2geneName.tab",
sep = "\t",
quote="", fill=FALSE) %>%
mutate(gene = V1,
annot = V2) %>%
dplyr::select(-V1, -V2), by = "gene") -> hubgenes
hubgenes
write.csv(hubgenes, file="hubgenes.csv")
library(WGCNA)
load(file = "RData_files/networkdata_signed.RData") # moduleColors, MEs
load(file = "RData_files/wgcnaData.RData") # vsd table
load(file = "RData_files/data4wgcna.RData")
allkME =as.data.frame(signedKME(datt, MEs))
names(allkME)=gsub("kME","",names(allkME))
# run for each of these statements individually
#which.module="turquoise"
which.module="darkturquoise"
inModuleBinary=as.numeric(moduleColors==which.module)
combo=data.frame("gene"=row.names(vsd.wg),"Fish_kME"=allkME[,which.module]*inModuleBinary)
write.csv(combo,file=paste(which.module,".csv",sep=""),row.names=F,quote=F)
#which.module="turquoise"
#which.module="darkturquoise"
which.module="brown"
inModuleBinary=as.numeric(moduleColors==which.module)
combo=data.frame("gene"=row.names(vsd.wg),"Fish_kME"=allkME[,which.module]*inModuleBinary)
write.csv(combo,file=paste(which.module,".csv",sep=""),row.names=F,quote=F)
#which.module="turquoise"
#which.module="darkturquoise"
#which.module="brown"
which.module="blue"
inModuleBinary=as.numeric(moduleColors==which.module)
combo=data.frame("gene"=row.names(vsd.wg),"Fish_kME"=allkME[,which.module]*inModuleBinary)
write.csv(combo,file=paste(which.module,".csv",sep=""),row.names=F,quote=F)
#which.module="turquoise"
#which.module="darkturquoise"
#which.module="brown"
#which.module="blue"
which.module="darkorange"
inModuleBinary=as.numeric(moduleColors==which.module)
combo=data.frame("gene"=row.names(vsd.wg),"Fish_kME"=allkME[,which.module]*inModuleBinary)
write.csv(combo,file=paste(which.module,".csv",sep=""),row.names=F,quote=F)
#which.module="turquoise"
#which.module="darkturquoise"
#which.module="brown"
#which.module="blue"
#which.module="darkorange"
which.module="pink"
inModuleBinary=as.numeric(moduleColors==which.module)
combo=data.frame("gene"=row.names(vsd.wg),"Fish_kME"=allkME[,which.module]*inModuleBinary)
write.csv(combo,file=paste(which.module,".csv",sep=""),row.names=F,quote=F)
#which.module="turquoise"
#which.module="darkturquoise"
#which.module="brown"
#which.module="blue"
#which.module="darkorange"
#which.module="pink"
which.module="cyan"
inModuleBinary=as.numeric(moduleColors==which.module)
combo=data.frame("gene"=row.names(vsd.wg),"Fish_kME"=allkME[,which.module]*inModuleBinary)
write.csv(combo,file=paste(which.module,".csv",sep=""),row.names=F,quote=F)
#which.module="turquoise"
#which.module="darkturquoise"
#which.module="brown"
#which.module="blue"
#which.module="darkorange"
#which.module="pink"
#which.module="cyan"
which.module="grey"
inModuleBinary=as.numeric(moduleColors==which.module)
combo=data.frame("gene"=row.names(vsd.wg),"Fish_kME"=allkME[,which.module]*inModuleBinary)
write.csv(combo,file=paste(which.module,".csv",sep=""),row.names=F,quote=F)
#which.module="turquoise"
#which.module="darkturquoise"
#which.module="brown"
#which.module="blue"
#which.module="darkorange"
#which.module="pink"
#which.module="cyan"
#which.module="grey"
which.module="royalblue"
inModuleBinary=as.numeric(moduleColors==which.module)
combo=data.frame("gene"=row.names(vsd.wg),"Fish_kME"=allkME[,which.module]*inModuleBinary)
write.csv(combo,file=paste(which.module,".csv",sep=""),row.names=F,quote=F)
setwd("GO-MWU/")
setwd("GO-MWU/")
source("gomwu.functions.R")
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goAnnotations="Acervicornis_iso2go.tab" # two-column, tab-delimited, one line per gene,
# Edit these to match your data file names:
input="../RData_files/control0_control29_lpv.RData" # two columns of comma-separated values: gene id, continuous measure of significance.
# Edit these to match your data file names:
input="control0_control29_lpv.RData" # two columns of comma-separated values: gene id, continuous measure of significance.
goDivision="MF" # either MF, or BP, or CC
# Calculating stats. It might take ~3 min for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs,
#go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Edit these to match your data file names:
load(control0_control29_lpv.RData)
# Edit these to match your data file names:
load("control0_control29_lpv.RData")
input="control0_control29.p" # two columns of comma-separated values: gene id, continuous measure of significance.
# Calculating stats. It might take ~3 min for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs,
#go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
View(control0_control29.p)
input=
as.table("control0_control29.p") # two columns of comma-separated values: gene id, continuous measure of significance.
# Edit these to match your data file names:
input="control0_control29_lpv.csv" # two columns of comma-separated values: gene id, continuous measure of significance.
# Calculating stats. It might take ~3 min for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs,
#go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
goDivision="BP" # either MF, or BP, or CC
# Calculating stats. It might take ~3 min for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs,
#go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
goDivision="CC" # either MF, or BP, or CC
# Calculating stats. It might take ~3 min for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs,
#go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
goDivision="BP" # either MF, or BP, or CC
# Calculating stats. It might take ~3 min for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs,
#go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Calculating stats. It might take ~3 min for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs,
#go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Calculating stats. It might take ~3 min for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs,
#go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
goDivision="MF" # either MF, or BP, or CC
quartz()
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
# absValue=1,
#absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
# level1=0.1,
level1=0.05,
# level2=0.1, # FDR cutoff to print in regular (not italic) font.
# level2=0.05,
level2=0.01,
# level3=0.05, # FDR cutoff to print in large bold font.
# level3=0.01,
level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
goDivision="CC" # either MF, or BP, or CC
quartz()
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
# absValue=1,
#absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
# level1=0.1,
level1=0.05,
# level2=0.1, # FDR cutoff to print in regular (not italic) font.
# level2=0.05,
level2=0.01,
# level3=0.05, # FDR cutoff to print in large bold font.
# level3=0.01,
level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
goDivision="MF" # either MF, or BP, or CC
# text representation of results, with actual adjusted p-values
results
write.csv(results, file = "control0_control29_MF_p0.05.csv")
goDivision="CC" # either MF, or BP, or CC
# text representation of results, with actual adjusted p-values
results
write.csv(results, file = "control0_control29_CC_p0.05.csv")
input="variable0_variable29_lpv.csv"
goDivision="MF" # either MF, or BP, or CC
# Calculating stats. It might take ~3 min for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs,
#go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
quartz()
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
# absValue=1,
#absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
# level1=0.1,
level1=0.05,
# level2=0.1, # FDR cutoff to print in regular (not italic) font.
# level2=0.05,
level2=0.01,
# level3=0.05, # FDR cutoff to print in large bold font.
# level3=0.01,
level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# text representation of results, with actual adjusted p-values
results
quartz()
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
# absValue=1,
#absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
# level1=0.1,
level1=0.05,
# level2=0.1, # FDR cutoff to print in regular (not italic) font.
# level2=0.05,
level2=0.01,
# level3=0.05, # FDR cutoff to print in large bold font.
# level3=0.01,
level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
write.csv(results, file = "variable0_variable29_p0.05.csv")
write.csv(results, file = "variable0_variable29_MF_p0.05.csv")
goDivision="BP" # either MF, or BP, or CC
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Calculating stats. It might take ~3 min for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs,
#go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.5, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
goDivision="CC" # either MF, or BP, or CC
# Calculating stats. It might take ~3 min for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs,
#go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.5, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Calculating stats. It might take ~3 min for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs,
#go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes,
#kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
quartz()
results=gomwuPlot(input,goAnnotations,goDivision,
absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes".
#Specify -log(0.05,10) for log p-value (lpv) datasets, and 1 for fold change (fc) datasets.
#Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module
#(all non-zero genes = "good genes").
# absValue=1,
#absValue=0.001,
# level1=1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
# level1=0.1,
level1=0.05,
# level2=0.1, # FDR cutoff to print in regular (not italic) font.
# level2=0.05,
level2=0.01,
# level3=0.05, # FDR cutoff to print in large bold font.
# level3=0.01,
level3=0.001,
txtsize=1.2,    # decrease to fit more on one page, or increase
#(after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# text representation of results, with actual adjusted p-values
results
write.csv(results, file = "variable0_variable29_CC_p0.05.csv")
