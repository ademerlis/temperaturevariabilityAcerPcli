dplyr::rename("KOG" = KOG, "c0c29_up" = n) -> KOG_c0c29_up
c0c29_v0v29 %>%
mutate(KOG = replace(KOG, KOG == "", NA)) %>%
filter(lpv_c0c29 <= -1) %>%
dplyr::count(KOG) %>%
dplyr::rename("KOG" = KOG, "c0c29_down" = n) -> KOG_c0c29_down
c0c29_v0v29 %>%
mutate(KOG = replace(KOG, KOG == "", NA)) %>%
filter(lpv_v0v29 >= 1) %>%
dplyr::count(KOG) %>%
dplyr::rename("KOG" = KOG, "v0v29_up" = n) -> KOG_v0v29_up
c0c29_v0v29 %>%
mutate(KOG = replace(KOG, KOG == "", NA)) %>%
filter(lpv_v0v29 <= -1) %>%
dplyr::count(KOG) %>%
dplyr::rename("KOG" = KOG, "v0v29_down" = n) -> KOG_v0v29_down
#v0c0 vs. v29c29
KOG_v0c0_up %>%
inner_join(KOG_v0c0_down, by = "KOG") %>%
inner_join(KOG_v29c29_down, by = "KOG") %>%
inner_join(KOG_v29c29_up, by = "KOG") -> KOG_v0c0_v29c29_match
v0c0_v29c29 %>%
mutate(KOG = replace(KOG, KOG == "", NA)) %>%
filter(lpv_v0c0 <= -1) %>%
dplyr::count(KOG) %>%
dplyr::rename("KOG" = KOG, "v0c0_down" = n) -> KOG_v0c0_down
#v0c0 vs. v29c29
KOG_v0c0_up %>%
inner_join(KOG_v0c0_down, by = "KOG") %>%
inner_join(KOG_v29c29_down, by = "KOG") %>%
inner_join(KOG_v29c29_up, by = "KOG") -> KOG_v0c0_v29c29_match
#c0c29 vs v0v29
KOG_c0c29_down %>%
inner_join(KOG_c0c29_up, by = "KOG") %>%
inner_join(KOG_v0v29_up, by = "KOG") %>%
inner_join(KOG_v0v29_down, by = "KOG") -> KOG_c0c29_v0v29_match
# melting dataframe for plotting
KOG_v0c0_v29c29_match %>%
melt(id = "KOG") %>%
rename(comparison = variable, sum = value) -> KOG_v0c0_v29c29_melt
# melting dataframe for plotting
KOG_v0c0_v29c29_match %>%
melt(id = "KOG") %>%
dplyr::rename(comparison = variable, sum = value) -> KOG_v0c0_v29c29_melt
KOG_c0c29_v0v29_match %>%
melt(id = "KOG") %>%
dplyr::rename(comparison = variable, sum = value) -> KOG_c0c29_v0v29_melt
colorCount = length(unique(KOG_v0c0_v29c29_match$KOG))
getPalette = colorRampPalette(brewer.pal(8, "Accent"))
KOG_v0c0_v29c29_sum <- ggplot(KOG_v0c0_v29c29_melt, aes(fill = KOG, y = sum, x = comparison)) +
geom_bar(position="stack", stat="identity") +
scale_fill_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(colorCount)) +
labs(x = "Comparison",
y = "Proportion of DEGs") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5))
KOG_v0c0_v29c29_sum
colorCount = length(unique(KOG_c0c29_v0v29_match$KOG))
getPalette = colorRampPalette(brewer.pal(8, "Accent"))
KOG_c0c29_v0v29_sum <- ggplot(KOG_c0c29_v0v29_melt, aes(fill = KOG, y = sum, x = comparison)) +
geom_bar(position="stack", stat="identity") +
scale_fill_manual(values = colorRampPalette(brewer.pal(8, "Accent"))(colorCount)) +
labs(x = "Comparison",
y = "Proportion of DEGs") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5))
KOG_c0c29_v0v29_sum
ggsave("common genes KOG c0c29_v0v29 abundance.pdf", plot= KOG_c0c29_v0v29_sum, width=8, height=6, units="in", dpi=300)
ggsave("common genes KOG v0c0_v29c29 abundance.pdf", plot= KOG_v0c0_v29c29_sum, width=8, height=6, units="in", dpi=300)
ggsave("common genes KOG v0c0_v29c29 abundance.pdf", plot= KOG_v0c0_v29c29_sum, width=8, height=6, units="in", dpi=300)
ggsave("common genes KOG c0c29_v0v29 abundance.pdf", plot= KOG_c0c29_v0v29_sum, width=8, height=6, units="in", dpi=300)
ggsave("common genes KOG c0c29_v0v29 abundance.pdf", plot= KOG_c0c29_v0v29_sum, width=12, height=6, units="in", dpi=300)
v0c0_v29c29 %>%
filter(lpv_v0c0 >= 1) %>%
pull(gene) -> v0c0_up
v0c0_v29c29 %>%
filter(lpv_v0c0 <= -1) %>%
pull(gene) -> v0c0_down
v0c0_v29c29 %>%
filter(lpv_v29c29 >= 1) %>%
pull(gene) -> v29c29_up
v0c0_v29c29 %>%
filter(lpv_v29c29 <= -1) %>%
pull(gene) -> v29c29_down
# then creating a second set for c0c29_v0v29
c0c29_v0v29 %>%
filter(lpv_c0c29 >= 1) %>%
pull(gene) -> c0c29_up
c0c29_v0v29 %>%
filter(lpv_c0c29 <= -1) %>%
pull(gene) -> c0c29_down
c0c29_v0v29 %>%
filter(lpv_v0v29 >= 1) %>%
pull(gene) -> v0v29_up
c0c29_v0v29 %>%
filter(lpv_v0v29 <= -1) %>%
pull(gene) -> v0v29_down
# v0c0_v29c29
venn_v0c0v29c29=venn.diagram(
x = list("V0/C0 up"=v0c0_up, "V0/C0 down"=v0c0_down,"V29/C29 up"=v29c29_up, "V29/C29 down"=v29c29_down),
filename=NULL,
col = "transparent",
fill = c("#ca0020", "#0571b0", "#f4a582", "#92c5de"),
alpha = 0.5,
label.col = c("red3","white","cornflowerblue","black","white","white","white", "black","darkred","grey25","white","white","grey25","darkblue","white"),
cex = 3.5,
fontfamily = "sans",
fontface = "bold",
cat.default.pos = "text",
cat.col =c("darkred", "darkblue", "red3", "cornflowerblue"),
cat.cex = 3.5,
cat.fontfamily = "sans",
cat.just = list(c(0,0.5),c(0.75,0.5),c(0.5,0.5),c(0.5,0.5))
)
venn_v0c0v29c29=venn.diagram(
x = list("V0/C0 up"=v0c0_up, "V0/C0 down"=v0c0_down,"V29/C29 up"=v29c29_up, "V29/C29 down"=v29c29_down),
filename=NULL,
col = "transparent",
fill = c("#ca0020", "#0571b0", "#f4a582", "#92c5de"),
alpha = 0.5,
label.col = c("red3","white","cornflowerblue","black","white","white","white", "black","darkred","grey25","white","white","grey25","darkblue","white"),
cex = 3.5,
fontfamily = "sans",
fontface = "bold",
cat.default.pos = "text",
cat.col =c("darkred", "darkblue", "red3", "cornflowerblue"),
cat.cex = 3.5,
cat.fontfamily = "sans",
cat.just = list(c(0,0.5),c(0.75,0.5),c(0.5,0.5),c(0.5,0.5))
)
pdf(file="venn_v0c0v29c29.pdf", height=10, width=12)
grid.draw(venn_v0c0v29c29)
dev.off()
venn_c0c29_v0v29=venn.diagram(
x = list("C0/C29 up"=c0c29_up, "C0/C29 down"=c0c29_down,"V0/V29 up"=v0v29_up, "V0/V29 down"=v0v29_down),
filename=NULL,
col = "transparent",
fill = c("#ca0020", "#0571b0", "#f4a582", "#92c5de"),
alpha = 0.5,
label.col = c("red3","white","cornflowerblue","black","white","white","white", "black","darkred","grey25","white","white","grey25","darkblue","white"),
cex = 3.5,
fontfamily = "sans",
fontface = "bold",
cat.default.pos = "text",
cat.col =c("darkred", "darkblue", "red3", "cornflowerblue"),
cat.cex = 3.5,
cat.fontfamily = "sans",
cat.just = list(c(0,0.5),c(0.75,0.5),c(0.5,0.5),c(0.5,0.5))
)
pdf(file="venn_c0c29_v0v29.pdf", height=10, width=12)
grid.draw(venn_c0c29_v0v29)
dev.off()
list("C0/C29 up"=c0c29_up, "C0/C29 down"=c0c29_down,"V0/V29 up"=v0v29_up, "V0/V29 down"=v0v29_down)
v0c0_up
venn_v0c0v29c29=venn.diagram(
x = list("V0/C0 up"=v0c0_up, "V0/C0 down"=v0c0_down,"V29/C29 up"=v29c29_up, "V29/C29 down"=v29c29_down),
category.names = c("V0/C0 up", "V0/C0 down", "V29/C29 up", "V29/C29 down"),
filename=NULL,
col = "transparent",
fill = c("#ca0020", "#0571b0", "#f4a582", "#92c5de"),
alpha = 0.5,
label.col = c("red3","white","cornflowerblue","black","white","white","white", "black","darkred","grey25","white","white","grey25","darkblue","white"),
cex = 3.5,
fontfamily = "sans",
fontface = "bold",
cat.default.pos = "text",
cat.col =c("darkred", "darkblue", "red3", "cornflowerblue"),
cat.cex = 3.5,
cat.fontfamily = "sans",
cat.just = list(c(0,0.5),c(0.75,0.5),c(0.5,0.5),c(0.5,0.5))
)
pdf(file="venn_v0c0v29c29.pdf", height=10, width=12)
grid.draw(venn_v0c0v29c29)
dev.off()
v0v29_down
# first loading variance stabilized arrays of gene counts, then replacing species-specific gene IDs with orthogroup IDs, then removing NAI samples
load("RData_files/vsd.RData")
library(tidyverse)
library(WGCNA)
library(flashClust)
library(ape)
options(stringsAsFactors=FALSE)
allowWGCNAThreads()
setwd("OneDrive - University of Miami/GitHub/Ch2_temperaturevariability2023/gene_expression/MS_bioinformatics/Acer_Rmd/")
lnames=load("RData_files/data4wgcna.RData")
lnames # "vsd.wg"  "design" # log-transformed variance-stabilized gene expression, and table or experimental conditions
datt=t(vsd.wg)
ncol(datt) #27829
nrow(datt) #45
head(design)
str(design)
all.equal(colnames(vsd.wg), rownames(design))
str(design)
head(design)
colnames(vsd.wg)
rownames(design) <- colnames(vsd.wg)
head(design)
all.equal(colnames(vsd.wg), rownames(design))
variable = as.numeric(design$Treatment=="variable")
control = as.numeric(design$Treatment == "control")
SI_C = as.numeric(design$Genotype == "SI-C")
BC_8b = as.numeric(design$Genotype == "BC-8b")
MB_B = as.numeric(design$Genotype == "MB-B")
Day0 = as.numeric(design$time_point=="Day_0")
Day29 =as.numeric(design$time_point=="Day_29")
control_Day0 = as.numeric(design$group=="control_Day_0")
control_Day29 = as.numeric(design$group=="control_Day_29")
variable_Day0 = as.numeric(design$group=="variable_Day_0")
variable_Day29 = as.numeric(design$group=="variable_Day_29")
traits <- data.frame(cbind(variable, control, SI_C,BC_8b, MB_B, Day0, Day29, control_Day0, control_Day29, variable_Day0, variable_Day29))
head(traits)
table(rownames(traits)==rownames(datt))
rownames(datt)
#change treatment to be binary (control = 0, variable = 1)
variable = as.numeric(design$Treatment=="variable")
View(traits)
View(design)
SI_C = as.numeric(design$Genotype == "SI-C")
traits <- data.frame(cbind(variable, control, Day0, Day29, control_Day0, control_Day29, variable_Day0, variable_Day29))
head(traits)
# identifies outlier genes
gsg = goodSamplesGenes(datt, verbose = 3);
head(datt)
gsg$allOK #if TRUE, no outlier genes
# calculates mean expression per array, then the number of missing values per array
meanExpressionByArray=apply( datt,1,mean, na.rm=T)
NumberMissingByArray=apply( is.na(data.frame(datt)),1, sum)
NumberMissingByArray
pdf("~/OneDrive - University of Miami/GitHub/Ch2_temperaturevariability2023/gene_expression/MS_bioinformatics/Acer_Rmd/WGCNA/sample_mean_expression.pdf",height=4, width=8)
barplot(meanExpressionByArray,
xlab = "Sample", ylab = "Mean expression",
main ="Mean expression across samples",
names.arg = c(1:45), cex.names = 0.7)
dev.off()
# sample dendrogram and trait heat map showing outliers
A=adjacency(t(datt),type="signed")                 #SELECT SIGNED OR UNSIGNED HERE
# this calculates the whole network connectivity
k=as.numeric(apply(A,2,sum))-1
Z.k=scale(k)
thresholdZ.k=-2.5 # often -2.5
outlierColor=ifelse(Z.k<thresholdZ.k,"red","black")
sampleTree = flashClust(as.dist(1-A), method = "average")
# Convert traits to a color representation where red indicates high values
traitColors=data.frame(numbers2colors(traits,signed=FALSE))
dimnames(traitColors)[[2]]=paste(names(traits))
datColors=data.frame(outlierC=outlierColor,traitColors)
# Plot the sample dendrogram and the colors underneath.
quartz()
plotDendroAndColors(sampleTree,groupLabels=names(datColors), colors=datColors,main="Sample dendrogram and trait heatmap")
remove.samples= Z.k<thresholdZ.k | is.na(Z.k)
datt=datt[!remove.samples,]
traits=traits[!remove.samples,] #1 sample removed
write.csv(traits, file="traits.csv")
save(datt,traits,file="wgcnaData.RData")
# Try different betas ("soft threshold") - power factor for calling connections between genes
powers = c(seq(from = 2, to=26, by=1))
# Call the network topology analysis function
sft = pickSoftThreshold(datt, powerVector = powers, verbose = 8,networkType="signed")
# importing data generated from DESeq2 script
lnames=load("RData_files/data4wgcna.RData")
lnames # "vsd.wg"  "design" # log-transformed variance-stabilized gene expression, and table or experimental conditions
datt=t(vsd.wg)
head(design)
all.equal(colnames(vsd.wg), rownames(design)) #FALSE
rownames(design) <- colnames(vsd.wg)
head(design)
all.equal(colnames(vsd.wg), rownames(design)) #TRUE
variable = as.numeric(design$Treatment=="variable")
control = as.numeric(design$Treatment == "control")
SI_C = as.numeric(design$Genotype == "SI_C")
BC_8b = as.numeric(design$Genotype == "BC_8b")
MB_B = as.numeric(design$Genotype == "MB_B")
Day0 = as.numeric(design$time_point=="Day_0")
Day29 =as.numeric(design$time_point=="Day_29")
control_Day0 = as.numeric(design$group=="control_Day_0")
control_Day29 = as.numeric(design$group=="control_Day_29")
variable_Day0 = as.numeric(design$group=="variable_Day_0")
variable_Day29 = as.numeric(design$group=="variable_Day_29")
# importing data generated from DESeq2 script
lnames=load("RData_files/data4wgcna.RData")
datt=t(vsd.wg)
View(datt)
mm=load('1stPassModules.RData')
mm
lnames=load('wgcnaData.RData')
traits
head(datt)
traits <- data.frame(cbind(variable, control, SI_C,BC_8b, MB_B, Day0, Day29, control_Day0, control_Day29, variable_Day0, variable_Day29))
variable = as.numeric(design$Treatment=="variable")
control = as.numeric(design$Treatment == "control")
# assembling table of traits
# coding genotype as binary (0/1, yes/no)
design$Genotype
SI_C = as.numeric(design$Genotype == "SI_C")
BC_8b = as.numeric(design$Genotype == "BC_8b")
MB_B = as.numeric(design$Genotype == "MB_B")
#change time point to be binary (for day0, when time_point = Day_0 it encodes it as "1". for day_29 same thing)
Day0 = as.numeric(design$time_point=="Day_0")
Day29 =as.numeric(design$time_point=="Day_29")
#change group to be binary
design$group
control_Day0 = as.numeric(design$group=="control_Day_0")
control_Day29 = as.numeric(design$group=="control_Day_29")
variable_Day0 = as.numeric(design$group=="variable_Day_0")
variable_Day29 = as.numeric(design$group=="variable_Day_29")
traits <- data.frame(cbind(variable, control, SI_C,BC_8b, MB_B, Day0, Day29, control_Day0, control_Day29, variable_Day0, variable_Day29))
head(traits)
table(rownames(traits)==rownames(datt))
View(traits)
table(rownames(traits)==rownames(datt))
quartz()
MEDissThres = 0 # in the first pass, set this to 0 - no merging (we want to see the module-traits heatmap first, then decide which modules are telling us the same story and better be merged)
sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes",
xlab = "", sub = "")
merge = mergeCloseModules(datt, dynamicColors, cutHeight = MEDissThres, verbose = 3)
library(tidyverse)
library(WGCNA)
library(flashClust)
library(ape)
options(stringsAsFactors=FALSE)
allowWGCNAThreads()
merge = mergeCloseModules(datt, dynamicColors, cutHeight = MEDissThres, verbose = 3)
# The merged module colors
mergedColors = merge$colors;
# Eigengenes of the new merged modules:
mergedMEs = merge$newMEs
# plotting the fabulous ridiculogram
quartz()
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE, hang = 0.03,
addGuide = FALSE, guideHang = 0.05,lwd=0.3)
# Rename to moduleColors
moduleColors = mergedColors
# Construct numerical labels corresponding to the colors
colorOrder = c("grey", standardColors(50));
moduleLabels = match(moduleColors, colorOrder)-1;
MEs = mergedMEs;
# Calculate dissimilarity of module eigengenes
quartz()
MEDiss = 1-cor(MEs);
# Cluster module eigengenes
METree = flashClust(as.dist(MEDiss), method = "average");
# Plot the result
sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes",
xlab = "", sub = "")
# how many genes in each module?
table(moduleColors)
# Define numbers of genes and samples
nGenes = ncol(datt); #27829
nSamples = nrow(datt); #44
# Recalculate MEs with color labels
MEs0 = moduleEigengenes(datt, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
View(MEs)
# correlations of genes with eigengenes
moduleGeneCor=cor(MEs,datt)
View(moduleGeneCor)
moduleGenePvalue = corPvalueStudent(moduleGeneCor, nSamples);
moduleTraitCor = cor(MEs, traits, use = "p");
View(traits)
A=adjacency(t(datt),type="signed")                 #SELECT SIGNED OR UNSIGNED HERE
#I am going with signed because if you pick unsigned, it mixes negatively and positiviely correlated nodes together and
#direction of correlation does matter for downstream analysis.
#(full explanation here: https://peterlangfelder.com/2018/11/25/signed-or-unsigned-which-network-type-is-preferable/)
# this calculates the whole network connectivity
k=as.numeric(apply(A,2,sum))-1
# standardized connectivity
Z.k=scale(k)
thresholdZ.k=-2.5 # often -2.5
outlierColor=ifelse(Z.k<thresholdZ.k,"red","black")
sampleTree = flashClust(as.dist(1-A), method = "average")
# Convert traits to a color representation where red indicates high values
traitColors=data.frame(numbers2colors(traits,signed=FALSE))
dimnames(traitColors)[[2]]=paste(names(traits))
datColors=data.frame(outlierC=outlierColor,traitColors)
# Remove outlying samples from expression and trait data
remove.samples= Z.k<thresholdZ.k | is.na(Z.k)
datt=datt[!remove.samples,]
traits=traits[!remove.samples,] #1 sample removed
View(traits)
# always run these before running any of the following script chunks
library(tidyverse)
library(WGCNA)
library(flashClust)
library(ape)
options(stringsAsFactors=FALSE)
allowWGCNAThreads()
# importing data generated from DESeq2 script
lnames=load("RData_files/data4wgcna.RData")
lnames # "vsd.wg"  "design" # log-transformed variance-stabilized gene expression, and table or experimental conditions
datt=t(vsd.wg)
rownames(design) <- colnames(vsd.wg)
head(design)
all.equal(colnames(vsd.wg), rownames(design)) #TRUE
variable = as.numeric(design$Treatment=="variable")
control = as.numeric(design$Treatment == "control")
# assembling table of traits
# coding genotype as binary (0/1, yes/no)
design$Genotype
SI_C = as.numeric(design$Genotype == "SI_C")
BC_8b = as.numeric(design$Genotype == "BC_8b")
MB_B = as.numeric(design$Genotype == "MB_B")
#change time point to be binary (for day0, when time_point = Day_0 it encodes it as "1". for day_29 same thing)
Day0 = as.numeric(design$time_point=="Day_0")
Day29 =as.numeric(design$time_point=="Day_29")
#change group to be binary
design$group
control_Day0 = as.numeric(design$group=="control_Day_0")
control_Day29 = as.numeric(design$group=="control_Day_29")
variable_Day0 = as.numeric(design$group=="variable_Day_0")
variable_Day29 = as.numeric(design$group=="variable_Day_29")
traits <- data.frame(cbind(variable, control, SI_C,BC_8b, MB_B, Day0, Day29, control_Day0, control_Day29, variable_Day0, variable_Day29))
head(traits)
# identifies outlier genes
gsg = goodSamplesGenes(datt, verbose = 3);
gsg$allOK #if TRUE, no outlier genes
meanExpressionByArray=apply( datt,1,mean, na.rm=T)
NumberMissingByArray=apply( is.na(data.frame(datt)),1, sum)
NumberMissingByArray
# sample dendrogram and trait heat map showing outliers
A=adjacency(t(datt),type="signed")                 #SELECT SIGNED OR UNSIGNED HERE
# this calculates the whole network connectivity
k=as.numeric(apply(A,2,sum))-1
# standardized connectivity
Z.k=scale(k)
thresholdZ.k=-2.5 # often -2.5
outlierColor=ifelse(Z.k<thresholdZ.k,"red","black")
sampleTree = flashClust(as.dist(1-A), method = "average")
# Convert traits to a color representation where red indicates high values
traitColors=data.frame(numbers2colors(traits,signed=FALSE))
dimnames(traitColors)[[2]]=paste(names(traits))
datColors=data.frame(outlierC=outlierColor,traitColors)
# Remove outlying samples from expression and trait data
remove.samples= Z.k<thresholdZ.k | is.na(Z.k)
View(remove.samples)
datt=datt[!remove.samples,]
traits=traits[!remove.samples,] #1 sample removed
mm=load('1stPassModules.RData')
mm
save(datt,traits,file="wgcnaData.RData")
MEDissThres = 0 # in the first pass, set this to 0 - no merging (we want to see the module-traits heatmap first, then decide which modules are telling us the same story and better be merged)
merge = mergeCloseModules(datt, dynamicColors, cutHeight = MEDissThres, verbose = 3)
# The merged module colors
mergedColors = merge$colors;
# Eigengenes of the new merged modules:
mergedMEs = merge$newMEs
moduleColors = mergedColors
# Construct numerical labels corresponding to the colors
colorOrder = c("grey", standardColors(50));
moduleLabels = match(moduleColors, colorOrder)-1;
MEs = mergedMEs;
MEDiss = 1-cor(MEs);
MEs0 = moduleEigengenes(datt, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
# correlations of genes with eigengenes
moduleGeneCor=cor(MEs,datt)
moduleGenePvalue = corPvalueStudent(moduleGeneCor, nSamples);
nSamples = nrow(datt); #44
# Define numbers of genes and samples
nGenes = ncol(datt); #27829
moduleGenePvalue = corPvalueStudent(moduleGeneCor, nSamples);
moduleTraitCor = cor(MEs, traits, use = "p");
View(moduleTraitCor)
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples);
quartz()
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(
Matrix = moduleTraitCor,
xLabels = names(traits),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1, 1),
main = paste("Module-trait relationships")
)
quartz()
library(RColorBrewer)
modLabels=sub("ME","",names(MEs))
ps=signif(moduleTraitPvalue,1)
cors=signif(moduleTraitCor,2)
textMatrix = cors;
# paste(cors, "\n(",ps, ")", sep = "");
textMatrix[ps>0.05]="-"
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(traits),
ySymbols = modLabels,
yLabels = modLabels,
colorLabels = FALSE,
colors = colorRampPalette(c("blue","lightblue","white","coral","red"))(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-0.7,0.7),
main = paste("A.cervicornis Module-Trait correlations"))
colnames(vsd.wg)
colnames(datt)
rownames(datt)
rownames(design)
