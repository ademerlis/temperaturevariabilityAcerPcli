library(DESeq2)
library(arrayQualityMetrics)
library(tidyverse)
#read in counts
counts = readxl::read_xlsx("../Bioinformatics/pcli/magana/allcounts_pcli.xlsx") #alignment to Avila-Magana et al. 2021 transcriptome
column_to_rownames(counts, var ="...1") -> counts
View(counts)
# how many genes we have total?
nrow(counts) #57358
ncol(counts) #48 samples
# how does the data look?
head(counts)
# filtering out low-count genes
keep <- rowSums(counts) >= 10
countData <- counts[keep,]
nrow(countData) #47882
ncol(countData) #48
write.csv(countData, file = "results_csv/Pcli_countdata.csv")
# for WCGNA: removing all genes with counts of <10 in more than 90 % of samples
counts4wgcna = counts[apply(counts,1,function(x) sum(x<10))<ncol(counts)*0.9,]
nrow(counts4wgcna) #27829
ncol(counts4wgcna) #48
write.csv(counts4wgcna, file="results/Pcli_counts4wgcna.csv")
write.csv(counts4wgcna, file="results_csv/Pcli_counts4wgcna.csv")
# importing a design .csv file
design = read.csv("../../RNA_extraction_sequencing_data.csv", head=TRUE)
design %>%
select(Species:Treatment) %>%
filter(Species == "Pcli") -> design
View(design)
design$Genotype <- as.factor(design$Genotype)
design$Treatment <- as.factor(design$Treatment)
design %>%
mutate(time_point = case_when(Experiment.phase == "Pre-treatment" ~ "Day_0",
Experiment.phase == "last day of treatment" ~ "Day_29")) -> design
column_to_rownames(design, var="Sample_ID") -> design
View(counts)
# importing a design .csv file
design = read.csv("../../RNA_extraction_sequencing_data.csv", head=TRUE)
design %>%
select(Species:Treatment) %>%
filter(Species == "Pcli") -> design
design$Genotype <- as.factor(design$Genotype)
design$Treatment <- as.factor(design$Treatment)
design %>%
mutate(time_point = case_when(Experiment.phase == "Pre-treatment" ~ "Day_0",
Experiment.phase == "last day of treatment" ~ "Day_29")) -> design
column_to_rownames(design, var="Sample_ID") -> design
design$group <- factor(paste0(design$Treatment, "_", design$time_point))
str(design)
# make big dataframe including all factors and interaction, getting normalized data for outlier detection
dds = DESeqDataSetFromMatrix(countData=countData, colData=design, design=~ group + Genotype)
# reorders fate factor according to "control" vs "treatment" levels
dds$group <- factor(dds$group, levels = c("control_Day_0","control_Day_29","variable_Day_0","variable_Day_29"))
# for large datasets, rlog may take too much time, especially for an unfiltered dataframe
# vsd is much faster and still works for outlier detection
Vsd=varianceStabilizingTransformation(dds)
library(Biobase)
e=ExpressionSet(assay(Vsd), AnnotatedDataFrame(as.data.frame(colData(Vsd))))
# running outlier detection
arrayQualityMetrics(e,intgroup=c("group"),force=T) #Genotype is not included as an intgroup because it is not the main factors of interest.
# if there were outliers:
outs=c(5,23,39,46) #these numbers were taken from the index.html report from arrayQualityMetrics Figure 2 "Outlier detection"
countData=countData[,-outs]
Vsd=Vsd[,-outs]
counts4wgcna=counts4wgcna[,-outs]
design=design[-outs,]
# remaking model with outliers removed from dataset
dds = DESeqDataSetFromMatrix(countData=countData, colData=design, design=~ group + Genotype)
dds$group <- factor(dds$group, levels = c("control_Day_0","control_Day_29","variable_Day_0","variable_Day_29"))
# save all these dataframes as an Rdata package so you don't need to rerun each time
save(dds,design,countData,Vsd,counts4wgcna,file="Rdata_files/initial_fullddsdesigncountsVsdcountsWGCNA.RData")
# generating normalized variance-stabilized data for PCoA, heatmaps, etc
vsd=assay(Vsd)
# takes the sample IDs and factor levels from the design to create new column names for the dataframe
snames=paste(colnames(countData),design[,2],design[,8],sep=".")
snames
# renames the column names
colnames(vsd)=snames
save(vsd,design,file="Rdata_files/vsd.RData")
# more reduced stabilized dataset for WGCNA
wg = DESeqDataSetFromMatrix(countData=counts4wgcna, colData=design, design=~ group + Genotype)
vsd.wg=assay(varianceStabilizingTransformation(wg), blind=TRUE)
# vsd.wg=assay(rlog(wg), blind=TRUE)
head(vsd.wg)
colnames(vsd.wg)=snames
save(vsd.wg,design,file="Rdata_files/data4wgcna.RData")
library(pheatmap)
pdf(file="plots/heatmap_fullmodel.pdf", width=15, height=15)
pheatmap(cor(vsd))
dev.off()
library(vegan)
# library(rgl)
library(ape)
conditions=design
conditions$group <- factor(conditions$group, levels = c("control_Day_0","control_Day_29","variable_Day_0","variable_Day_29"))
dds.pcoa=pcoa(dist(t(vsd),method="manhattan")/1000)
scores=dds.pcoa$vectors
# copy this table for % variation explained by each axis (Relative_eig column)
dds.pcoa$values
pdf(file="plots/PCoA_Manhattan.pdf", width=6, height=6)
plot(dds.pcoa$values$Relative_eig)
points(dds.pcoa$values$Broken_stick,col="red",pch=3)
dev.off()
pdf(file="plots/PCoA.pdf", width=12, height=6)
par(mfrow=c(1,2))
plot(scores[,1], scores[,2],col=c("red","blue")[as.numeric(as.factor(conditions$Treatment))],pch=c(1,19)[as.numeric(as.factor(conditions$time_point))], xlab="Coordinate 1", ylab="Coordinate 2", main="Treatment")
ordispider(scores, conditions$fate, label=F, col=c("red","green","orange"))
legend("topright", legend=c("Control", "Variable"), fill = c("red","blue"), bty="n")
legend("topleft", legend=c("Day_0", "Day_29"), pch=c(1,19), bty="n")
plot(scores[,1], scores[,2],col=c("grey","black")[as.numeric(as.factor(conditions$time_point))],pch=c(15,17,25)[as.numeric((as.factor(conditions$Treatment)))], xlab="Coordinate 1", ylab="Coordinate 2", main="Time")
ordispider(scores, conditions$time, label=F, col=c("grey","black"))
legend("topleft", legend=c("Day_0", "Day_29"), fill = c("grey","black"), bty="n")
legend("topright", legend=c("Control", "Variable"), pch=c(15,17,25), bty="n")
dev.off()
pdf(file="plots/PCoA_tree.pdf", width=10, height=10)
tre=nj(dist(scores[,1:4]))
plot(tre,cex=0.8)
dev.off()
# formal analysis of variance in distance matricies:
ad=adonis2(t(vsd)~time_point*Treatment + Genotype,data=conditions,method="manhattan",permutations=1e6)
ad
cols=c("blue","orange","lightblue","grey80")
pdf(file="Rdata_files/ANOVA_pie.pdf", width=6, height=6)
pie(ad$R2[1:4],labels=row.names(as.data.frame(ad)),col=cols,main="time vs treatment")
dev.off()
library(DESeq2)
library(BiocParallel)
# Running full model for contrast statements
dds=DESeq(dds, parallel=TRUE)
# saving all models
save(dds,file="Rdata_files/realModels_Pcli.RData")
# treatment
treatment_time=results(dds)
summary(treatment_time)
degs_treatment_time=row.names(treatment_time)[treatment_time$padj<0.1 & !(is.na(treatment_time$padj))]
resultsNames(dds)
variable29_control29=results(dds,contrast=c("group","variable_Day_29","control_Day_29"))
summary(variable29_control29)
degs_variable29_control29=row.names(variable29_control29)[variable29_control29$padj<0.1 & !(is.na(variable29_control29$padj))]
variable0_control0=results(dds,contrast=c("group","variable_Day_0","control_Day_0"))
summary(variable0_control0)
degs_variable0_control0=row.names(variable0_control0)[variable0_control0$padj<0.1 & !(is.na(variable0_control0$padj))]
variable0_variable29=results(dds,contrast=c("group","variable_Day_0","variable_Day_29"))
summary(variable0_variable29)
degs_variable0_variable29=row.names(variable0_variable29)[variable0_variable29$padj<0.1 & !(is.na(variable0_variable29$padj))]
control0_control29=results(dds,contrast=c("group","control_Day_0","control_Day_29"))
summary(control0_control29)
degs_control0_control29=row.names(control0_control29)[control0_control29$padj<0.1 & !(is.na(control0_control29$padj))]
save(treatment_time,variable29_control29,variable0_control0,variable0_variable29,control0_control29, degs_variable29_control29,degs_variable0_control0, degs_variable0_variable29, degs_control0_control29, file="Rdata_files/pvals.RData")
means=apply(vsd,1,mean)
means=apply(vsd,1,mean)
pdf(file="plots/DEG_density_treatment.time.pdf", height=5, width=5)
plot(density(means))
lines(density(means[degs_variable29_control29]),col="blue")
lines(density(means[degs_variable0_control0]),col="orange")
means=apply(vsd,1,mean)
pdf(file="plots/DEG_density_treatmenttime.pdf", height=5, width=5)
plot(density(means))
lines(density(means[degs_variable29_control29]),col="blue")
lines(density(means[degs_variable0_control0]),col="orange")
degs_variable0_control0
degs_control0_control29
degs_variable0_control0
summary(variable0_control0)
variable0_control0=results(dds,contrast=c("group","variable_Day_0","control_Day_0"))
summary(variable0_control0)
means=apply(vsd,1,mean)
pdf(file="plots/DEG_density_treatmenttime.pdf", height=5, width=5)
plot(density(means))
lines(density(means[degs_variable29_control29]),col="blue")
lines(density(means[degs_variable0_variable29]),col="lightblue")
lines(density(means[degs_control0_control29]),col="yellow")
legend("topright", title = "Factor",
legend=c("variable29_control29","variable0_variable29","control0_control29"),
fill = c("blue","lightblue","yellow"))
dev.off()
pairwise=list("V29/C29"=degs_variable29_control29, "V0/V29"=degs_variable0_variable29,"C0/C29"=degs_control0_control29)
# install.packages("VennDiagram")
library(VennDiagram)
pairwise
# treatment/time contrasts
venn=venn.diagram(
x = pairwise,
filename=NULL,
col = "transparent",
fill = c("#01665e", "#5ab4ac", "#8c510a","#f6e8c3"),
alpha = 0.5,
label.col = c("#8c510a","white","#dfc27d","white","white","black","white", "white","#01665e","white","white","white","white","#35978f","white"),
cex = 3.5,
fontfamily = "sans",
fontface = "bold",
cat.default.pos = "text",
cat.col =c("#01665e","#35978f","#8c510a","#dfc27d"),
cat.cex = 3.5,
cat.fontfamily = "sans",
cat.just = list(c(0,0.5),c(0.75,0.5),c(0.5,0.5),c(0.5,0.5))
)
# treatment/time contrasts
venn=venn.diagram(
x = pairwise,
filename=NULL,
col = "transparent",
fill = c("#01665e", "#5ab4ac","#f6e8c3"),
alpha = 0.5,
label.col = c("#dfc27d","white","white","black","white", "white","#01665e","white","white","#35978f","white"),
cex = 3.5,
fontfamily = "sans",
fontface = "bold",
cat.default.pos = "text",
cat.col =c("#01665e","#35978f",,"#dfc27d"),
cat.cex = 3.5,
cat.fontfamily = "sans",
cat.just = list(c(0,0.5),c(0.75,0.5),c(0.5,0.5),c(0.5,0.5))
)
# treatment/time contrasts
venn=venn.diagram(
x = pairwise,
filename=NULL,
col = "transparent",
fill = c("#01665e", "#5ab4ac","#f6e8c3"),
alpha = 0.5,
label.col = c("#dfc27d","white","white","black","white","#01665e","white","white","#35978f","white"),
cex = 3.5,
fontfamily = "sans",
fontface = "bold",
cat.default.pos = "text",
cat.col =c("#01665e","#35978f",,"#dfc27d"),
cat.cex = 3.5,
cat.fontfamily = "sans",
cat.just = list(c(0,0.5),c(0.75,0.5),c(0.5,0.5),c(0.5,0.5))
)
# treatment/time contrasts
venn=venn.diagram(
x = pairwise,
filename=NULL,
col = "transparent",
fill = c("#01665e", "#5ab4ac","#f6e8c3"),
alpha = 0.5,
label.col = c("#dfc27d","white","black","white","#01665e","white","white","#35978f","white"),
cex = 3.5,
fontfamily = "sans",
fontface = "bold",
cat.default.pos = "text",
cat.col =c("#01665e","#35978f",,"#dfc27d"),
cat.cex = 3.5,
cat.fontfamily = "sans",
cat.just = list(c(0,0.5),c(0.75,0.5),c(0.5,0.5),c(0.5,0.5))
)
# treatment/time contrasts
venn=venn.diagram(
x = pairwise,
filename=NULL,
col = "transparent",
fill = c("#01665e", "#5ab4ac","#f6e8c3"),
alpha = 0.5,
label.col = c("#dfc27d","white","black","white","#01665e","white","#35978f","white"),
cex = 3.5,
fontfamily = "sans",
fontface = "bold",
cat.default.pos = "text",
cat.col =c("#01665e","#35978f",,"#dfc27d"),
cat.cex = 3.5,
cat.fontfamily = "sans",
cat.just = list(c(0,0.5),c(0.75,0.5),c(0.5,0.5),c(0.5,0.5))
)
# treatment/time contrasts
venn=venn.diagram(
x = pairwise,
filename=NULL,
col = "transparent",
fill = c("#01665e", "#5ab4ac","#f6e8c3"),
alpha = 0.5,
#label.col = c("#dfc27d","white","black","white","#01665e","white","#35978f","white"),
cex = 3.5,
fontfamily = "sans",
fontface = "bold",
cat.default.pos = "text",
cat.col =c("#01665e","#35978f",,"#dfc27d"),
cat.cex = 3.5,
cat.fontfamily = "sans",
cat.just = list(c(0,0.5),c(0.75,0.5),c(0.5,0.5),c(0.5,0.5))
)
# treatment/time contrasts
venn=venn.diagram(
x = pairwise,
filename=NULL,
col = "transparent",
fill = c("#01665e", "#5ab4ac","#f6e8c3"),
alpha = 0.5,
#label.col = c("#dfc27d","white","black","white","#01665e","white","#35978f","white"),
cex = 3.5,
fontfamily = "sans",
fontface = "bold",
cat.default.pos = "text",
cat.col =c("#01665e","#35978f","#dfc27d"),
cat.cex = 3.5,
cat.fontfamily = "sans",
cat.just = list(c(0,0.5),c(0.75,0.5),c(0.5,0.5),c(0.5,0.5))
)
# treatment/time contrasts
venn=venn.diagram(
x = pairwise,
filename=NULL,
col = "transparent",
fill = c("#01665e", "#5ab4ac","#f6e8c3"),
alpha = 0.5,
#label.col = c("#dfc27d","white","black","white","#01665e","white","#35978f","white"),
cex = 3.5,
fontfamily = "sans",
fontface = "bold",
cat.default.pos = "text",
cat.col =c("#01665e","#35978f","#dfc27d"),
cat.cex = 3.5,
cat.fontfamily = "sans",
#cat.just = list(c(0,0.5),c(0.75,0.5),c(0.5,0.5),c(0.5,0.5))
)
venn=venn.diagram(
x = pairwise,
filename=NULL,
col = "transparent",
fill = c("#01665e", "#5ab4ac","#f6e8c3"),
alpha = 0.5,
#label.col = c("#dfc27d","white","black","white","#01665e","white","#35978f","white"),
cex = 3.5,
fontfamily = "sans",
fontface = "bold",
cat.default.pos = "text",
cat.col =c("#01665e","#35978f","#dfc27d"),
cat.cex = 3.5,
cat.fontfamily = "sans",
#cat.just = list(c(0,0.5),c(0.75,0.5),c(0.5,0.5),c(0.5,0.5))
)
pdf(file="plots/Venn_Pcli.pdf", height=10, width=12)
grid.draw(venn)
dev.off()
View(pairwise)
pairwise=list("V29/C29"=degs_variable29_control29, "V0/C0"=degs_variable0_control0,"V0/V29"=degs_variable0_variable29,"C0/C29"=degs_control0_control29)
# treatment/time contrasts
venn=venn.diagram(
x = pairwise,
filename=NULL,
col = "transparent",
fill = c("#01665e", "#5ab4ac", "#8c510a","#f6e8c3"),
alpha = 0.5,
label.col = c("#8c510a","white","#dfc27d","white","white","black","white", "white","#01665e","white","white","white","white","#35978f","white"),
cex = 3.5,
fontfamily = "sans",
fontface = "bold",
cat.default.pos = "text",
cat.col =c("#01665e","#35978f","#8c510a","#dfc27d"),
cat.cex = 3.5,
cat.fontfamily = "sans",
cat.just = list(c(0,0.5),c(0.75,0.5),c(0.5,0.5),c(0.5,0.5))
)
venn=venn.diagram(
x = pairwise,
filename=NULL,
col = "transparent",
fill = c("#01665e", "#5ab4ac", "#8c510a","#f6e8c3"),
alpha = 0.5,
label.col = c("#8c510a","white","#dfc27d","white","white","black","white", "white","#01665e","white","white","white","white","#35978f","white"),
cex = 3.5,
fontfamily = "sans",
fontface = "bold",
cat.default.pos = "text",
cat.col =c("#01665e","#35978f","#8c510a","#dfc27d"),
cat.cex = 3.5,
cat.fontfamily = "sans",
cat.just = list(c(0,0.5),c(0.75,0.5),c(0.5,0.5),c(0.5,0.5))
)
pdf(file="Venn_Pcli.pdf", height=10, width=12)
grid.draw(venn)
dev.off()
source=variable29_control29[!is.na(variable29_control29$pvalue),]
variable29_control29.fc=data.frame("gene"=row.names(source))
variable29_control29.fc$lfc=source[,"log2FoldChange"]
head(variable29_control29.fc)
write.csv(variable29_control29.fc,file="results_csv/variable29_control29_fc.csv",row.names=F,quote=F)
save(variable29_control29.fc,file="Rdata_files/variable29_control29_fc.RData")
variable29_control29.p=data.frame("gene"=row.names(source))
variable29_control29.p$lpv=-log(source[,"pvalue"],10)
variable29_control29.p$lpv[source$stat<0]=variable29_control29.p$lpv[source$stat<0]*-1
head(variable29_control29.p)
write.csv(variable29_control29.p,file="results_csv/variable29_control29_lpv.csv",row.names=F,quote=F)
save(variable29_control29.p,file="Rdata_files/variable29_control29_lpv.RData")
source=variable0_control0[!is.na(variable0_control0$pvalue),]
variable0_control0.fc=data.frame("gene"=row.names(source))
variable0_control0.fc$lfc=source[,"log2FoldChange"]
head(variable0_control0.fc)
write.csv(variable0_control0.fc,file="results_csv/variable0_control0_fc.csv",row.names=F,quote=F)
save(variable0_control0.fc,file="Rdata_files/variable0_control0_fc.RData")
variable0_control0.p=data.frame("gene"=row.names(source))
variable0_control0.p$lpv=-log(source[,"pvalue"],10)
variable0_control0.p$lpv[source$stat<0]=variable0_control0.p$lpv[source$stat<0]*-1
head(variable0_control0.p)
write.csv(variable0_control0.p,file="results_csv/variable0_control0_lpv.csv",row.names=F,quote=F)
save(variable0_control0.p,file="Rdata_files/variable0_control0_lpv.RData")
source=variable0_variable29[!is.na(variable0_variable29$pvalue),]
variable0_variable29.fc=data.frame("gene"=row.names(source))
variable0_variable29.fc$lfc=source[,"log2FoldChange"]
head(variable0_variable29.fc)
write.csv(variable0_variable29.fc,file="results_csv/variable0_variable29_fc.csv",row.names=F,quote=F)
save(variable0_variable29.fc,file="Rdata_files/variable0_variable29_fc.RData")
variable0_variable29.p=data.frame("gene"=row.names(source))
variable0_variable29.p$lpv=-log(source[,"pvalue"],10)
variable0_variable29.p$lpv[source$stat<0]=variable0_variable29.p$lpv[source$stat<0]*-1
head(variable0_variable29.p)
write.csv(variable0_variable29.p,file="results_csv/variable0_variable29_lpv.csv",row.names=F,quote=F)
save(variable0_variable29.p,file="Rdata_files/variable0_variable29_lpv.RData")
source=control0_control29[!is.na(control0_control29$pvalue),]
control0_control29.fc=data.frame("gene"=row.names(source))
control0_control29.fc$lfc=source[,"log2FoldChange"]
head(control0_control29.fc)
write.csv(control0_control29.fc,file="results_csv/control0_control29_fc.csv",row.names=F,quote=F)
save(control0_control29.fc,file="Rdata_files/control0_control29_fc.RData")
control0_control29.p=data.frame("gene"=row.names(source))
control0_control29.p$lpv=-log(source[,"pvalue"],10)
control0_control29.p$lpv[source$stat<0]=control0_control29.p$lpv[source$stat<0]*-1
head(control0_control29.p)
write.csv(control0_control29.p,file="results_csv/control0_control29_lpv.csv",row.names=F,quote=F)
save(control0_control29.p,file="Rdata_files/control0_control29_lpv.RData")
plotPCA(vst, intgroup = c("Treatment"))
plotPCA(vsd, intgroup = c("Treatment"))
plotPCA(Vsd, intgroup = c("Treatment"))
plotPCA(Vsd, intgroup = c("Treatment"))
plotPCA(Vsd, intgroup = c("Treatment"))
vst_PCAdata <- plotPCA(Vsd, intgroup = c("Treatment", "Genotype", "time_point"), returnData = TRUE)
percentVar <- round(100*attr(vst_PCAdata, "percentVar"))
#plot PCA of samples with all data
pca.centroids <- vst_PCAdata %>%
dplyr::select(Treatment, Genotype, time_point, PC1, PC2)%>%
dplyr::group_by(Treatment, Genotype, time_point)%>%
dplyr::summarise(PC1.mean = mean(PC1),
PC2.mean = mean(PC2))
find_hull <- function(vst_PCAdata) vst_PCAdata[chull(vst_PCAdata$PC1, vst_PCAdata$PC2), ]
hulls <- plyr::ddply(vst_PCAdata, "group", find_hull)
ggplot(vst_PCAdata, aes(PC1, PC2, color=Genotype, shape=time_point)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("A. cervicornis - all genes") +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank()) +
stat_ellipse(aes(PC1, PC2, group=Treatment, lty = Treatment), type = "norm")
vst_PCAdata
ggplot(vst_PCAdata, aes(PC1, PC2, color=Treatment, shape=time_point)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("A. cervicornis - all genes") +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())
ggplot(vst_PCAdata, aes(PC1, PC2, color=Treatment, shape=time_point)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("A. cervicornis - all genes") +
theme_bw()
g<- ggplot(vst_PCAdata, aes(PC1, PC2, color=Treatment, shape=time_point)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ggtitle("A. cervicornis - all genes") +
theme_bw() + #Set background color
theme(panel.border = element_blank(), # Set border
axis.line = element_line(colour = "black"), #Set axes color
plot.background=element_blank())
view(g)
