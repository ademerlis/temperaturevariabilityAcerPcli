mutate(Date = mdy(Date)) %>%
dplyr::filter(Date <= "2022-04-20") %>% #pre-CBASS time points
pivot_wider(names_from = Date, values_from = fvfm) %>%
mutate(fvfm_loss = case_when(Species == "Acervicornis" ~ `2022-03-16` - `2022-04-20`,
Species == "Pclivosa" ~ `2022-03-21` - `2022-04-20`)) %>%
mutate(fvfm_loss_norm = case_when(Species == "Acervicornis" ~ (fvfm_loss/`2022-03-16`)*100,
Species == "Pclivosa" ~ (fvfm_loss/`2022-03-21`)*100))
#save data for WGCNA
treatment_normalized_bothspecies
#save data for WGCNA
treatment_normalized_bothspecies %>%
select(Colony, Puck, Treatment, Species, fvfm_loss, fvfm_loss_norm) %>%
write_csv("treatment_fvfm.csv")
library(tidyverse)
library(readxl)
library(rstatix)
library(plotrix)
library(ggpubr)
library(cowplot)
library(dunn.test)
Rscoredata <- read_xlsx("data_rscores.xlsx")
Rscoredata %>%
rename(`Photo ID` = `Image #`) %>%
rename(Date = `Date (Folder Name)`) -> Rscoredata
initialphotos <- read_xlsx("photo_metadata.xlsx")
april18 <- read_xlsx("photo_metadata.xlsx", sheet = "april 18")
june21 <- read_xlsx("photo_metadata.xlsx", sheet = "june 21")
july8 <- read_xlsx("photo_metadata.xlsx", sheet = "july 8")
coral_metadata <- readxl::read_xlsx("../metadata.xlsx")
coral_metadata %>%
dplyr::select(Species:CBASS_tank) -> coral_metadata
str(initialphotos)
initialphotos %>%
dplyr::select(`Photo ID`:`Coral Position`) -> initialphotos
str(april18)
april18 %>%
dplyr::select(`Photo ID`:`Coral Position`) -> april18
str(june21)
june21%>%
dplyr::select(`Photo ID`:`Coral Position`) -> june21
str(july8)
july8 %>%
dplyr::select(`Photo ID`:`Coral Position`) -> july8
full_join(initialphotos, april18) %>%
full_join(., june21) %>%
full_join(., july8) -> allRscores
allRscores
#Tank column depends on time point, as the tank assignments changed throughout timeline. But, should be able to use the Puck ID + Species as the unique identifier
allRscores %>%
mutate(Species = case_when(Species == "Acer" ~ "Acropora cervicornis",
Species == "Pcli" ~ "Pseudodiploria clivosa")) -> allRscores
allRscores %>%
rename(ID = `Puck ID`) -> allRscores #821 rows
full_join(allRscores, coral_metadata, by = c("Species", "ID")) %>%
drop_na(`Photo ID`)  -> allmetadata #821 rows
full_join(allmetadata, Rscoredata, by = c("Date", "Photo ID", "Coral Position")) -> Rintensity_withmetadata
Rintensity_withmetadata %>%
dplyr::select(!Genotype) -> Rintensity_withmetadata
Rintensity_withmetadata$month <- format(Rintensity_withmetadata$Date, "%m")
Rintensity_withmetadata$Date <- as.factor(Rintensity_withmetadata$Date)
Rintensity_withmetadata$month <- as.factor(Rintensity_withmetadata$month)
Rintensity_withmetadata %>%
group_by(ID, Species, Colony, Treatment, month) %>%
mutate(mean_Rintensity_percoral = mean(Mean)) -> Rintensity_withmetadata
# Rintensity_withmetadata %>%
#   filter(is.na(Species)) #photo 4709 is a duplicate from photo 4711 so I already have these values in the spreadsheet
Rintensity_withmetadata %>%
drop_na(ID) -> Rintensity_withmetadata
Rintensity_withmetadata
Rintensity_withmetadata %>%
ungroup() %>%
filter(month == "03" | month == "04") %>%
dplyr::select(ID, Species, Colony, Treatment, Treatment_Tank, month, mean_Rintensity_percoral) %>%
distinct() %>%
pivot_wider(names_from = "month", values_from = "mean_Rintensity_percoral") %>%
mutate(percent_change = ((`04`-`03`)/`03`)*100) -> percentchange
percentchange %>%
drop_na() -> percentchange #7 corals were not measured in the second time point
#sample sizes
percentchange %>%
group_by(Species, Colony, Treatment) %>%
summarise(count = n())
percentchange
percentchange %>%
select(ID:Treatment, percent_change) %>%
write_csv("treatment_Rscore.csv")
library(tidyverse)
library(plotrix)
library(ggpubr)
library(rstatix)
library(cowplot)
library(dunn.test)
library(Rmisc)
library(plyr)
library(dplyr)
percent_cells_df <- read_csv("Grace_percentcells_alldata.csv")
percent_cells_df%>%
mutate(Treatment = case_when(Treatment == "Control" ~ "Untreated",
Treatment == "Variable" ~ "Treated")) -> percent_cells_df
#there's one outlier to remove right off the bat: T1	Pcli	B	P9	r2	Percent=111.50	T1	Untreated
percent_cells_df %>%
filter(!(TimePoint=="T1" & Species == "Pcli" & Genotype == "B" & Treatment == "Untreated" & ID == "P9" & Replicate == "r2")) -> percent_cells_df
#replicates are technical replicates of the same coral fragment
#time points:
#T0 = initial pre-treatment (March 22)
#T1 = one week into treatment (March 30)
#T2 = end of treatment (April 20)
#follow-up = post CBASS and treatment follow-up (June 1)
percent_cells_df %>%
mutate(num_days = case_when(TimePoint == "T0" ~ "0",
TimePoint == "T1" ~ "7",
TimePoint == "T2" ~ "28",
TimePoint == "FollowUp" ~ "71")) %>%
mutate(num_days = as.factor(num_days)) %>%
mutate(num_days = fct_relevel(num_days, "0", "7", "28", "71")) -> percent_cells_df
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
dplyr::filter(TimePoint == "T0" | TimePoint == "T2") %>%
dplyr::group_by(num_days, Species, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(TimePoint:ID, Treatment:mean_replicate_percent_perID) %>%
distinct() %>%
dplyr::group_by(num_days, Species, Genotype, Treatment) %>%
dplyr::summarise(count = n())
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
dplyr::filter(TimePoint == "T0" | TimePoint == "T2") %>%
dplyr::group_by(num_days, Species, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(TimePoint:ID, Treatment:mean_replicate_percent_perID) %>%
distinct()
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
dplyr::filter(TimePoint == "T0" | TimePoint == "T2") %>%
dplyr::group_by(num_days, Species, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(TimePoint:ID, Treatment:mean_replicate_percent_perID) %>%
distinct() %>%
write_csv("phagocytosis_alltimepoints.csv")
library(tidyverse)
library(WGCNA)
library(flashClust)
library(ape)
options(stringsAsFactors=FALSE)
allowWGCNAThreads()
load("RData_files/wgcnaData.RData")
setwd("~/Library/CloudStorage/OneDrive-UniversityofMiami/GitHub/Ch2_temperaturevariability2023/gene_expression/Acervicornis")
load("RData_files/wgcnaData.RData")
lnames=load("RData_files/data4wgcna.RData")
load("RData_files/data4wgcna.RData")
design=design[!remove.samples,]
lnames=load("RData_files/data4wgcna.RData")
lnames # "vsd.wg"  "design" # log-transformed variance-stabilized gene expression, and table or experimental conditions
datt=t(vsd.wg)
ncol(datt) #15526
nrow(datt) #44
head(design)
str(design)
colnames(vsd.wg)
all.equal(colnames(vsd.wg), rownames(design)) #FALSE
rownames(design) <- colnames(vsd.wg)
all.equal(colnames(vsd.wg), rownames(design)) #TRUE
Initial = as.numeric(design$Treatment=="Initial")
Untreated = as.numeric(design$Treatment == "Untreated")
Treated = as.numeric(design$Treatment == "Treated")
# assembling table of traits
# coding genotype as binary (0 = FALSE, 1 = TRUE)
design$Genotype
SI_C = as.numeric(design$Genotype == "SI_C")
BC_8b = as.numeric(design$Genotype == "BC_8b")
MB_B = as.numeric(design$Genotype == "MB_B")
traits <- data.frame(cbind(Initial, Untreated, Treated, SI_C,BC_8b, MB_B))
head(traits)
#### OUTLIER DETECTION ####
# identifies outlier genes
gsg = goodSamplesGenes(datt, verbose = 3);
gsg$allOK #if TRUE, no outlier genes
#TRUE!
A=adjacency(t(datt),type="signed")                 #SELECT SIGNED OR UNSIGNED HERE
#I am going with signed because if you pick unsigned, it mixes negatively and positiviely correlated nodes together and
#direction of correlation does matter for downstream analysis.
#(full explanation here: https://peterlangfelder.com/2018/11/25/signed-or-unsigned-which-network-type-is-preferable/)
# this calculates the whole network connectivity
k=as.numeric(apply(A,2,sum))-1
# standardized connectivity
Z.k=scale(k)
thresholdZ.k=-2.5 # often -2.5
outlierColor=ifelse(Z.k<thresholdZ.k,"red","black")
sampleTree = flashClust(as.dist(1-A), method = "average")
# Convert traits to a color representation where red indicates high values
traitColors=data.frame(numbers2colors(traits,signed=FALSE))
dimnames(traitColors)[[2]]=paste(names(traits))
datColors=data.frame(outlierC=outlierColor,traitColors)
remove.samples= Z.k<thresholdZ.k | is.na(Z.k)
datt=datt[!remove.samples,]
traits=traits[!remove.samples,] #1 sample removed
str(datt) #43
str(traits) #43
design=design[!remove.samples,]
str(design) #43 samples
rownames(design)
View(design)
design %>%
mutate(rownames(design) = str_extract(rownames(design), "^[^_]*"))
design %>%
mutate(rownames(design) == str_extract(rownames(design), "^[^_]*"))
design %>%
rownames_to_column()
design %>%
rownames_to_column() %>%
mutate(rowname = str_extract(rowname, "^[^_]*"))
days_to_removed <- read_csv("physiotraits_for_WGCNA/days_to_removed.csv")
phagocytosis <- read_csv("physiotraits_for_WGCNA/phagocytosis_alltimepoints.csv")
Rscore <- read_csv("physiotraits_for_WGCNA/treatment_Rscore.csv")
View(days_to_removed)
design %>%
rownames_to_column() %>%
mutate(rowname = str_extract(rowname, "^[^_]*"))
design %>%
rownames_to_column() %>%
mutate(rowname = str_extract(rowname, "^.[^_]*"))
design %>%
rownames_to_column() %>%
mutate(rowname = str_extract(rowname, "^.[^_]*"))
design %>%
rownames_to_column() %>%
mutate(rowname = str_extract(rowname, "^[^._]*"))
design %>%
rownames_to_column() %>%
mutate(rowname = str_extract(rowname, "^[^_]*"))
design %>%
rownames_to_column() %>%
mutate(rowname = str_extract(rowname, "^[^_]*")) %>%
separate(rowname, into = c("Species", "ID"), sep = "\\.")
design %>%
rownames_to_column() %>%
mutate(rowname = str_extract(rowname, "^[^_]*")) %>%
separate(rowname, into = c("Species", "ID"), sep = "\\.") %>%
mutate(Species == "Acropora cervicornis")
design %>%
rownames_to_column() %>%
mutate(rowname = str_extract(rowname, "^[^_]*")) %>%
separate(rowname, into = c("Species", "ID"), sep = "\\.") %>%
mutate(Species = "Acropora cervicornis")
days_to_removed
design %>%
rownames_to_column() %>%
mutate(rowname = str_extract(rowname, "^[^_]*")) %>%
separate(rowname, into = c("Species", "ID"), sep = "\\.") %>%
mutate(Species = "Acropora cervicornis") %>%
inner_join(., days_to_removed, by=c("Species", "ID", "Genotype"))
design %>%
rownames_to_column() %>%
mutate(rowname = str_extract(rowname, "^[^_]*")) %>%
separate(rowname, into = c("Species", "ID"), sep = "\\.") %>%
mutate(Species = "Acropora cervicornis") %>%
inner_join(., days_to_removed, by=c("Species", "ID"))
design %>%
rownames_to_column() %>%
mutate(rowname = str_extract(rowname, "^[^_]*")) %>%
separate(rowname, into = c("Species", "ID"), sep = "\\.") %>%
mutate(Species = "Acropora cervicornis") %>%
mutate(ID = as.double(ID)) %>%
inner_join(., days_to_removed, by=c("Species", "ID"))
days_to_removed
View(days_to_removed)
design %>%
rownames_to_column() %>%
mutate(rowname = str_extract(rowname, "^[^_]*")) %>%
separate(rowname, into = c("Species", "ID"), sep = "\\.") %>%
mutate(Species = "Acropora cervicornis") %>%
mutate(ID = as.double(ID)) -> design_edited
days_to_removed %>%
select(!Colony, !Treatment)
days_to_removed %>%
select(!c("Colony", "Treatment"))
days_to_removed %>%
select(!c("Colony", "Treatment")) %>%
filter(Species == "Acropora cervicornis") -> days_to_removed
View(phagocytosis)
phagocytosis %>%
pivot_longer(names_from="TimePoint", values_from="mean_replicate_percent_perID")
phagocytosis %>%
pivot_wider(names_from="TimePoint", values_from="mean_replicate_percent_perID")
phagocytosis %>%
pivot_wider(names_from="TimePoint", values_from="mean_replicate_percent_perID") -> phagocytosis
phagocytosis %>%
pivot_wider(names_from="TimePoint", values_from="mean_replicate_percent_perID") %>%
rename(Cells_initial = T0, Cells_endoftreamtent = T2)
phagocytosis <- read_csv("physiotraits_for_WGCNA/phagocytosis_alltimepoints.csv")
phagocytosis %>%
pivot_wider(names_from="TimePoint", values_from="mean_replicate_percent_perID") %>%
rename(Cells_initial = T0)
phagocytosis %>%
pivot_wider(names_from="TimePoint", values_from="mean_replicate_percent_perID")
phagocytosis %>%
pivot_wider(names_from="TimePoint", values_from="mean_replicate_percent_perID") %>%
rename(Column = T0)
phagocytosis %>%
pivot_wider(names_from="TimePoint", values_from="mean_replicate_percent_perID") %>%
rename("Column" = "T0")
phagocytosis %>%
pivot_wider(names_from="TimePoint", values_from="mean_replicate_percent_perID") %>%
rename("Column" == "T0")
phagocytosis %>%
pivot_wider(names_from="TimePoint", values_from="mean_replicate_percent_perID") %>%
rename(Column == T0)
phagocytosis %>%
pivot_wider(names_from="TimePoint", values_from="mean_replicate_percent_perID") %>%
rename(T0 = cells_initial)
phagocytosis %>%
pivot_wider(names_from="TimePoint", values_from="mean_replicate_percent_perID") %>%
dplyr::rename(T0 = cells_initial)
phagocytosis %>%
pivot_wider(names_from="TimePoint", values_from="mean_replicate_percent_perID") %>%
dplyr::rename(cells_initial = T0)
phagocytosis %>%
pivot_wider(names_from="TimePoint", values_from="mean_replicate_percent_perID") %>%
dplyr::rename(cells_initial = T0) %>%
dplyr::rename(cells_endoftreatment = T2) %>%
select(!c("Genotype", "Treatment", "num_days")) %>%
mutate(Species = "Acropora cervicornis") %>%
mutate(ID = as.double(ID))
phagocytosis %>%
pivot_wider(names_from="TimePoint", values_from="mean_replicate_percent_perID") %>%
dplyr::rename(cells_initial = T0) %>%
dplyr::rename(cells_endoftreatment = T2) %>%
select(!c("Genotype", "Treatment", "num_days")) %>%
mutate(Species = "Acropora cervicornis") %>%
mutate(ID = gsub("[AaPp]", "", ID))
phagocytosis %>%
pivot_wider(names_from="TimePoint", values_from="mean_replicate_percent_perID") %>%
dplyr::rename(cells_initial = T0) %>%
dplyr::rename(cells_endoftreatment = T2) %>%
select(!c("Genotype", "Treatment", "num_days")) %>%
mutate(Species = "Acropora cervicornis") %>%
mutate(ID = gsub("[AP]", "", ID)) %>%
mutate(ID = as.double(ID))
phagocytosis %>%
pivot_wider(names_from="TimePoint", values_from="mean_replicate_percent_perID") %>%
dplyr::rename(cells_initial = T0) %>%
dplyr::rename(cells_endoftreatment = T2) %>%
select(!c("Genotype", "Treatment", "num_days")) %>%
filter(Species == "Acer") %>%
mutate(Species = "Acropora cervicornis") %>%
mutate(ID = gsub("[AP]", "", ID)) %>%
mutate(ID = as.double(ID))
phagocytosis %>%
pivot_wider(names_from="TimePoint", values_from="mean_replicate_percent_perID") %>%
dplyr::rename(cells_initial = T0) %>%
dplyr::rename(cells_endoftreatment = T2) %>%
select(!c("Genotype", "Treatment", "num_days")) %>%
filter(Species == "Acer") %>%
mutate(Species = "Acropora cervicornis") %>%
mutate(ID = gsub("[AP]", "", ID)) %>%
mutate(ID = as.double(ID)) -> phagocytosis
View(Rscore)
Rscore %>%
filter(Species == "Acropora cervicornis")
Rscore %>%
filter(Species == "Acropora cervicornis") %>%
select(!c("Colony", "Treatment")) %>%
mutate(ID = as.double(ID))
Rscore %>%
filter(Species == "Acropora cervicornis") %>%
select(!c("Colony", "Treatment")) %>%
mutate(ID = as.double(ID)) -> Rscore
design
design_edited
full_join(design_edited, days_to_removed)
full_join(design_edited, days_to_removed, by = c("Species", "ID"))
full_join(design_edited, days_to_removed, by = c("Species", "ID")) %>%
full_join(., phagocytosis)
full_join(design_edited, days_to_removed, by = c("Species", "ID")) %>%
full_join(., phagocytosis) %>%
full_join(., Rscore)
traits
design
rownames(traits) <- rownames(design)
traits
days_to_removed
traits %>%
rownames_to_column() %>%
mutate(rowname = str_extract(rowname, "^[^_]*")) %>%
separate(rowname, into = c("Species", "ID"), sep = "\\.") %>%
mutate(Species = "Acropora cervicornis") %>%
mutate(ID = as.double(ID)) -> traits
traits
full_join(traits, days_to_removed, by = c("Species", "ID")) %>%
full_join(., phagocytosis) %>%
full_join(., Rscore)
full_join(traits, days_to_removed, by = c("Species", "ID")) %>%
full_join(., phagocytosis) %>%
full_join(., Rscore) %>%
drop_na(Initial)
full_join(traits, days_to_removed, by = c("Species", "ID")) %>%
full_join(., phagocytosis) %>%
full_join(., Rscore) %>%
drop_na(Initial) %>%
select(!c("Species", "ID"))
full_join(traits, days_to_removed, by = c("Species", "ID")) %>%
full_join(., phagocytosis) %>%
full_join(., Rscore) %>%
drop_na(Initial) %>%
select(!c("Species", "ID")) -> traits_withphysio
#datt=t(vsd.wg)
str(datt) #43
#### MODULE CORRELATIONS ####
# plotting correlations with traits:
load(file = "RData_files/networkdata_signed.RData")
load(file = "RData_files/wgcnaData.RData");
nGenes = ncol(datt); #15526
nSamples = nrow(datt); #43
# Recalculate MEs with color labels
MEs0 = moduleEigengenes(datt, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
# correlations of genes with eigengenes
moduleGeneCor=cor(MEs,datt)
moduleGenePvalue = corPvalueStudent(moduleGeneCor, nSamples);
moduleTraitCor = cor(MEs, traits_withphysio, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples);
moduleTraitCor
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(
Matrix = moduleTraitCor,
xLabels = names(traits),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1, 1),
main = paste("Module-trait relationships")
)
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(
Matrix = moduleTraitCor,
xLabels = names(traits_withphysio),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1, 1),
main = paste("Module-trait relationships")
)
table(moduleColors) # gives numbers of genes in each module
quartz()
library(RColorBrewer)
modLabels=sub("ME","",names(MEs))
ps=signif(moduleTraitPvalue,1)
cors=signif(moduleTraitCor,2)
textMatrix = cors;
# paste(cors, "\n(",ps, ")", sep = "");
textMatrix[ps>0.05]="-"
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(traits),
ySymbols = modLabels,
yLabels = modLabels,
colorLabels = FALSE,
colors = colorRampPalette(c("blue","lightblue","white","coral","red"))(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-0.7,0.7),
main = paste("A.cervicornis Module-Trait correlations"))
library(RColorBrewer)
modLabels=sub("ME","",names(MEs))
ps=signif(moduleTraitPvalue,1)
cors=signif(moduleTraitCor,2)
textMatrix = cors;
# paste(cors, "\n(",ps, ")", sep = "");
textMatrix[ps>0.05]="-"
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(traits_withphysio),
ySymbols = modLabels,
yLabels = modLabels,
colorLabels = FALSE,
colors = colorRampPalette(c("blue","lightblue","white","coral","red"))(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-0.7,0.7),
main = paste("A.cervicornis Module-Trait correlations"))
quartz()
labelShift=750 # increase to move module size labels to the right
par(mar = c(6, 8.5, 3, 3));
mct=table(moduleColors)
mct[modLabels]
x=barplot(mct[rev(modLabels)],horiz=T,las=1,xlim=c(0,16000),col=rev(modLabels))
text(mct[rev(modLabels)]+labelShift,y=x,mct[rev(modLabels)],cex=0.9)
