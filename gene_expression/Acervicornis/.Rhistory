View(all_genes_new)
View(all_genes)
View(all_genes_new)
View(new_row)
View(all_genes_new)
goslim <- read.csv("GO-GOslim.csv")
goslim <- goslim %>% dplyr::select(-term)
#generate list of all genes identified and background list for GO enrichment analysis
all_genes <- read_delim("GO-MWU/Acropora_iso2go.tab")
new_row <- as.data.frame(t(colnames(all_genes)), stringsAsFactors = FALSE)
colnames(all_genes)=c("gene", "GO_IDs")
colnames(new_row)=c("gene", "GO_IDs")
all_genes_new <- rbind(new_row, all_genes)
goslim <- read.csv("GO-GOslim.csv")
goslim <- goslim %>% dplyr::select(-term)
goslim
##### Writing goenrich function #####
goenrich <- function(filename,
identifier){
DMG <- as.character(filename$gene) #set the enrichment test list
DMG.vector <-c(t(DMG)) #change to vectors
gene.vector=as.integer(ALL.vector%in%DMG.vector) #Construct new vector with 1 for DEG and 0 for others
names(gene.vector)=ALL.vector #set names
DEG.pwf<-nullp(gene.vector, ID.vector, bias.data=LENGTH.vector) #weight vector by length of gene
#Find enriched GO terms
GO.wall<-goseq(DEG.pwf, ID.vector, gene2cat=GO.terms, test.cats=c("GO:CC", "GO:BP", "GO:MF"), method="Wallenius", use_genes_without_cat=TRUE)
GO <- GO.wall[order(GO.wall$over_represented_pvalue),]
colnames(GO)[1] <- "GO_ID"
#GOslim
GO.slim <- merge(GO, goslim, by = "GO_ID")
GO.slim <- GO.slim[!duplicated(GO.slim$GO_ID), ]
#Filtering for p > 0.05
filename_sig.GO <- GO.slim %>%
dplyr::filter(over_represented_pvalue <0.05) %>%
arrange(., ontology, term, over_represented_pvalue)
#write.csv(sig.GO , file = "output/WGBS/DMG/sig.GO.OxTxL.csv")
#Formatting sig gene file with a goterm per row
split <- strsplit(as.character(filename$GO_IDs), "; ")
split2 <- data.frame(v1 = rep.int(filename$gene, sapply(split, length)), v2 = unlist(split))
colnames(split2) <- c("gene", "GO_IDs")
filename2 <- filename %>% dplyr::select(-GO_IDs, -GO_Name, -Length)
filename_GO <- merge(split2, filename2, by = "gene")
colnames(filename_GO)[2] <- "GO_ID"
# Merge sig meth genes with goslim
filename_GOslim <- merge(filename_GO, filename_sig.GO, by = "GO_ID", all = TRUE)
write.csv(filename_GOslim)
return(filename_GOslim)
}
TreatedvUntreated_DGEs <- read.csv("results_csv/TreatedvsUntreated_annotatedDGEs.csv")
TreatedvUntreated_DGEs
goenrich(TreatedvInitial_DGEs, TreatedvInitial)
goenrich(TreatedvUntreated_DGEs, TreatedvUntreated)
# Vector with all genes after filtering
ALL.vector <-c(t(all_genes_new$gene))
ID.vector <- all_genes_new$gene
LENGTH.vector <-all_genes_new$Length
goenrich(TreatedvUntreated_DGEs, TreatedvUntreated)
TreatedvUntreated_DGEs
all_genes_new
LENGTH.vector <-length(all_genes_new)
LENGTH.vector
LENGTH.vector <-length(t(all_genes_new))
t(all_genes_new$gene)
goenrich(TreatedvUntreated_DGEs, TreatedvUntreated)
library(tidyverse)
library(plotrix)
library(ggpubr)
library(rstatix)
library(cowplot)
library(dunn.test)
library(Rmisc)
library(plyr)
library(dplyr)
percent_cells_df <- read_csv("Grace_percentcells_alldata.csv")
percent_cells_df%>%
mutate(Treatment = case_when(Treatment == "Control" ~ "Untreated",
Treatment == "Variable" ~ "Treated")) -> percent_cells_df
#there's one outlier to remove right off the bat: T1	Pcli	B	P9	r2	Percent=111.50	T1	Untreated
percent_cells_df %>%
filter(!(TimePoint=="T1" & Species == "Pcli" & Genotype == "B" & Treatment == "Untreated" & ID == "P9" & Replicate == "r2")) -> percent_cells_df
#replicates are technical replicates of the same coral fragment
#time points:
#T0 = initial pre-treatment (March 22)
#T1 = one week into treatment (March 30)
#T2 = end of treatment (April 20)
#follow-up = post CBASS and treatment follow-up (June 1)
percent_cells_df %>%
mutate(num_days = case_when(TimePoint == "T0" ~ "0",
TimePoint == "T1" ~ "7",
TimePoint == "T2" ~ "28",
TimePoint == "FollowUp" ~ "71")) %>%
mutate(num_days = as.factor(num_days)) %>%
mutate(num_days = fct_relevel(num_days, "0", "7", "28", "71")) -> percent_cells_df
library(tidyverse)
library(readxl)
library(rstatix)
library(plotrix)
library(ggpubr)
library(cowplot)
library(dunn.test)
coral_metadata <- readxl::read_xlsx("../metadata.xlsx")
fvfm <- read.csv("../3_photosynthetic_efficiency/ipam_tidy_data.csv")
Rscoredata <- read_xlsx("../4_R_intensity//data_rscores.xlsx")
april18 <- read_xlsx("../4_R_intensity/photo_metadata.xlsx", sheet = "april 18")
june21 <- read_xlsx("../4_R_intensity/photo_metadata.xlsx", sheet = "june 21")
percent_cells_df <- read_csv("../5_immune_cell_assay/Grace_percentcells_alldata.csv")
treatment_metadata<-fvfm %>%
select(Puck, Treatment) %>%
distinct() %>%
drop_na() #282 corals
fvfm %>%
drop_na(Colony) %>% #this is because there are some corals that never matched up to IPAM values so they're just NA
select(fvfm, Puck, Colony, Date, Species) %>%
filter(Date == "4/20/22" | Date == "4/22/22" | Date == "5/25/22") %>%
full_join(., treatment_metadata, by = "Puck") %>%
pivot_wider(names_from = Date, values_from = fvfm) %>%
select(!"NA") %>%
drop_na() %>%
mutate(change=(`5/25/22`-`4/22/22`)/`4/22/22`*100) -> fvfm_recovery_change
fvfm_recovery_change %>%
arrange(change) #there is one outlier
fvfm_recovery_change %>%
filter(change > -39) -> fvfm_recovery_change
fvfm_recovery_change %>%
select(Puck:Treatment, change) %>%
mutate_at(vars(Colony, Puck, Treatment, Species), factor) -> fvfm_recovery_stats
fvfm_recovery_stats
recovery_model_1 <- lm(change ~ Treatment*Species + Colony, data = fvfm_recovery_stats)
recovery_model_metrics_1 <- augment(recovery_model_1)
plot(recovery_model_1)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(recovery_model_metrics_1$.resid) # significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = recovery_model_metrics_1) #not significant
# identifying outliers
recovery_model_metrics_1 %>%
filter(abs(.std.resid) > 3)
# 1 outlier
fvfm_recovery_stats %>%
filter(change < 39) -> fvfm_recovery_stats
recovery_model_1 <- lm(change ~ Treatment*Species + Colony, data = fvfm_recovery_stats)
recovery_model_metrics_1 <- augment(recovery_model_1)
plot(recovery_model_1)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(recovery_model_metrics_1$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = recovery_model_metrics_1) #not significant
summary(aov(change ~ Treatment*Species, data = fvfm_recovery_stats))
TukeyHSD(aov(fvfm_loss_norm ~ Treatment*Species, data = treatment_normalized_bothspecies_2wayanova))
TukeyHSD(aov(fvfm_loss_norm ~ Treatment*Species, data = fvfm_recovery_stats))
TukeyHSD(aov(change ~ Treatment*Species, data = fvfm_recovery_stats))
percent_cells_df%>%
mutate(Treatment = case_when(Treatment == "Control" ~ "Untreated",
Treatment == "Variable" ~ "Treated")) -> percent_cells_df
#there's one outlier to remove right off the bat: T1	Pcli	B	P9	r2	Percent=111.50	T1	Untreated
percent_cells_df %>%
filter(!(TimePoint=="T1" & Species == "Pcli" & Genotype == "B" & Treatment == "Untreated" & ID == "P9" & Replicate == "r2")) -> percent_cells_df
#replicates are technical replicates of the same coral fragment
#time points:
#T0 = initial pre-treatment (March 22)
#T1 = one week into treatment (March 30)
#T2 = end of treatment (April 20)
#follow-up = post CBASS and treatment follow-up (June 1)
percent_cells_df %>%
filter(TimePoint == "T2" | TimePoint == "FollowUp") %>%
mutate(num_days = case_when(TimePoint == "T2" ~ "0",
TimePoint == "FollowUp" ~ "43")) %>%
mutate(num_days = as.factor(num_days)) %>%
mutate(num_days = fct_relevel(num_days, "0", "43")) -> percent_cells_df
percent_cells_df
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent)) %>%
ungroup() %>%
select(Species, Genotype, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
filter(num_days == "0" & Treatment == "Untreated") %>%
group_by(Species, Genotype) %>%
dplyr::summarise(mean_untreated_day0_genet = mean(mean_replicate_percent_perID)) -> untreated_day0_immunecells
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent)) %>%
ungroup() %>%
select(Species, Genotype, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
filter(num_days == "28") %>%
right_join(., untreated_day0_immunecells, by = c("Species", "Genotype")) %>%
mutate(relative_activity = ((mean_replicate_percent_perID-mean_untreated_day0_genet)/mean_untreated_day0_genet)*100) %>% #T1-T0/T0*100
ggplot(., aes(x=Species, y=relative_activity, fill= Treatment)) +
geom_boxplot() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Decline Immune Cell Activity")+
theme_classic() +
theme(text = element_text(size = 15))
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent)) %>%
ungroup() %>%
select(Species, Genotype, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
filter(num_days == "43") %>%
right_join(., untreated_day0_immunecells, by = c("Species", "Genotype")) %>%
mutate(relative_activity = ((mean_replicate_percent_perID-mean_untreated_day0_genet)/mean_untreated_day0_genet)*100) %>% #T1-T0/T0*100
ggplot(., aes(x=Species, y=relative_activity, fill= Treatment)) +
geom_boxplot() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Decline Immune Cell Activity")+
theme_classic() +
theme(text = element_text(size = 15))
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent)) %>%
ungroup() %>%
select(Species, Genotype, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
filter(num_days == "43") %>%
right_join(., untreated_day0_immunecells, by = c("Species", "Genotype")) %>%
mutate(relative_activity = ((mean_replicate_percent_perID-mean_untreated_day0_genet)/mean_untreated_day0_genet)*100) %>% #T1-T0/T0*100
ggplot(., aes(x=Species, y=relative_activity, fill= Treatment)) +
geom_boxplot() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB")) +
ylab("% Change Immune Cell Activity")+
theme_classic() +
theme(text = element_text(size = 15))
ggsave("normalized_percentchangeimmuneactivity_boxplot_species.pdf")
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
dplyr::select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
filter(num_days == "0" | num_days == "43") -> percent_cells_speciestreatments
str(percent_cells_speciestreatments)
percent_cells_speciestreatments %>%
dplyr::mutate_at(vars(Species, Treatment, num_days), factor) -> percent_cells_speciestreatments
percent_cells_speciestreatments %>%
filter(num_days == "0" & Treatment == "Untreated") %>%
group_by(Species, Genotype) %>%
dplyr::summarise(mean_untreated_day0_genet = mean(mean_replicate_percent_perID)) -> untreated_day0_immunecells
percent_cells_speciestreatments %>%
filter(num_days == "28") %>%
right_join(., untreated_day0_immunecells, by = c("Species", "Genotype")) %>%
mutate(relative_activity = ((mean_replicate_percent_perID-mean_untreated_day0_genet)/mean_untreated_day0_genet)*100) -> relative_activity_df
#save data frame for WGCNA
#write_csv(relative_activity_df, "relative_immune_activity.csv")
percent_cells_speciestreatments %>%
filter(num_days == "43") %>%
right_join(., untreated_day0_immunecells, by = c("Species", "Genotype")) %>%
mutate(relative_activity = ((mean_replicate_percent_perID-mean_untreated_day0_genet)/mean_untreated_day0_genet)*100) -> relative_activity_df
relative_activity_df
treat_model <- lm(relative_activity ~ Treatment*Species + Genotype + Tank, data = relative_activity_df)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #significant
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3)
relative_activity_df
summary(aov(change ~ Treatment*Species, data = relative_activity_df))
summary(aov(relative_activity ~ Treatment*Species, data = relative_activity_df))
TukeyHSD(aov(relative_activity ~ Treatment*Species, data = relative_activity_df))
knitr::opts_chunk$set(echo = TRUE)
library(KEGGREST)
library(tidyverse)
library(pathview)
library(clusterProfiler)
library(enrichplot)
kegg.list <- read.table("bioinformatics/Acervicornis_iso2kegg.tab")
colnames(kegg.list) <- c("TranscriptID","KO")
dim(kegg.list)
kegg.list %>%
mutate(gene = str_replace(TranscriptID, "Acervicornis", "Acropora_")) %>%
select(!TranscriptID) -> kegg.list
load("RData_files/Treated_vs_Untreated_fc.RData")
TreatedvUntreated_DGEs <- read_csv("results_csv/TreatedvUntreated_annotDGEs.csv") #1587 genes
Treated_vs_Untreated.fc %>% right_join(kegg.list, by = "gene") %>%
right_join(., TreatedvUntreated_DGEs, by = "gene") %>%  #narrow down to only the DGEs
select(lfc, KO) %>%
na.omit() %>% #987 genes
distinct(KO, .keep_all = TRUE) %>% #832 distinct KEGG terms
column_to_rownames(var = "KO") -> TreatedvUntreated_KEGG_DGEs
KEGG_enrich_TvU <- enrichKEGG(
gene = rownames(TreatedvUntreated_KEGG_DGEs),
organism = "ko",
keyType = "kegg",
pvalueCutoff = 0.05,
pAdjustMethod = "fdr",
universe = kegg.list$KO
)
length(unique(KEGG_enrich_TvU@result$Description)) #328 unique KEGG terms
length(unique(KEGG_enrich_TvU@result$Description)) #328 unique KEGG terms
KEGG_enrich_TvU@result$geneID
pathway_ids <- rownames(KEGG_enrich_TvU@result)
# Retrieve information for each pathway
pathway_info <- lapply(pathway_ids, keggGet)
# Extract pathway names and categories
pathway_details <- sapply(pathway_info, function(x) {
pathway_name <- x[[1]]$NAME
pathway_category <- x[[1]]$CLASS
return(c(Name = pathway_name, Category = pathway_category))
})
# Display the pathway names and categories
print(pathway_details)
pathway_categories_df <- tibble(
Pathway_ID = names(pathway_details),
Details = pathway_details
)
pathway_categories_df <- pathway_categories_df %>%
mutate(Description = sapply(Details, function(x) x[1]),
Category = sapply(Details, function(x) x[2])) %>%
select(-Details)
KEGG_enrich_TvU_categories <- left_join(KEGG_enrich_TvU@result, pathway_categories_df, by = "Description")
length(unique(KEGG_enrich_TvU_categories$Category)) #45 unique categories
filtered_KEGG_enrich_TvU <- KEGG_enrich_TvU_categories %>% filter(!grepl("Human Diseases", Category, ignore.case = TRUE))
str(filtered_KEGG_enrich_TvU) #242 KEGG terms
length(unique(filtered_KEGG_enrich_TvU$Category)) #34 categories
filtered_KEGG_enrich_TvU$GeneRatio <- sapply(filtered_KEGG_enrich_TvU$GeneRatio, function(x) {
eval(parse(text=x))
})
filtered_KEGG_enrich_TvU %>%
drop_na(Category) %>%
filter(p.adjust < 0.05) %>%
ggplot(., aes(x = reorder(Description, GeneRatio), y = GeneRatio)) +
geom_point(aes(size = Count, color = p.adjust)) +
theme_minimal() +
labs(x = "MAP Description", y = "Gene Ratio", title = "Treated vs. Untreated") +
coord_flip() +
scale_colour_gradient(low="blue", high="red")
#ggsave("TreatedvsUntreated_KEGGenrichment_p0.05.pdf")
filtered_KEGG_enrich_TvU %>%
drop_na(Category) %>%
filter(p.adjust < 0.05)
filtered_KEGG_enrich_TvU
KEGG_enrich_TvU@result
TreatedvUntreated_KEGG_DGEs
filtered_KEGG_enrich_TvU %>%
drop_na(Category) %>%
filter(p.adjust < 0.05) %>%
ggplot(., aes(x = reorder(Description, GeneRatio), y = GeneRatio)) +
geom_point(aes(size = Count, color = p.adjust)) +
theme_minimal() +
labs(x = "MAP Description", y = "Gene Ratio", title = "Treated vs. Untreated") +
coord_flip() +
scale_colour_gradient(low="blue", high="red") +
theme(text = element_text(size=15))
filtered_KEGG_enrich_TvU %>%
drop_na(Category) %>%
filter(p.adjust < 0.05) %>%
ggplot(., aes(x = reorder(Description, GeneRatio), y = GeneRatio)) +
geom_point(aes(size = Count, color = p.adjust)) +
theme_minimal() +
labs(x = "MAP Description", y = "Gene Ratio", title = "Treated vs. Untreated") +
coord_flip() +
scale_colour_gradient(low="blue", high="red") +
theme(plot.title = element_text(size=20),  # Increase plot title text size
axis.title = element_text(size=16),  # Increase axis titles text size
axis.text = element_text(size=12))
filtered_KEGG_enrich_TvU %>%
drop_na(Category) %>%
filter(p.adjust < 0.05) %>%
ggplot(., aes(x = reorder(Description, GeneRatio), y = GeneRatio)) +
geom_point(aes(size = Count, color = p.adjust)) +
theme_minimal() +
labs(x = "MAP Description", y = "Gene Ratio", title = "Treated vs. Untreated") +
coord_flip() +
scale_colour_gradient(low="blue", high="red") +
theme(plot.title = element_text(size=15),  # Increase plot title text size
axis.title = element_text(size=13),  # Increase axis titles text size
axis.text = element_text(size=12),
legend.text = element_text(size=12))
ggsave("TreatedvsUntreated_KEGGenrichment_p0.05.pdf")
setwd("~/OneDrive - University of Miami/GitHub/Ch2_temperaturevariability2023/gene_expression/Acervicornis")
load("RData_files/realModels_Acer.RData")
load("RData_files/pvals.RData")
library(tidyverse)
Treatment_Treated_vs_Untreated %>%
as.data.frame() %>%
rownames_to_column(var="gene") %>%
mutate(lpv = -log(padj, base = 10)) %>%
mutate(lpv = if_else(stat < 0, lpv * -1, lpv)) %>%
filter(abs(lpv) >= 1.3) %>%
left_join(read.table(file = "bioinformatics/Acervicornis_iso2geneName.tab",
sep = "\t",
quote="", fill=FALSE) %>%
mutate(gene = V1,
annot = V2) %>%
dplyr::select(-V1, -V2), by = c("gene" = "gene"))
read_csv("results_csv/unique_Treated_vs_Untreated_annotated_05.csv")
read_csv("results_csv/unique_Treated_vs_Untreated_annotated.csv")
read_csv("results_csv/unique_Treated_vs_Untreated_annotated_05.csv")
read_csv("results_csv/unique_Treated_vs_Untreated_annotatedKOG.csv")
read_csv("results_csv/unique_Treated_vs_Untreated_annotated_KOG.csv.csv")
read_csv("results_csv/unique_Treated_vs_Untreated_annotated_KOG.csv")
TreatedvUntreated <- read_csv("results_csv/unique_Treated_vs_Untreated_annotated_KOG.csv")
TreatedvUntreated
TreatedvUntreated %>%
arrange(desc(log2FoldChange))
TreatedvUntreated %>%
arrange(log2FoldChange)
load("Rdata_files/initial_fullddsdesigncountsVsdcountsWGCNA.RData")
normalized_counts <- counts(dds, normalized=TRUE)
library(DESeq2)
normalized_counts <- counts(dds, normalized=TRUE)
dds <- estimateSizeFactors(dds)
normalized_counts <- counts(dds, normalized=TRUE)
Acropora_023112_counts <- normalized_counts["Acropora_023112",]
Acropora_023112_counts
data_frame <- data.frame(
condition = factor(rep(c("Initial", "Treated", "Untreated"), each = n_samples/3)),
expression = gene_of_interest_counts
)
design
Acropora_023112_counts %>%
as.data.frame()
Acropora_023112_counts %>%
as.data.frame(var = "normalized_counts")
Acropora_023112_counts %>%
as.data.frame() %>%
rename(. = normalized_counts)
Acropora_023112_counts %>%
as.data.frame() %>%
rename(normalized_counts = `.`)
Acropora_023112_counts %>%
as.data.frame() %>%
rename(normalized_counts = c1)
Acropora_023112_counts %>%
as.data.frame()
Acropora_023112_counts
Acropora_023112_counts %>%
as.data.frame()
Acropora_023112_counts
Acropora_023112_counts %>%
as.data.frame()
df_Acropora_023112 <- data.frame(expression_level = Acropora_023112_counts)
df_Acropora_023112
design
right_join(design, df_Acropora_023112)
cross_join(design, df_Acropora_023112)
df_Acropora_023112 %>%
rownames_to_column(var="Sample")
df_Acropora_023112 %>%
rownames_to_column(var="Sample") -> df_Acropora_023112
design %>%
rownames_to_column(var="Sample") -> design
design
full_join(design, df_Acropora_023112)
full_join(design, df_Acropora_023112) %>%
ggplot(., aes(x=Treatment, y=expression_level, fill=Treatment)) +
geom_boxplot()
knitr::opts_chunk$set(echo = TRUE)
load("RData_files/Treated_vs_Untreated_fc.RData")
TreatedvUntreated_DGEs <- read_csv("results_csv/TreatedvUntreated_annotDGEs.csv") #1587 genes
TreatedvUntreated_DGEs
kegg.list <- read.table("bioinformatics/Acervicornis_iso2kegg.tab")
colnames(kegg.list) <- c("TranscriptID","KO")
kegg.list %>%
mutate(gene = str_replace(TranscriptID, "Acervicornis", "Acropora_")) %>%
select(!TranscriptID) -> kegg.list
Treated_vs_Untreated.fc %>% right_join(kegg.list, by = "gene") %>%
right_join(., TreatedvUntreated_DGEs, by = "gene")
Treated_vs_Untreated.fc %>% right_join(kegg.list, by = "gene") %>%
right_join(., TreatedvUntreated_DGEs, by = "gene") %>%
filter(gene == "Acropora_023112")
full_join(design, df_Acropora_023112) %>%
filter(!Treatment == "Initial") %>%
ggplot(., aes(x=Treatment, y=expression_level, fill=Treatment)) +
geom_boxplot()
full_join(design, df_Acropora_023112) %>%
filter(!Treatment == "Initial") %>%
ggplot(., aes(x=Treatment, y=expression_level, fill=Treatment)) +
geom_boxplot() +
theme_classic() +
scale_fill_manual(values = c( "#FF3333", "#00CCCC"))
full_join(design, df_Acropora_023112) %>%
filter(!Treatment == "Initial") %>%
ggplot(., aes(x=Treatment, y=expression_level, fill=Treatment)) +
geom_boxplot() +
theme_classic() +
scale_fill_manual(values = c( "#FF3333", "#00CCCC"))+
labs(y = "Normalized Expression Level")
full_join(design, df_Acropora_023112) %>%
filter(!Treatment == "Initial") %>%
ggplot(., aes(x=Treatment, y=expression_level, fill=Treatment)) +
geom_boxplot() +
theme_classic() +
scale_fill_manual(values = c( "#FF3333", "#00CCCC"))+
labs(y = "Normalized Expression Level") +
theme(text = element_text(size = 15))
Acropora_019471_counts <- normalized_counts["Acropora_019471",]
df_Acropora_019471 <- data.frame(expression_level = Acropora_019471_counts)
df_Acropora_019471 %>%
rownames_to_column(var="Sample") -> df_Acropora_019471
full_join(design, df_Acropora_019471) %>%
filter(!Treatment == "Initial") %>%
ggplot(., aes(x=Treatment, y=expression_level, fill=Treatment)) +
geom_boxplot() +
theme_classic() +
scale_fill_manual(values = c( "#FF3333", "#00CCCC"))+
labs(y = "Normalized Expression Level") +
theme(text = element_text(size = 15))
Treated_vs_Untreated.fc %>% right_join(kegg.list, by = "gene") %>%
right_join(., TreatedvUntreated_DGEs, by = "gene") %>%
filter(gene == "Acropora_019471")
