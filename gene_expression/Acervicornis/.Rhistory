filter(padj < 0.1) %>%
left_join(read.table(file = "bioinformatics/Acervicornis_iso2geneName.tab",
sep = "\t",
quote="", fill=FALSE) %>%
mutate(gene = V1,
annot = V2) %>%
dplyr::select(-V1, -V2), by = c("gene" = "gene")) %>% write_csv("TreatedvsUntreated_annotatedDGEs.csv")
#Treated vs. Untreated
as.data.frame(Treatment_Treated_vs_Untreated) %>%
rownames_to_column(var="gene") %>%
filter(padj < 0.1) %>%
left_join(read.table(file = "bioinformatics/Acervicornis_iso2geneName.tab",
sep = "\t",
quote="", fill=FALSE) %>%
mutate(gene = V1,
annot = V2) %>%
dplyr::select(-V1, -V2), by = c("gene" = "gene")) %>% str()
load("RData_files/Untreated_vs_Initial_lpv.RData")
Untreated_vs_Initial.p %>%
filter(abs(lpv) >= 1) %>%
left_join(read.table(file = "bioinformatics/Acervicornis_iso2geneName.tab",
sep = "\t",
quote="", fill=FALSE) %>%
mutate(gene = V1,
annot = V2) %>%
dplyr::select(-V1, -V2), by = c("gene" = "gene")) %>%
filter(str_detect(annot, 'NF-kappaB|peroxidas|TGF-beta|protein tyrosine kinase|fibrinogen|WD repeat-containing protein|apoptosis|extracellular matrix')) %>%
write.csv("UntreatedvsInitial_cherrypicking.csv")
load("RData_files/Treated_vs_Initial_lpv.RData")
Treated_vs_Initial.p %>%
filter(abs(lpv) >= 1) %>%
left_join(read.table(file = "bioinformatics/Acervicornis_iso2geneName.tab",
sep = "\t",
quote="", fill=FALSE) %>%
mutate(gene = V1,
annot = V2) %>%
dplyr::select(-V1, -V2), by = c("gene" = "gene")) %>%
filter(str_detect(annot, 'NF-kappaB|peroxidas|TGF-beta|protein tyrosine kinase|fibrinogen|WD repeat-containing protein|apoptosis|extracellular matrix')) %>%
write.csv("TreatedvsInitial_cherrypicking.csv")
load("RData_files/Treated_vs_Untreated_lpv.RData")
Treated_vs_Untreated.p %>%
filter(abs(lpv) >= 1) %>%
left_join(read.table(file = "bioinformatics/Acervicornis_iso2geneName.tab",
sep = "\t",
quote="", fill=FALSE) %>%
mutate(gene = V1,
annot = V2) %>%
dplyr::select(-V1, -V2), by = c("gene" = "gene")) %>%
filter(str_detect(annot, 'NF-kappaB|peroxidas|TGF-beta|protein tyrosine kinase|fibrinogen|WD repeat-containing protein|apoptosis|extracellular matrix')) %>%
write.csv("TreatedvsUntreated_cherrypicking.csv")
library(tidyverse)
library(WGCNA)
library(flashClust)
library(ape)
options(stringsAsFactors=FALSE)
allowWGCNAThreads()
# importing data generated from DESeq2 script
lnames=load("RData_files/data4wgcna.RData")
lnames # "vsd.wg"  "design" # log-transformed variance-stabilized gene expression, and table or experimental conditions
datt=t(vsd.wg)
ncol(datt) #27829
nrow(datt) #45
head(design)
str(design)
colnames(vsd.wg)
all.equal(colnames(vsd.wg), rownames(design)) #FALSE
rownames(design) <- colnames(vsd.wg)
head(design)
all.equal(colnames(vsd.wg), rownames(design)) #TRUE
rownames(datt)
View(design)
#change treatment to be binary (control = 0, variable = 1)
Initial = as.numeric(design$Treatment=="Initial")
Treated = as.numeric(design$Treatment == "Treated")
Untreated = as.numeric(design$Treatment == "Untreated")
Untreated
# coding genotype as binary (0 = FALSE, 1 = TRUE)
design$Genotype
SI_C = as.numeric(design$Genotype == "SI_C")
BC_8b = as.numeric(design$Genotype == "BC_8b")
MB_B = as.numeric(design$Genotype == "MB_B")
#change time point to be binary (0 = FALSE, 1 = TRUE)
Day0 = as.numeric(design$time_point=="Day_0")
Day29 =as.numeric(design$time_point=="Day_29")
traits <- data.frame(cbind(Initial, Untreated, Treated, SI_C,BC_8b, MB_B))
head(traits)
# identifies outlier genes
gsg = goodSamplesGenes(datt, verbose = 3);
gsg$allOK #if TRUE, no outlier genes
# calculates mean expression per array, then the number of missing values per array
meanExpressionByArray=apply( datt,1,mean, na.rm=T)
NumberMissingByArray=apply( is.na(data.frame(datt)),1, sum)
NumberMissingByArray
pdf("sample_mean_expression.pdf",height=4, width=8)
barplot(meanExpressionByArray,
xlab = "Sample", ylab = "Mean expression",
main ="Mean expression across samples",
names.arg = c(1:45), cex.names = 0.7)
pdf("sample_mean_expression.pdf",height=4, width=8)
barplot(meanExpressionByArray,
xlab = "Sample", ylab = "Mean expression",
main ="Mean expression across samples",
names.arg = c(1:45), cex.names = 0.7)
dev.off()
dev.off()
dev.off()
pdf("sample_mean_expression.pdf",height=4, width=8)
barplot(meanExpressionByArray,
xlab = "Sample", ylab = "Mean expression",
main ="Mean expression across samples",
names.arg = c(1:45), cex.names = 0.7)
barplot(meanExpressionByArray,
xlab = "Sample", ylab = "Mean expression",
main ="Mean expression across samples",
names.arg = c(1:44), cex.names = 0.7)
pdf("sample_mean_expression.pdf",height=4, width=8)
barplot(meanExpressionByArray,
xlab = "Sample", ylab = "Mean expression",
main ="Mean expression across samples",
names.arg = c(1:44), cex.names = 0.7)
dev.off()
p1<- barplot(meanExpressionByArray,
xlab = "Sample", ylab = "Mean expression",
main ="Mean expression across samples",
names.arg = c(1:44), cex.names = 0.7)
view(p1)
NumberMissingByArray
plot(p1)
print(barplot(meanExpressionByArray,
xlab = "Sample", ylab = "Mean expression",
main ="Mean expression across samples",
names.arg = c(1:44), cex.names = 0.7))
view(barplot(meanExpressionByArray,
xlab = "Sample", ylab = "Mean expression",
main ="Mean expression across samples",
names.arg = c(1:44), cex.names = 0.7))
meanExpressionByArray=apply( datt,1,mean, na.rm=T)
NumberMissingByArray=apply( is.na(data.frame(datt)),1, sum)
NumberMissingByArray
NumberMissingByArray=apply( is.na(data.frame(datt)),1, sum)
NumberMissingByArray
NumberMissingByArray
barplot(meanExpressionByArray,
xlab = "Sample", ylab = "Mean expression",
main ="Mean expression across samples",
names.arg = c(1:44), cex.names = 0.7)
dev.off()
quartz()
quartz()
barplot(meanExpressionByArray,
xlab = "Sample", ylab = "Mean expression",
main ="Mean expression across samples",
names.arg = c(1:44), cex.names = 0.7)
View(datt)
# sample dendrogram and trait heat map showing outliers
A=adjacency(t(datt),type="signed")                 #SELECT SIGNED OR UNSIGNED HERE
# this calculates the whole network connectivity
k=as.numeric(apply(A,2,sum))-1
# standardized connectivity
Z.k=scale(k)
thresholdZ.k=-2.5 # often -2.5
outlierColor=ifelse(Z.k<thresholdZ.k,"red","black")
sampleTree = flashClust(as.dist(1-A), method = "average")
# Convert traits to a color representation where red indicates high values
traitColors=data.frame(numbers2colors(traits,signed=FALSE))
dimnames(traitColors)[[2]]=paste(names(traits))
datColors=data.frame(outlierC=outlierColor,traitColors)
quartz()
plotDendroAndColors(sampleTree,groupLabels=names(datColors), colors=datColors,main="Sample dendrogram and trait heatmap")
emove.samples= Z.k<thresholdZ.k | is.na(Z.k)
datt=datt[!remove.samples,]
remove.samples= Z.k<thresholdZ.k | is.na(Z.k)
datt=datt[!remove.samples,]
traits=traits[!remove.samples,] #1 sample removed
write.csv(traits, file="traits.csv")
save(datt,traits,file="wgcnaData.RData")
library(tidyverse)
library(WGCNA)
library(flashClust)
library(ape)
options(stringsAsFactors=FALSE)
allowWGCNAThreads()
load("RData_files/data4wgcna.RData")
datt=t(vsd.wg)
# Try different betas ("soft threshold") - power factor for calling connections between genes
powers = c(seq(from = 2, to=26, by=1))
# Call the network topology analysis function
sft = pickSoftThreshold(datt, powerVector = powers, verbose = 8,networkType="signed")
sizeGrWindow(9, 5)
pdf("soft_threshold_signed.pdf",height=4, width=8)
par(mfrow = c(1,2));
cex1 = 0.9;
View(datt)
str(datt)
load("RData_files/wgcnaData.RData")
datt=t(vsd.wg)
str(datt)
# sample dendrogram and trait heat map showing outliers
A=adjacency(t(datt),type="signed")                 #SELECT SIGNED OR UNSIGNED HERE
# this calculates the whole network connectivity
k=as.numeric(apply(A,2,sum))-1
Z.k=scale(k)
thresholdZ.k=-2.5 # often -2.5
outlierColor=ifelse(Z.k<thresholdZ.k,"red","black")
sampleTree = flashClust(as.dist(1-A), method = "average")
# Convert traits to a color representation where red indicates high values
traitColors=data.frame(numbers2colors(traits,signed=FALSE))
dimnames(traitColors)[[2]]=paste(names(traits))
datColors=data.frame(outlierC=outlierColor,traitColors)
traits <- data.frame(cbind(Initial, Untreated, Treated, SI_C,BC_8b, MB_B))
traitColors=data.frame(numbers2colors(traits,signed=FALSE))
dimnames(traitColors)[[2]]=paste(names(traits))
datColors=data.frame(outlierC=outlierColor,traitColors)
quartz()
plotDendroAndColors(sampleTree,groupLabels=names(datColors), colors=datColors,main="Sample dendrogram and trait heatmap")
remove.samples= Z.k<thresholdZ.k | is.na(Z.k)
datt=datt[!remove.samples,]
traits=traits[!remove.samples,] #1 sample removed
str(datt)
str(traits) #
write.csv(traits, file="traits.csv")
save(datt,traits,file="wgcnaData.RData")
load("RData_files/wgcnaData.RData")
datt=t(vsd.wg)
str(datt)
load("RData_files/wgcnaData.RData")
#datt=t(vsd.wg)
str(datt)
# Try different betas ("soft threshold") - power factor for calling connections between genes
powers = c(seq(from = 2, to=26, by=1))
# Call the network topology analysis function
sft = pickSoftThreshold(datt, powerVector = powers, verbose = 8,networkType="signed")
sizeGrWindow(9, 5)
pdf("soft_threshold_signed.pdf",height=4, width=8)
par(mfrow = c(1,2));
cex1 = 0.9;
sizeGrWindow(9, 5)
quartz()
pdf("soft_threshold_signed.pdf",height=4, width=8)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
dev.off()
s.th=19 # re-specify according to previous section
adjacency = adjacency(datt, power = s.th,type="signed");
TOM = TOMsimilarity(adjacency,TOMType="signed");
rm(adjacency) #for memory space
dissTOM = 1-TOM
rm(TOM)
# Call the hierarchical clustering function
geneTree = flashClust(as.dist(dissTOM), method = "average")
plot(geneTree, xlab="", sub="", main="Gene Clustering on TOM-based dissimilarity", labels= FALSE,hang=0.04)
minModuleSize = 30;
dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM,
deepSplit = 2, pamRespectsDendro = FALSE,
minClusterSize = minModuleSize);
dynamicColors = labels2colors(dynamicMods)
table(dynamicColors)
# Calculate eigengenes
MEList = moduleEigengenes(datt, colors = dynamicColors)
MEs = MEList$eigengenes
# Calculate dissimilarity of module eigengenes
MEDiss = 1-cor(MEs);
METree = flashClust(as.dist(MEDiss), method = "average");
save(dynamicMods,dynamicColors,MEs,METree,geneTree,file="1stPassModules.RData")
mm=load('RData_files/1stPassModules.RData')
mm=load('RData_files/1stPassModules.RData')
mm
lnames=load('RData_files/wgcnaData.RData')
traits
head(datt)
quartz()
MEDissThres = 0 # in the first pass, set this to 0 - no merging (we want to see the module-traits heatmap first, then decide which modules are telling us the same story and better be merged)
sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes",
xlab = "", sub = "")
# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red")
plot(METree, main = "Clustering of module eigengenes",
xlab = "", sub = "")
# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red")  #
merge = mergeCloseModules(datt, dynamicColors, cutHeight = MEDissThres, verbose = 3)
# The merged module colors
mergedColors = merge$colors;
# Eigengenes of the new merged modules:
mergedMEs = merge$newMEs
# plotting the fabulous ridiculogram
quartz()
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE, hang = 0.03,
addGuide = FALSE, guideHang = 0.05,lwd=0.3)
moduleColors = mergedColors
# Construct numerical labels corresponding to the colors
colorOrder = c("grey", standardColors(50));
moduleLabels = match(moduleColors, colorOrder)-1;
MEs = mergedMEs;
# Calculate dissimilarity of module eigengenes
quartz()
MEDiss = 1-cor(MEs);
# Cluster module eigengenes
METree = flashClust(as.dist(MEDiss), method = "average");
# Plot the result
sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes",
xlab = "", sub = "")
# how many genes in each module?
table(moduleColors)
plot(METree, main = "Clustering of module eigengenes",
xlab = "", sub = "")
# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red")
MEDissThres = 0.4 # in the first pass, set this to 0 - no merging (we want to see the module-traits heatmap first, then decide which modules are telling us the same story and better be merged)
sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes",
xlab = "", sub = "")
# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red")
merge = mergeCloseModules(datt, dynamicColors, cutHeight = MEDissThres, verbose = 3)
# The merged module colors
mergedColors = merge$colors;
# Eigengenes of the new merged modules:
mergedMEs = merge$newMEs
# plotting the fabulous ridiculogram
quartz()
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
c("Dynamic Tree Cut", "Merged dynamic"),
dendroLabels = FALSE, hang = 0.03,
addGuide = FALSE, guideHang = 0.05,lwd=0.3)
# Rename to moduleColors
moduleColors = mergedColors
# Construct numerical labels corresponding to the colors
colorOrder = c("grey", standardColors(50));
moduleLabels = match(moduleColors, colorOrder)-1;
MEs = mergedMEs;
# Calculate dissimilarity of module eigengenes
quartz()
MEDiss = 1-cor(MEs);
# Cluster module eigengenes
METree = flashClust(as.dist(MEDiss), method = "average");
# Plot the result
sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes",
xlab = "", sub = "")
# how many genes in each module?
table(moduleColors)
# Save module colors and labels for use in subsequent parts
save(MEs, geneTree, moduleLabels, moduleColors, file = "networkdata_signed.RData")
# Define numbers of genes and samples
nGenes = ncol(datt); #27829
nSamples = nrow(datt); #44
# Recalculate MEs with color labels
MEs0 = moduleEigengenes(datt, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleGeneCor=cor(MEs,datt)
moduleGenePvalue = corPvalueStudent(moduleGeneCor, nSamples);
moduleTraitCor = cor(MEs, traits, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples);
quartz()
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(
Matrix = moduleTraitCor,
xLabels = names(traits),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1, 1),
main = paste("Module-trait relationships")
)
traits
rownames(design)
str(design)
remove.samples
design=design[!remove.samples,]
str(design)
View(design)
moduleGeneCor=cor(MEs,datt)
moduleGenePvalue = corPvalueStudent(moduleGeneCor, nSamples);
moduleTraitCor = cor(MEs, traits, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples);
# module-trait correlations
quartz()
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(
Matrix = moduleTraitCor,
xLabels = names(traits),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1, 1),
main = paste("Module-trait relationships")
)
table(moduleColors) # gives numbers of genes in each module
textMatrix = paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(
Matrix = moduleTraitCor,
xLabels = names(traits),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.5,
zlim = c(-1, 1),
main = paste("Module-trait relationships")
)
quartz()
library(RColorBrewer)
modLabels=sub("ME","",names(MEs))
ps=signif(moduleTraitPvalue,1)
cors=signif(moduleTraitCor,2)
textMatrix = cors;
# paste(cors, "\n(",ps, ")", sep = "");
textMatrix[ps>0.05]="-"
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(traits),
ySymbols = modLabels,
yLabels = modLabels,
colorLabels = FALSE,
colors = colorRampPalette(c("blue","lightblue","white","coral","red"))(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-0.7,0.7),
main = paste("A.cervicornis Module-Trait correlations"))
ps=signif(moduleTraitPvalue,1)
cors=signif(moduleTraitCor,2)
textMatrix = cors;
# paste(cors, "\n(",ps, ")", sep = "");
textMatrix[ps>0.05]="-"
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = names(traits),
ySymbols = modLabels,
yLabels = modLabels,
colorLabels = FALSE,
colors = colorRampPalette(c("blue","lightblue","white","coral","red"))(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-0.7,0.7),
main = paste("A.cervicornis Module-Trait correlations"))
quartz()
labelShift=750 # increase to move module size labels to the right
par(mar = c(6, 8.5, 3, 3));
mct=table(moduleColors)
mct[modLabels]
x=barplot(mct[rev(modLabels)],horiz=T,las=1,xlim=c(0,16000),col=rev(modLabels))
text(mct[rev(modLabels)]+labelShift,y=x,mct[rev(modLabels)],cex=0.9)
labelShift=750 # increase to move module size labels to the right
par(mar = c(6, 8.5, 3, 3));
mct=table(moduleColors)
mct[modLabels]
x=barplot(mct[rev(modLabels)],horiz=T,las=1,xlim=c(0,16000),col=rev(modLabels))
text(mct[rev(modLabels)]+labelShift,y=x,mct[rev(modLabels)],cex=0.9)
traits
table(moduleColors)
# run for each of these statements individually
whichTrait="Initial"
nGenes = ncol(datt);
nSamples = nrow(datt);
selTrait = as.data.frame(traits[,whichTrait]);
names(selTrait) = whichTrait
# names (colors) of the modules
modNames = substring(names(MEs), 3)
geneModuleMembership = as.data.frame(signedKME(datt, MEs));
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));
names(geneModuleMembership) = paste("MM", modNames, sep="");
names(MMPvalue) = paste("p.MM", modNames, sep="");
geneTraitSignificance = as.data.frame(cor(datt, selTrait, use = "p"));
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples));
names(geneTraitSignificance) = paste("GS.", names(selTrait), sep="");
names(GSPvalue) = paste("p.GS.", names(selTrait), sep="");
