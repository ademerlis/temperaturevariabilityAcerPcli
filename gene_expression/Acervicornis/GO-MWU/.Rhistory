percent_cells_df %>%
filter(TimePoint == "FollowUp") %>%
ggplot(., aes(x=Genotype, y=Percent, fill = Treatment)) +
geom_boxplot() +
facet_wrap(~Species, scales = "free_x") +
theme_classic() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))
percent_cells_df %>%
filter(TimePoint == "T0") %>%
ggplot(., aes(x=Genotype, y=Percent, fill = Treatment)) +
geom_boxplot() +
facet_wrap(~Species, scales = "free_x") +
theme_classic() +
scale_fill_manual(labels=c("Treated", "Untreated"), values = c("#F54A34", "#60DBDB"))
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
filter(num_days == "0" | num_days == "28") -> percent_cells_speciestreatments
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, Genotype, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
filter(num_days == "0" | num_days == "28") -> percent_cells_genotypespeciestreatments
View(treat_model_metrics)
str(percent_cells_genotypespeciestreatments)
percent_cells_genotypespeciestreatments %>%
dplyr::mutate_at(vars(Species, Genotype, Treatment, num_days), factor) -> percent_cells_genotypespeciestreatments
#average all technical replicates together before running stats
percent_cells_df %>%
filter(Species == "Acer") %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, Genotype, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
filter(num_days == "0" | num_days == "28") -> Acer_percent_cells
Acer_percent_cells
str(Acer_percent_cells)
Acer_percent_cells %>%
dplyr::mutate_at(vars(Species, Genotype, Treatment, num_days), factor) -> Acer_percent_cells
Acer_model <- lm(mean_replicate_percent_perID ~ Treatment*Genotype*num_days + Tank, data = Acer_percent_cells)
Acer_model_metrics <- augment(Acer_model)
plot(Acer_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Acer_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Genotype*num_days, data = Acer_model_metrics) #significant
# identifying outliers
Acer_model_metrics %>%
filter(abs(.std.resid) > 3)
#make interaction term
Acer_model_metrics$Treatment_Genotype_numdays <- interaction(Acer_model_metrics$Treatment, Acer_model_metrics$Genotype, Acer_model_metrics$num_days)
#make interaction term
Acer_percent_cells$Treatment_Genotype_numdays <- interaction(Acer_model_metrics$Treatment, Acer_percent_cells$Genotype, Acer_percent_cells$num_days)
# kruskal wallis test
kruskal_test(mean_replicate_percent_perID ~ Treatment_Genotype_numdays, data = Acer_percent_cells)
#posthoc test
dunn.test(Acer_percent_cells$mean_replicate_percent_perID, Acer_percent_cells$Treatment_Genotype_numdays, method = "bonferroni")
#posthoc test
as.data.frame(dunn.test(Acer_percent_cells$mean_replicate_percent_perID, Acer_percent_cells$Treatment_Genotype_numdays, method = "bonferroni"))
library(tidyverse)
library(plotrix)
library(ggpubr)
library(rstatix)
library(cowplot)
library(dunn.test)
library(Rmisc)
library(plyr)
library(dplyr)
percent_cells_df <- read_csv("Grace_percentcells_alldata.csv")
percent_cells_df%>%
mutate(Treatment = case_when(Treatment == "Control" ~ "Untreated",
Treatment == "Variable" ~ "Treated")) -> percent_cells_df
#there's one outlier to remove right off the bat: T1	Pcli	B	P9	r2	Percent=111.50	T1	Untreated
percent_cells_df %>%
filter(!(TimePoint=="T1" & Species == "Pcli" & Genotype == "B" & Treatment == "Untreated" & ID == "P9" & Replicate == "r2")) -> percent_cells_df
#replicates are technical replicates of the same coral fragment
#time points:
#T0 = initial pre-treatment (March 22)
#T1 = one week into treatment (March 30)
#T2 = end of treatment (April 20)
#follow-up = post CBASS and treatment follow-up (June 1)
percent_cells_df %>%
mutate(num_days = case_when(TimePoint == "T0" ~ "0",
TimePoint == "T1" ~ "7",
TimePoint == "T2" ~ "28",
TimePoint == "FollowUp" ~ "71")) %>%
mutate(num_days = as.factor(num_days)) %>%
mutate(num_days = fct_relevel(num_days, "0", "7", "28", "71")) -> percent_cells_df
#average all technical replicates together before running stats
percent_cells_df %>%
drop_na() %>% #one technical replicate is NA for one coral ID
group_by(num_days, Species, ID, Treatment) %>%
dplyr::mutate(mean_replicate_percent_perID = mean(Percent), se_replicate_percent_perID = std.error(Percent)) %>%
ungroup() %>%
select(Species, Genotype, ID, Tank, Treatment, num_days, mean_replicate_percent_perID) %>%
distinct() %>%
filter(num_days == "0" | num_days == "28") -> percent_cells_speciestreatments
str(percent_cells_speciestreatments)
percent_cells_speciestreatments %>%
dplyr::mutate_at(vars(Species, Treatment, num_days), factor) -> percent_cells_speciestreatments
treat_model <- lm(mean_replicate_percent_perID ~ Treatment*Species*num_days + Genotype + Tank, data = percent_cells_speciestreatments)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species*num_days, data = treat_model_metrics) #significant
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3)
# 0 outliers
#make interaction term
percent_cells_speciestreatments$Treatment_Species_numdays <- interaction(percent_cells_speciestreatments$Treatment, percent_cells_speciestreatments$Species, percent_cells_speciestreatments$num_days)
#run Welch's anova
oneway.test(mean_replicate_percent_perID ~ Treatment_Species_numdays, data = percent_cells_speciestreatments, var.equal = FALSE) #significant
#posthoc test: Games-Howell
games_howell_test(percent_cells_speciestreatments, mean_replicate_percent_perID ~ Treatment_Species_numdays) #%>%
# write_csv("percentcells_speciestreatment_posthoc.csv")
library(tidyverse)
library(plotrix) #for standard error function
feb4<- readxl::read_xlsx("Data from LabVIEW/20220204_TemperatureData edited.xlsx", col_types = c("date", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric"))
feb23 <- readxl::read_xlsx("Data from LabVIEW/20220223_TemperatureData edited.xlsx")
march7 <- readxl::read_xlsx("Data from LabVIEW/20220307_TemperatureData - Copy.xlsx")
march29 <- readxl::read_xlsx("Data from LabVIEW/20220329_TemperatureData.xlsx")
april15 <- readxl::read_xlsx("Data from LabVIEW/20220415_TemperatureData.xlsx")
april25 <-readxl::read_xlsx("Data from LabVIEW/20220425_TemperatureData (1).xlsx")
acclimation <- bind_rows(feb4, feb23)
temptreatment<- bind_rows(march7, march29, april15) #treatment started march 24 and ended april 20
temptreatment %>% filter(Time >= as.Date("2022-03-24") & Time <= as.Date("2022-04-22")) -> temptreatment
CBASS #april 22
acclimation <- bind_rows(feb4, feb23)
temptreatment<- bind_rows(march7, march29, april15) #treatment started march 24 and ended april 20
temptreatment %>% filter(Time >= as.Date("2022-03-24") & Time <= as.Date("2022-04-22")) -> temptreatment
#CBASS #april 22
recovery <- bind_rows(april15, april25, may11, may20, june10) #recovery started april 23 and ended june 21
april25 <-readxl::read_xlsx("Data from LabVIEW/20220425_TemperatureData (1).xlsx")
april15
CBASS <- readxl::read_xlsx("Data from LabVIEW/CBASS_labview.xlsx")
may11 <- readxl::read_xlsx("Data from LabVIEW/20220511_TemperatureData.xlsx")
may20 <- readxl::read_xlsx("Data from LabVIEW/20220520_TemperatureData.xlsx")
june10 <- readxl::read_xlsx("Data from LabVIEW/20220610_TemperatureData - Copy.xlsx")
june24 <- readxl::read_xlsx("Data from LabVIEW/20220624_TemperatureData (1).xlsx")
july6 <- readxl::read_xlsx("Data from LabVIEW/20220706_TemperatureData.xlsx",
col_types = c("date", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric"))
library(tidyverse)
library(readxl)
library(rstatix)
library(plotrix)
library(ggpubr)
Rscoredata <- read_xlsx("data_rscores.xlsx")
Rscoredata %>%
select(`Date (Folder Name)`) %>%
distinct() #Dates with scores: 3/8-3/18 (Initial), 4/18, 6/21, 7/8
Rscoredata %>%
rename(`Photo ID` = `Image #`) %>%
rename(Date = `Date (Folder Name)`) -> Rscoredata
initialphotos <- read_xlsx("photo_metadata.xlsx")
april18 <- read_xlsx("photo_metadata.xlsx", sheet = "april 18")
june21 <- read_xlsx("photo_metadata.xlsx", sheet = "june 21")
july8 <- read_xlsx("photo_metadata.xlsx", sheet = "july 8")
coral_metadata <- readxl::read_xlsx("../metadata.xlsx")
coral_metadata %>%
select(Species:CBASS_tank) -> coral_metadata
library(tidyverse)
library(readxl)
library(rstatix)
library(plotrix)
library(ggpubr)
library(cowplot)
Rscoredata <- read_xlsx("data_rscores.xlsx")
Rscoredata %>%
select(`Date (Folder Name)`) %>%
distinct() #Dates with scores: 3/8-3/18 (Initial), 4/18, 6/21, 7/8
Rscoredata %>%
rename(`Photo ID` = `Image #`) %>%
rename(Date = `Date (Folder Name)`) -> Rscoredata
initialphotos <- read_xlsx("photo_metadata.xlsx")
april18 <- read_xlsx("photo_metadata.xlsx", sheet = "april 18")
june21 <- read_xlsx("photo_metadata.xlsx", sheet = "june 21")
july8 <- read_xlsx("photo_metadata.xlsx", sheet = "july 8")
coral_metadata <- readxl::read_xlsx("../metadata.xlsx")
coral_metadata %>%
select(Species:CBASS_tank) -> coral_metadata
str(initialphotos)
initialphotos %>%
select(`Photo ID`:`Coral Position`) -> initialphotos
str(april18)
april18 %>%
select(`Photo ID`:`Coral Position`) -> april18
str(june21)
june21%>%
select(`Photo ID`:`Coral Position`) -> june21
str(july8)
july8 %>%
select(`Photo ID`:`Coral Position`) -> july8
full_join(initialphotos, april18) %>%
full_join(., june21) %>%
full_join(., july8) -> allRscores
allRscores
#Tank column depends on time point, as the tank assignments changed throughout timeline. But, should be able to use the Puck ID + Species as the unique identifier
allRscores %>%
mutate(Species = case_when(Species == "Acer" ~ "Acropora cervicornis",
Species == "Pcli" ~ "Pseudodiploria clivosa")) -> allRscores
allRscores %>%
rename(ID = `Puck ID`) -> allRscores #821 rows
full_join(allRscores, coral_metadata, by = c("Species", "ID")) %>%
drop_na(`Photo ID`)  -> allmetadata #821 rows
full_join(allmetadata, Rscoredata, by = c("Date", "Photo ID", "Coral Position")) -> Rintensity_withmetadata
Rintensity_withmetadata %>%
select(!Genotype) -> Rintensity_withmetadata
Rintensity_withmetadata$month <- format(Rintensity_withmetadata$Date, "%m")
Rintensity_withmetadata$Date <- as.factor(Rintensity_withmetadata$Date)
Rintensity_withmetadata$month <- as.factor(Rintensity_withmetadata$month)
Rintensity_withmetadata %>%
group_by(ID, Species, Colony, Treatment, month) %>%
mutate(mean_Rintensity_percoral = mean(Mean)) -> Rintensity_withmetadata
# Rintensity_withmetadata %>%
#   filter(is.na(Species)) #photo 4709 is a duplicate from photo 4711 so I already have these values in the spreadsheet
Rintensity_withmetadata %>%
drop_na(ID) -> Rintensity_withmetadata
Rintensity_withmetadata %>%
ungroup() %>%
filter(month == "03" | month == "04") %>%
select(ID, Species, Colony, Treatment, Treatment_Tank, month, mean_Rintensity_percoral) %>%
distinct() %>%
pivot_wider(names_from = "month", values_from = "mean_Rintensity_percoral") %>%
mutate(percent_change = ((`04`-`03`)/`03`)*100) -> percentchange
percentchange %>%
drop_na() -> percentchange #7 corals were not measured in the second time point
str(percentchange) #275 rows
percentchange %>%
mutate_at(vars(Colony, Treatment, Species), factor) -> percentchange
treat_model <- lm(percent_change ~ Treatment*Species + Colony + Treatment_Tank, data = percentchange)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) #significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #significant
# identifying outliers
treat_model_metrics %>%
filter(abs(.std.resid) > 3)
# 7 outliers
percentchange %>%
arrange(desc(percent_change)) # everything greater than 180 is an outlier
#remove outliers
percentchange  %>%
filter(percent_change < 180) -> percentchange
#rerun
treat_model <- lm(percent_change ~ Treatment*Species + Colony + Treatment_Tank, data = percentchange)
treat_model_metrics <- augment(treat_model)
shapiro_test(treat_model_metrics$.resid) #still significant
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #still significant
#run kruskal-wallis test
#make interaction term
percentchange$Treatment_Species <- interaction(percentchange$Treatment, percentchange$Species)
kruskal_test(percent_change ~ Treatment_Species, data = percentchange)#significant
#posthoc test
as.data.frame(dunn.test(percentchange$percent_change, percentchange$Treatment_Species, method = "bonferroni")) #%>%
#posthoc test
as.data.frame(dunn.test(percentchange$percent_change, percentchange$Treatment_Species, method = "bonferroni")) #%>%
library(dunn.test)
kruskal_test(percent_change ~ Treatment_Species, data = percentchange)#significant
percentchange %>%
filter(Species == "Acropora cervicornis") -> Acer_R_percentchange
Acer_Rtreat_model <- lm(percent_change ~ Treatment*Colony + Treatment_Tank, data = Acer_R_percentchange)
Acer_Rtreat_model_metrics <- augment(Acer_Rtreat_model)
plot(Acer_Rtreat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Acer_Rtreat_model_metrics$.resid) #significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Colony, data = Acer_Rtreat_model_metrics) #significant
# identifying outliers
Acer_Rtreat_model_metrics %>%
filter(abs(.std.resid) > 3) #0 outliers
#run non parametric test
#make interaction term
Acer_R_percentchange$Treatment_Colony <- interaction(Acer_R_percentchange$Treatment, Acer_R_percentchange$Colony)
kruskal_test(percent_change ~ Treatment_Colony, data = Acer_R_percentchange)#significant
#posthoc test
as.data.frame(dunn.test(Acer_R_percentchange$percent_change, Acer_R_percentchange$Treatment_Colony, method = "bonferroni"))
kruskal_test(percent_change ~ Treatment_Colony, data = Acer_R_percentchange)#significant
percentchange %>%
filter(Species == "Pseudodiploria clivosa") -> Pcli_R_percentchange
Pcli_Rtreat_model <- lm(percent_change ~ Treatment*Colony + Treatment_Tank, data = Pcli_R_percentchange)
Pcli_Rtreat_model_metrics <- augment(Pcli_Rtreat_model)
plot(Pcli_Rtreat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(Pcli_Rtreat_model_metrics$.resid) #not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Colony, data = Pcli_Rtreat_model_metrics) #not significant
# two-way anova
summary(aov(percent_change ~ Treatment*Colony, data = Pcli_R_percentchange)) #significant
TukeyHSD(aov(percent_change ~ Treatment*Colony, data = Pcli_R_percentchange))
# two-way anova
summary(aov(percent_change ~ Treatment*Colony, data = Pcli_R_percentchange)) #significant
library(tidyverse)
library(janitor)
library(rstatix)
library(cowplot)
library(plotrix)
metadata <- readxl::read_xlsx("../metadata.xlsx", sheet = "tidy_data")
str(metadata) #295 corals
# metadata %>%
#   filter(!Removed_Date == "unknown") -> metadata #244 corals...
metadata$Removed_Date <- as.numeric(metadata$Removed_Date)
metadata$Removed_Date <- as.Date(metadata$Removed_Date, origin = "1899-12-30")
metadata$mortality_date <- as.numeric(metadata$mortality_date)
metadata$mortality_date <- as.Date(metadata$mortality_date, origin = "1899-12-30")
metadata %>%
mutate(CBASS_temp = case_when(CBASS_tank == "1" ~ "36",
CBASS_tank == "2" ~ "37",
CBASS_tank == "3" ~ "32",
CBASS_tank == "4" ~ "33",
CBASS_tank == "5" ~ "35",
CBASS_tank == "6" ~ "30",
CBASS_tank == "7" ~ "34",
CBASS_tank == "8" ~ "28")) -> tidy_metadata
metadata %>%
filter(!is.na(slowburn_heatstress_tank)) #163 corals
metadata %>%
filter(!is.na(slowburn_heatstress_tank)) %>%
select(Species:heatstress_recovery_tank) %>%
mutate(CBASS_temp = case_when(CBASS_tank == "1" ~ "36",
CBASS_tank == "2" ~ "37",
CBASS_tank == "3" ~ "32",
CBASS_tank == "4" ~ "33",
CBASS_tank == "5" ~ "35",
CBASS_tank == "6" ~ "30",
CBASS_tank == "7" ~ "34",
CBASS_tank == "8" ~ "28")) %>%
mutate(slowburn= case_when(slowburn_heatstress_tank == "7" ~ "ambient",
TRUE ~ "heatstress_32")) -> slowburn_metadata
slowburn_metadata %>%
filter(slowburn == "heatstress_32") %>%
filter(Removed_Date >= "2022-06-25" | is.na(Removed_Date)) %>%
mutate(Removed_Date = ymd(Removed_Date)) %>%
mutate(mortality_date = ymd(mortality_date)) %>%
mutate(end_date = coalesce(Removed_Date, mortality_date)) %>% #if removed_date is NA, then look and use the date from mortality date
mutate(start_date="2022-06-25") %>%
mutate(start_date = ymd(start_date)) %>%
mutate(days_to_removed = end_date - start_date) %>%
select(Species, ID, Colony, Treatment, CBASS_temp, slowburn, days_to_removed) -> slowburn_summary_data
str(slowburn_summary_data)
#make factors: Colony, Puck, Tank, Treatment, Species
slowburn_summary_data %>%
mutate_at(vars(Species, ID, Colony, Treatment, CBASS_temp), factor) %>%
mutate(days_to_removed = as.numeric(days_to_removed)) -> slowburn_summary_data
treat_model <- lm(days_to_removed ~ Treatment*Species*CBASS_temp + Colony, data = slowburn_summary_data)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # not significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species*CBASS_temp, data = treat_model_metrics) #not significant
summary(aov(days_to_removed ~ Treatment*Species*CBASS_temp, data = slowburn_summary_data))
slowburn_metadata %>%
filter(slowburn == "heatstress_32") %>%
filter(Removed_Date >= "2022-06-25") %>%
mutate(start_date="2022-06-25") %>%
mutate(start_date = ymd(start_date)) %>%
mutate(Removed_Date = ymd(Removed_Date)) %>%
mutate(days_to_removed = Removed_Date - start_date) %>%
mutate(days_to_removed = as.numeric(days_to_removed)) %>%
group_by(Species, Treatment) %>%
summarise(mean=mean(days_to_removed), sd = sd(days_to_removed)) %>%
as.data.frame()
treat_model <- lm(days_to_removed ~ Treatment*Species*Colony, data = slowburn_summary_data)
treat_model_metrics <- augment(treat_model)
plot(treat_model)
# assess normality of residuals using Shapiro-Wilk test
shapiro_test(treat_model_metrics$.resid) # significant
# assess homogeneity of variances using Levene's Test
levene_test(.resid ~ Treatment*Species, data = treat_model_metrics) #not significant
#make interaction term
slowburn_summary_data$Species_Treatment_Colony <- interaction(slowburn_summary_data$Species, slowburn_summary_data$Treatment, slowburn_summary_data$Colony)
#run Welch's anova
oneway.test(days_to_removed ~ Species_Treatment_Colony, data = slowburn_summary_data, var.equal = FALSE) #significant
slowburn_summary_data
slowburn_summary_data
#what are the sample sizes?
slowburn_summary_data %>%
group_by(Species, Colony, Treatment, slowburn) %>%
summarise(count = n())
#what are the sample sizes?
slowburn_summary_data %>%
drop_na() %>%
group_by(Species, Colony, Treatment, slowburn) %>%
summarise(count = n())
#what are the sample sizes?
slowburn_summary_data %>%
drop_na() %>%
group_by(Species, Colony, Treatment) %>%
summarise(count = n())
slowburn_summary_data
#run Welch's anova
oneway.test(days_to_removed ~ Species_Treatment_Colony, data = slowburn_summary_data, var.equal = FALSE) #significant
library(tidyverse)
library(janitor)
library(rstatix)
library(cowplot)
library(plotrix)
metadata <- readxl::read_xlsx("../metadata.xlsx", sheet = "tidy_data")
str(metadata) #295 corals
# metadata %>%
#   filter(!Removed_Date == "unknown") -> metadata #244 corals...
metadata$Removed_Date <- as.numeric(metadata$Removed_Date)
metadata$Removed_Date <- as.Date(metadata$Removed_Date, origin = "1899-12-30")
metadata$mortality_date <- as.numeric(metadata$mortality_date)
metadata$mortality_date <- as.Date(metadata$mortality_date, origin = "1899-12-30")
metadata %>%
mutate(CBASS_temp = case_when(CBASS_tank == "1" ~ "36",
CBASS_tank == "2" ~ "37",
CBASS_tank == "3" ~ "32",
CBASS_tank == "4" ~ "33",
CBASS_tank == "5" ~ "35",
CBASS_tank == "6" ~ "30",
CBASS_tank == "7" ~ "34",
CBASS_tank == "8" ~ "28")) -> tidy_metadata
tidy_metadata %>%
filter(Removed_Date < "2022-05-20") %>%
arrange(desc(Removed_Date))
#April 26 was the last coral reported with a mortality date until the slow burn heat stress started. So have April 26 be the cut-off point for CBASS mortality plots.
ggplot(tidy_metadata, aes(x=Removed_Date, fill = Treatment)) +
geom_bar() +
facet_wrap(~Species)
ggplot(tidy_metadata, aes(x=mortality_date, fill = Treatment)) +
geom_bar() +
facet_wrap(~Species)
CBASS_mortality <- tidy_metadata %>%
dplyr::filter(Removed_Date >= "2022-04-20" & Removed_Date <= "2022-04-26")
#for this time period, Removed_Date and mortality_date match up so there's no need to use the coalesce function
CBASS_mortality %>%
mutate(Reason_removed = case_when(Reason_removed == "dead" ~ "RTL",
Reason_removed == "post-CBASS RTL" ~ "RTL",
Reason_removed == "RTL" ~ "RTL")) %>%
drop_na(Species, Treatment) %>%
group_by(Species, Treatment) %>%
summarize(count_RTL = n()) -> RTL_species_treatment_count
CBASS_mortality %>%
mutate(Reason_removed = case_when(Reason_removed == "dead" ~ "RTL",
Reason_removed == "post-CBASS RTL" ~ "RTL",
Reason_removed == "RTL" ~ "RTL")) %>%
drop_na(Species, Treatment) %>%
group_by(Species, Treatment, CBASS_temp) %>%
summarize(count_RTL = n()) -> RTL_species_treatment_CBASStemps
tidy_metadata %>%
dplyr::filter(!Removed_Date <= "2022-04-20" | is.na(Removed_Date)) %>% #remove everything that was removed before CBASS so you only account for RTL due to CBASS
group_by(Species, Treatment) %>%
summarize(count_total = n()) %>%
full_join(., RTL_species_treatment_count) %>%
mutate(count_survived = count_total-count_RTL) %>%
mutate(proportion_survived = count_survived/count_total) %>%
mutate(proportion_RTL = 1-proportion_survived)
install.packages("goseq")
BiocManager::install("goseq")
#BiocManager::install("goseq")
library(goseq)
library(tidyverse)
library(tidyverse)
library(plotrix)
library(ggplot2)
library(tidyr)
goslim <- read.csv("GO-GOslim.csv")
goslim <- goslim %>% dplyr::select(-term)
View(goslim)
TreatedvUntreated_DGEs <- read.csv("results_csv/TreatedvsUntreated_annotatedDGEs.csv")
TreatedvUntreated_DGEs %>%
select(gene, annot)
#BiocManager::install("goseq")
library(tidyverse)
TreatedvUntreated_DGEs %>%
dplyr::select(gene, annot)
TreatedvUntreated_DGEs %>%
dplyr::select(gene, annot) -> TreatedvUntreated_DGEs
TreatedvInitial_DGEs <- read.csv("results_csv/TreatedvsInitial_annotatedDGEs.csv")
TreatedvInitial_DGEs %>%
dplyr::select(gene, annot) -> TreatedvInitial_DGEs
TreatedvUntreated_DGEs
Treated_vs_Initial_lpv <- read_csv("../results_csv/Treated_vs_Initial_lpv.csv")
setwd("~/OneDrive - University of Miami/GitHub/Ch2_temperaturevariability2023/gene_expression/Acervicornis/GO MWU")
Treated_vs_Initial_lpv <- read_csv("../results_csv/Treated_vs_Initial_lpv.csv")
Treated_vs_Initial_lpv %>%
mutate(
text_part = str_extract(gene, "[A-Za-z]+"),
numeric_part = str_extract(gene, "[0-9]+"))
#### update gene names so they match the GO Annotations file (Acropora000001 -> Acropora1) ####
library(tidyverse)
Treated_vs_Initial_lpv %>%
mutate(
text_part = str_extract(gene, "[A-Za-z]+"),
numeric_part = str_extract(gene, "[0-9]+"))
